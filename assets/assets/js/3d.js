webpackJsonp([0], [, , , , function (t, e, i) {
    "use strict";
    function n() { }
    function r(t, e) {
        this.x = t || 0,
            this.y = e || 0
    }
    function o() {
        this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
            arguments.length > 0 && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")
    }
    function a(t, e, i, n) {
        this._x = t || 0,
            this._y = e || 0,
            this._z = i || 0,
            this._w = void 0 !== n ? n : 1
    }
    function s(t, e, i) {
        this.x = t || 0,
            this.y = e || 0,
            this.z = i || 0
    }
    function h() {
        this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1],
            arguments.length > 0 && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")
    }
    function l(t, e, i, n, o, a, s, c, u, d) {
        Object.defineProperty(this, "id", {
            value: hh++
        }),
            this.uuid = sh.generateUUID(),
            this.name = "",
            this.image = void 0 !== t ? t : l.DEFAULT_IMAGE,
            this.mipmaps = [],
            this.mapping = void 0 !== e ? e : l.DEFAULT_MAPPING,
            this.wrapS = void 0 !== i ? i : is,
            this.wrapT = void 0 !== n ? n : is,
            this.magFilter = void 0 !== o ? o : ss,
            this.minFilter = void 0 !== a ? a : ls,
            this.anisotropy = void 0 !== u ? u : 1,
            this.format = void 0 !== s ? s : Es,
            this.type = void 0 !== c ? c : cs,
            this.offset = new r(0, 0),
            this.repeat = new r(1, 1),
            this.center = new r(0, 0),
            this.rotation = 0,
            this.matrixAutoUpdate = !0,
            this.matrix = new h,
            this.generateMipmaps = !0,
            this.premultiplyAlpha = !1,
            this.flipY = !0,
            this.unpackAlignment = 4,
            this.encoding = void 0 !== d ? d : Ks,
            this.version = 0,
            this.onUpdate = null
    }
    function c(t, e, i, n) {
        this.x = t || 0,
            this.y = e || 0,
            this.z = i || 0,
            this.w = void 0 !== n ? n : 1
    }
    function u(t, e, i) {
        this.uuid = sh.generateUUID(),
            this.width = t,
            this.height = e,
            this.scissor = new c(0, 0, t, e),
            this.scissorTest = !1,
            this.viewport = new c(0, 0, t, e),
            i = i || {},
            void 0 === i.minFilter && (i.minFilter = ss),
            this.texture = new l(void 0, void 0, i.wrapS, i.wrapT, i.magFilter, i.minFilter, i.format, i.type, i.anisotropy, i.encoding),
            this.depthBuffer = void 0 === i.depthBuffer || i.depthBuffer,
            this.stencilBuffer = void 0 === i.stencilBuffer || i.stencilBuffer,
            this.depthTexture = void 0 !== i.depthTexture ? i.depthTexture : null
    }
    function d(t, e, i) {
        u.call(this, t, e, i),
            this.activeCubeFace = 0,
            this.activeMipMapLevel = 0
    }
    function p(t, e, i, n, r, o, a, s, h, c, u, d) {
        l.call(this, null, o, a, s, h, c, n, r, u, d),
            this.image = {
                data: t,
                width: e,
                height: i
            },
            this.magFilter = void 0 !== h ? h : rs,
            this.minFilter = void 0 !== c ? c : rs,
            this.generateMipmaps = !1,
            this.flipY = !1,
            this.unpackAlignment = 1
    }
    function f(t, e, i, n, r, o, a, s, h, c) {
        t = void 0 !== t ? t : [],
            e = void 0 !== e ? e : qa,
            l.call(this, t, e, i, n, r, o, a, s, h, c),
            this.flipY = !1
    }
    function m() {
        this.seq = [],
            this.map = {}
    }
    function v(t, e, i) {
        var n = t[0];
        if (n <= 0 || n > 0)
            return t;
        var r = e * i
            , o = uh[r];
        if (void 0 === o && (o = new Float32Array(r),
            uh[r] = o),
            0 !== e) {
            n.toArray(o, 0);
            for (var a = 1, s = 0; a !== e; ++a)
                s += i,
                    t[a].toArray(o, s)
        }
        return o
    }
    function g(t, e) {
        var i = dh[e];
        void 0 === i && (i = new Int32Array(e),
            dh[e] = i);
        for (var n = 0; n !== e; ++n)
            i[n] = t.allocTextureUnit();
        return i
    }
    function _(t, e) {
        t.uniform1f(this.addr, e)
    }
    function y(t, e) {
        t.uniform1i(this.addr, e)
    }
    function x(t, e) {
        void 0 === e.x ? t.uniform2fv(this.addr, e) : t.uniform2f(this.addr, e.x, e.y)
    }
    function b(t, e) {
        void 0 !== e.x ? t.uniform3f(this.addr, e.x, e.y, e.z) : void 0 !== e.r ? t.uniform3f(this.addr, e.r, e.g, e.b) : t.uniform3fv(this.addr, e)
    }
    function w(t, e) {
        void 0 === e.x ? t.uniform4fv(this.addr, e) : t.uniform4f(this.addr, e.x, e.y, e.z, e.w)
    }
    function S(t, e) {
        t.uniformMatrix2fv(this.addr, !1, e.elements || e)
    }
    function E(t, e) {
        void 0 === e.elements ? t.uniformMatrix3fv(this.addr, !1, e) : (fh.set(e.elements),
            t.uniformMatrix3fv(this.addr, !1, fh))
    }
    function T(t, e) {
        void 0 === e.elements ? t.uniformMatrix4fv(this.addr, !1, e) : (ph.set(e.elements),
            t.uniformMatrix4fv(this.addr, !1, ph))
    }
    function M(t, e, i) {
        var n = i.allocTextureUnit();
        t.uniform1i(this.addr, n),
            i.setTexture2D(e || lh, n)
    }
    function A(t, e, i) {
        var n = i.allocTextureUnit();
        t.uniform1i(this.addr, n),
            i.setTextureCube(e || ch, n)
    }
    function P(t, e) {
        t.uniform2iv(this.addr, e)
    }
    function R(t, e) {
        t.uniform3iv(this.addr, e)
    }
    function L(t, e) {
        t.uniform4iv(this.addr, e)
    }
    function O(t) {
        switch (t) {
            case 5126:
                return _;
            case 35664:
                return x;
            case 35665:
                return b;
            case 35666:
                return w;
            case 35674:
                return S;
            case 35675:
                return E;
            case 35676:
                return T;
            case 35678:
            case 36198:
                return M;
            case 35680:
                return A;
            case 5124:
            case 35670:
                return y;
            case 35667:
            case 35671:
                return P;
            case 35668:
            case 35672:
                return R;
            case 35669:
            case 35673:
                return L
        }
    }
    function I(t, e) {
        t.uniform1fv(this.addr, e)
    }
    function C(t, e) {
        t.uniform1iv(this.addr, e)
    }
    function D(t, e) {
        t.uniform2fv(this.addr, v(e, this.size, 2))
    }
    function N(t, e) {
        t.uniform3fv(this.addr, v(e, this.size, 3))
    }
    function U(t, e) {
        t.uniform4fv(this.addr, v(e, this.size, 4))
    }
    function B(t, e) {
        t.uniformMatrix2fv(this.addr, !1, v(e, this.size, 4))
    }
    function F(t, e) {
        t.uniformMatrix3fv(this.addr, !1, v(e, this.size, 9))
    }
    function z(t, e) {
        t.uniformMatrix4fv(this.addr, !1, v(e, this.size, 16))
    }
    function G(t, e, i) {
        var n = e.length
            , r = g(i, n);
        t.uniform1iv(this.addr, r);
        for (var o = 0; o !== n; ++o)
            i.setTexture2D(e[o] || lh, r[o])
    }
    function j(t, e, i) {
        var n = e.length
            , r = g(i, n);
        t.uniform1iv(this.addr, r);
        for (var o = 0; o !== n; ++o)
            i.setTextureCube(e[o] || ch, r[o])
    }
    function k(t) {
        switch (t) {
            case 5126:
                return I;
            case 35664:
                return D;
            case 35665:
                return N;
            case 35666:
                return U;
            case 35674:
                return B;
            case 35675:
                return F;
            case 35676:
                return z;
            case 35678:
                return G;
            case 35680:
                return j;
            case 5124:
            case 35670:
                return C;
            case 35667:
            case 35671:
                return P;
            case 35668:
            case 35672:
                return R;
            case 35669:
            case 35673:
                return L
        }
    }
    function H(t, e, i) {
        this.id = t,
            this.addr = i,
            this.setValue = O(e.type)
    }
    function V(t, e, i) {
        this.id = t,
            this.addr = i,
            this.size = e.size,
            this.setValue = k(e.type)
    }
    function W(t) {
        this.id = t,
            m.call(this)
    }
    function X(t, e) {
        t.seq.push(e),
            t.map[e.id] = e
    }
    function Y(t, e, i) {
        var n = t.name
            , r = n.length;
        for (mh.lastIndex = 0; ;) {
            var o = mh.exec(n)
                , a = mh.lastIndex
                , s = o[1]
                , h = "]" === o[2]
                , l = o[3];
            if (h && (s |= 0),
                void 0 === l || "[" === l && a + 2 === r) {
                X(i, void 0 === l ? new H(s, t, e) : new V(s, t, e));
                break
            }
            var c = i.map
                , u = c[s];
            void 0 === u && (u = new W(s),
                X(i, u)),
                i = u
        }
    }
    function q(t, e, i) {
        m.call(this),
            this.renderer = i;
        for (var n = t.getProgramParameter(e, t.ACTIVE_UNIFORMS), r = 0; r < n; ++r) {
            var o = t.getActiveUniform(e, r)
                , a = o.name;
            Y(o, t.getUniformLocation(e, a), this)
        }
    }
    function Z(t, e, i) {
        return void 0 === e && void 0 === i ? this.set(t) : this.setRGB(t, e, i)
    }
    function J(t, e) {
        this.min = void 0 !== t ? t : new r(1 / 0, 1 / 0),
            this.max = void 0 !== e ? e : new r(-1 / 0, -1 / 0)
    }
    function K(t, e, i, n, o) {
        function a() {
            var t = new Float32Array([-1, -1, 0, 0, 1, -1, 1, 0, 1, 1, 1, 1, -1, 1, 0, 1])
                , n = new Uint16Array([0, 1, 2, 0, 2, 3]);
            l = e.createBuffer(),
                c = e.createBuffer(),
                e.bindBuffer(e.ARRAY_BUFFER, l),
                e.bufferData(e.ARRAY_BUFFER, t, e.STATIC_DRAW),
                e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, c),
                e.bufferData(e.ELEMENT_ARRAY_BUFFER, n, e.STATIC_DRAW),
                m = e.createTexture(),
                v = e.createTexture(),
                i.bindTexture(e.TEXTURE_2D, m),
                e.texImage2D(e.TEXTURE_2D, 0, e.RGB, 16, 16, 0, e.RGB, e.UNSIGNED_BYTE, null),
                e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE),
                e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE),
                e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MAG_FILTER, e.NEAREST),
                e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MIN_FILTER, e.NEAREST),
                i.bindTexture(e.TEXTURE_2D, v),
                e.texImage2D(e.TEXTURE_2D, 0, e.RGBA, 16, 16, 0, e.RGBA, e.UNSIGNED_BYTE, null),
                e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE),
                e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE),
                e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MAG_FILTER, e.NEAREST),
                e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MIN_FILTER, e.NEAREST),
                u = {
                    vertexShader: ["uniform lowp int renderType;", "uniform vec3 screenPosition;", "uniform vec2 scale;", "uniform float rotation;", "uniform sampler2D occlusionMap;", "attribute vec2 position;", "attribute vec2 uv;", "varying vec2 vUV;", "varying float vVisibility;", "void main() {", "\tvUV = uv;", "\tvec2 pos = position;", "\tif ( renderType == 2 ) {", "\t\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );", "\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );", "\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );", "\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );", "\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );", "\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );", "\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );", "\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );", "\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );", "\t\tvVisibility =        visibility.r / 9.0;", "\t\tvVisibility *= 1.0 - visibility.g / 9.0;", "\t\tvVisibility *=       visibility.b / 9.0;", "\t\tvVisibility *= 1.0 - visibility.a / 9.0;", "\t\tpos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;", "\t\tpos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;", "\t}", "\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );", "}"].join("\n"),
                    fragmentShader: ["uniform lowp int renderType;", "uniform sampler2D map;", "uniform float opacity;", "uniform vec3 color;", "varying vec2 vUV;", "varying float vVisibility;", "void main() {", "\tif ( renderType == 0 ) {", "\t\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );", "\t} else if ( renderType == 1 ) {", "\t\tgl_FragColor = texture2D( map, vUV );", "\t} else {", "\t\tvec4 texture = texture2D( map, vUV );", "\t\ttexture.a *= opacity * vVisibility;", "\t\tgl_FragColor = texture;", "\t\tgl_FragColor.rgb *= color;", "\t}", "}"].join("\n")
                },
                d = h(u),
                p = {
                    vertex: e.getAttribLocation(d, "position"),
                    uv: e.getAttribLocation(d, "uv")
                },
                f = {
                    renderType: e.getUniformLocation(d, "renderType"),
                    map: e.getUniformLocation(d, "map"),
                    occlusionMap: e.getUniformLocation(d, "occlusionMap"),
                    opacity: e.getUniformLocation(d, "opacity"),
                    color: e.getUniformLocation(d, "color"),
                    scale: e.getUniformLocation(d, "scale"),
                    rotation: e.getUniformLocation(d, "rotation"),
                    screenPosition: e.getUniformLocation(d, "screenPosition")
                }
        }
        function h(t) {
            var i = e.createProgram()
                , n = e.createShader(e.FRAGMENT_SHADER)
                , r = e.createShader(e.VERTEX_SHADER)
                , a = "precision " + o.precision + " float;\n";
            return e.shaderSource(n, a + t.fragmentShader),
                e.shaderSource(r, a + t.vertexShader),
                e.compileShader(n),
                e.compileShader(r),
                e.attachShader(i, n),
                e.attachShader(i, r),
                e.linkProgram(i),
                i
        }
        var l, c, u, d, p, f, m, v;
        this.render = function (t, o, h, u) {
            if (0 !== t.length) {
                var g = new s
                    , _ = u.w / u.z
                    , y = .5 * u.z
                    , x = .5 * u.w
                    , b = 16 / u.w
                    , w = new r(b * _, b)
                    , S = new s(1, 1, 0)
                    , E = new r(1, 1)
                    , T = new J;
                T.min.set(u.x, u.y),
                    T.max.set(u.x + (u.z - 16), u.y + (u.w - 16)),
                    void 0 === d && a(),
                    i.useProgram(d),
                    i.initAttributes(),
                    i.enableAttribute(p.vertex),
                    i.enableAttribute(p.uv),
                    i.disableUnusedAttributes(),
                    e.uniform1i(f.occlusionMap, 0),
                    e.uniform1i(f.map, 1),
                    e.bindBuffer(e.ARRAY_BUFFER, l),
                    e.vertexAttribPointer(p.vertex, 2, e.FLOAT, !1, 16, 0),
                    e.vertexAttribPointer(p.uv, 2, e.FLOAT, !1, 16, 8),
                    e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, c),
                    i.disable(e.CULL_FACE),
                    i.buffers.depth.setMask(!1);
                for (var M = 0, A = t.length; M < A; M++) {
                    b = 16 / u.w,
                        w.set(b * _, b);
                    var P = t[M];
                    if (g.set(P.matrixWorld.elements[12], P.matrixWorld.elements[13], P.matrixWorld.elements[14]),
                        g.applyMatrix4(h.matrixWorldInverse),
                        g.applyMatrix4(h.projectionMatrix),
                        S.copy(g),
                        E.x = u.x + S.x * y + y - 8,
                        E.y = u.y + S.y * x + x - 8,
                        !0 === T.containsPoint(E)) {
                        i.activeTexture(e.TEXTURE0),
                            i.bindTexture(e.TEXTURE_2D, null),
                            i.activeTexture(e.TEXTURE1),
                            i.bindTexture(e.TEXTURE_2D, m),
                            e.copyTexImage2D(e.TEXTURE_2D, 0, e.RGB, E.x, E.y, 16, 16, 0),
                            e.uniform1i(f.renderType, 0),
                            e.uniform2f(f.scale, w.x, w.y),
                            e.uniform3f(f.screenPosition, S.x, S.y, S.z),
                            i.disable(e.BLEND),
                            i.enable(e.DEPTH_TEST),
                            e.drawElements(e.TRIANGLES, 6, e.UNSIGNED_SHORT, 0),
                            i.activeTexture(e.TEXTURE0),
                            i.bindTexture(e.TEXTURE_2D, v),
                            e.copyTexImage2D(e.TEXTURE_2D, 0, e.RGBA, E.x, E.y, 16, 16, 0),
                            e.uniform1i(f.renderType, 1),
                            i.disable(e.DEPTH_TEST),
                            i.activeTexture(e.TEXTURE1),
                            i.bindTexture(e.TEXTURE_2D, m),
                            e.drawElements(e.TRIANGLES, 6, e.UNSIGNED_SHORT, 0),
                            P.positionScreen.copy(S),
                            P.customUpdateCallback ? P.customUpdateCallback(P) : P.updateLensFlares(),
                            e.uniform1i(f.renderType, 2),
                            i.enable(e.BLEND);
                        for (var R = 0, L = P.lensFlares.length; R < L; R++) {
                            var O = P.lensFlares[R];
                            O.opacity > .001 && O.scale > .001 && (S.x = O.x,
                                S.y = O.y,
                                S.z = O.z,
                                b = O.size * O.scale / u.w,
                                w.x = b * _,
                                w.y = b,
                                e.uniform3f(f.screenPosition, S.x, S.y, S.z),
                                e.uniform2f(f.scale, w.x, w.y),
                                e.uniform1f(f.rotation, O.rotation),
                                e.uniform1f(f.opacity, O.opacity),
                                e.uniform3f(f.color, O.color.r, O.color.g, O.color.b),
                                i.setBlending(O.blending, O.blendEquation, O.blendSrc, O.blendDst),
                                n.setTexture2D(O.texture, 1),
                                e.drawElements(e.TRIANGLES, 6, e.UNSIGNED_SHORT, 0))
                        }
                    }
                }
                i.enable(e.CULL_FACE),
                    i.enable(e.DEPTH_TEST),
                    i.buffers.depth.setMask(!0),
                    i.reset()
            }
        }
    }
    function Q(t, e, i, n, r, o, a, s, h) {
        l.call(this, t, e, i, n, r, o, a, s, h),
            this.needsUpdate = !0
    }
    function $(t, e, i, n, r) {
        function o() {
            var t = new Float32Array([-.5, -.5, 0, 0, .5, -.5, 1, 0, .5, .5, 1, 1, -.5, .5, 0, 1])
                , i = new Uint16Array([0, 1, 2, 0, 2, 3]);
            c = e.createBuffer(),
                u = e.createBuffer(),
                e.bindBuffer(e.ARRAY_BUFFER, c),
                e.bufferData(e.ARRAY_BUFFER, t, e.STATIC_DRAW),
                e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, u),
                e.bufferData(e.ELEMENT_ARRAY_BUFFER, i, e.STATIC_DRAW),
                d = h(),
                p = {
                    position: e.getAttribLocation(d, "position"),
                    uv: e.getAttribLocation(d, "uv")
                },
                f = {
                    uvOffset: e.getUniformLocation(d, "uvOffset"),
                    uvScale: e.getUniformLocation(d, "uvScale"),
                    rotation: e.getUniformLocation(d, "rotation"),
                    scale: e.getUniformLocation(d, "scale"),
                    color: e.getUniformLocation(d, "color"),
                    map: e.getUniformLocation(d, "map"),
                    opacity: e.getUniformLocation(d, "opacity"),
                    modelViewMatrix: e.getUniformLocation(d, "modelViewMatrix"),
                    projectionMatrix: e.getUniformLocation(d, "projectionMatrix"),
                    fogType: e.getUniformLocation(d, "fogType"),
                    fogDensity: e.getUniformLocation(d, "fogDensity"),
                    fogNear: e.getUniformLocation(d, "fogNear"),
                    fogFar: e.getUniformLocation(d, "fogFar"),
                    fogColor: e.getUniformLocation(d, "fogColor"),
                    fogDepth: e.getUniformLocation(d, "fogDepth"),
                    alphaTest: e.getUniformLocation(d, "alphaTest")
                };
            var n = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
            n.width = 8,
                n.height = 8;
            var r = n.getContext("2d");
            r.fillStyle = "white",
                r.fillRect(0, 0, 8, 8),
                m = new Q(n)
        }
        function h() {
            var t = e.createProgram()
                , i = e.createShader(e.VERTEX_SHADER)
                , n = e.createShader(e.FRAGMENT_SHADER);
            return e.shaderSource(i, ["precision " + r.precision + " float;", "#define SHADER_NAME SpriteMaterial", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform float rotation;", "uniform vec2 scale;", "uniform vec2 uvOffset;", "uniform vec2 uvScale;", "attribute vec2 position;", "attribute vec2 uv;", "varying vec2 vUV;", "varying float fogDepth;", "void main() {", "\tvUV = uvOffset + uv * uvScale;", "\tvec2 alignedPosition = position * scale;", "\tvec2 rotatedPosition;", "\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;", "\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;", "\tvec4 mvPosition;", "\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );", "\tmvPosition.xy += rotatedPosition;", "\tgl_Position = projectionMatrix * mvPosition;", "\tfogDepth = - mvPosition.z;", "}"].join("\n")),
                e.shaderSource(n, ["precision " + r.precision + " float;", "#define SHADER_NAME SpriteMaterial", "uniform vec3 color;", "uniform sampler2D map;", "uniform float opacity;", "uniform int fogType;", "uniform vec3 fogColor;", "uniform float fogDensity;", "uniform float fogNear;", "uniform float fogFar;", "uniform float alphaTest;", "varying vec2 vUV;", "varying float fogDepth;", "void main() {", "\tvec4 texture = texture2D( map, vUV );", "\tgl_FragColor = vec4( color * texture.xyz, texture.a * opacity );", "\tif ( gl_FragColor.a < alphaTest ) discard;", "\tif ( fogType > 0 ) {", "\t\tfloat fogFactor = 0.0;", "\t\tif ( fogType == 1 ) {", "\t\t\tfogFactor = smoothstep( fogNear, fogFar, fogDepth );", "\t\t} else {", "\t\t\tconst float LOG2 = 1.442695;", "\t\t\tfogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );", "\t\t\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );", "\t\t}", "\t\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );", "\t}", "}"].join("\n")),
                e.compileShader(i),
                e.compileShader(n),
                e.attachShader(t, i),
                e.attachShader(t, n),
                e.linkProgram(t),
                t
        }
        function l(t, e) {
            return t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.z !== e.z ? e.z - t.z : e.id - t.id
        }
        var c, u, d, p, f, m, v = new s, g = new a, _ = new s;
        this.render = function (r, a, s) {
            if (0 !== r.length) {
                void 0 === d && o(),
                    i.useProgram(d),
                    i.initAttributes(),
                    i.enableAttribute(p.position),
                    i.enableAttribute(p.uv),
                    i.disableUnusedAttributes(),
                    i.disable(e.CULL_FACE),
                    i.enable(e.BLEND),
                    e.bindBuffer(e.ARRAY_BUFFER, c),
                    e.vertexAttribPointer(p.position, 2, e.FLOAT, !1, 16, 0),
                    e.vertexAttribPointer(p.uv, 2, e.FLOAT, !1, 16, 8),
                    e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, u),
                    e.uniformMatrix4fv(f.projectionMatrix, !1, s.projectionMatrix.elements),
                    i.activeTexture(e.TEXTURE0),
                    e.uniform1i(f.map, 0);
                var h = 0
                    , y = 0
                    , x = a.fog;
                x ? (e.uniform3f(f.fogColor, x.color.r, x.color.g, x.color.b),
                    x.isFog ? (e.uniform1f(f.fogNear, x.near),
                        e.uniform1f(f.fogFar, x.far),
                        e.uniform1i(f.fogType, 1),
                        h = 1,
                        y = 1) : x.isFogExp2 && (e.uniform1f(f.fogDensity, x.density),
                            e.uniform1i(f.fogType, 2),
                            h = 2,
                            y = 2)) : (e.uniform1i(f.fogType, 0),
                                h = 0,
                                y = 0);
                for (var b = 0, w = r.length; b < w; b++) {
                    var S = r[b];
                    S.modelViewMatrix.multiplyMatrices(s.matrixWorldInverse, S.matrixWorld),
                        S.z = -S.modelViewMatrix.elements[14]
                }
                r.sort(l);
                for (var E = [], b = 0, w = r.length; b < w; b++) {
                    var S = r[b]
                        , T = S.material;
                    if (!1 !== T.visible) {
                        S.onBeforeRender(t, a, s, void 0, T, void 0),
                            e.uniform1f(f.alphaTest, T.alphaTest),
                            e.uniformMatrix4fv(f.modelViewMatrix, !1, S.modelViewMatrix.elements),
                            S.matrixWorld.decompose(v, g, _),
                            E[0] = _.x,
                            E[1] = _.y;
                        var M = 0;
                        a.fog && T.fog && (M = y),
                            h !== M && (e.uniform1i(f.fogType, M),
                                h = M),
                            null !== T.map ? (e.uniform2f(f.uvOffset, T.map.offset.x, T.map.offset.y),
                                e.uniform2f(f.uvScale, T.map.repeat.x, T.map.repeat.y)) : (e.uniform2f(f.uvOffset, 0, 0),
                                    e.uniform2f(f.uvScale, 1, 1)),
                            e.uniform1f(f.opacity, T.opacity),
                            e.uniform3f(f.color, T.color.r, T.color.g, T.color.b),
                            e.uniform1f(f.rotation, T.rotation),
                            e.uniform2fv(f.scale, E),
                            i.setBlending(T.blending, T.blendEquation, T.blendSrc, T.blendDst, T.blendEquationAlpha, T.blendSrcAlpha, T.blendDstAlpha, T.premultipliedAlpha),
                            i.buffers.depth.setTest(T.depthTest),
                            i.buffers.depth.setMask(T.depthWrite),
                            i.buffers.color.setMask(T.colorWrite),
                            n.setTexture2D(T.map || m, 0),
                            e.drawElements(e.TRIANGLES, 6, e.UNSIGNED_SHORT, 0),
                            S.onAfterRender(t, a, s, void 0, T, void 0)
                    }
                }
                i.enable(e.CULL_FACE),
                    i.reset()
            }
        }
    }
    function tt() {
        Object.defineProperty(this, "id", {
            value: bh++
        }),
            this.uuid = sh.generateUUID(),
            this.name = "",
            this.type = "Material",
            this.fog = !0,
            this.lights = !0,
            this.blending = ca,
            this.side = ea,
            this.flatShading = !1,
            this.vertexColors = aa,
            this.opacity = 1,
            this.transparent = !1,
            this.blendSrc = Ea,
            this.blendDst = Ta,
            this.blendEquation = ma,
            this.blendSrcAlpha = null,
            this.blendDstAlpha = null,
            this.blendEquationAlpha = null,
            this.depthFunc = Da,
            this.depthTest = !0,
            this.depthWrite = !0,
            this.clippingPlanes = null,
            this.clipIntersection = !1,
            this.clipShadows = !1,
            this.colorWrite = !0,
            this.precision = null,
            this.polygonOffset = !1,
            this.polygonOffsetFactor = 0,
            this.polygonOffsetUnits = 0,
            this.dithering = !1,
            this.alphaTest = 0,
            this.premultipliedAlpha = !1,
            this.overdraw = 0,
            this.visible = !0,
            this.userData = {},
            this.needsUpdate = !0
    }
    function et(t) {
        tt.call(this),
            this.type = "MeshDepthMaterial",
            this.depthPacking = oh,
            this.skinning = !1,
            this.morphTargets = !1,
            this.map = null,
            this.alphaMap = null,
            this.displacementMap = null,
            this.displacementScale = 1,
            this.displacementBias = 0,
            this.wireframe = !1,
            this.wireframeLinewidth = 1,
            this.fog = !1,
            this.lights = !1,
            this.setValues(t)
    }
    function it(t) {
        tt.call(this),
            this.type = "MeshDistanceMaterial",
            this.referencePosition = new s,
            this.nearDistance = 1,
            this.farDistance = 1e3,
            this.skinning = !1,
            this.morphTargets = !1,
            this.map = null,
            this.alphaMap = null,
            this.displacementMap = null,
            this.displacementScale = 1,
            this.displacementBias = 0,
            this.fog = !1,
            this.lights = !1,
            this.setValues(t)
    }
    function nt(t, e) {
        this.min = void 0 !== t ? t : new s(1 / 0, 1 / 0, 1 / 0),
            this.max = void 0 !== e ? e : new s(-1 / 0, -1 / 0, -1 / 0)
    }
    function rt(t, e) {
        this.center = void 0 !== t ? t : new s,
            this.radius = void 0 !== e ? e : 0
    }
    function ot(t, e) {
        this.normal = void 0 !== t ? t : new s(1, 0, 0),
            this.constant = void 0 !== e ? e : 0
    }
    function at(t, e, i, n, r, o) {
        this.planes = [void 0 !== t ? t : new ot, void 0 !== e ? e : new ot, void 0 !== i ? i : new ot, void 0 !== n ? n : new ot, void 0 !== r ? r : new ot, void 0 !== o ? o : new ot]
    }
    function st(t, e, i) {
        function n(e, i, n, r, o, a) {
            var s = e.geometry
                , h = null
                , l = y
                , c = e.customDepthMaterial;
            if (n && (l = x,
                c = e.customDistanceMaterial),
                c)
                h = c;
            else {
                var u = !1;
                i.morphTargets && (s && s.isBufferGeometry ? u = s.morphAttributes && s.morphAttributes.position && s.morphAttributes.position.length > 0 : s && s.isGeometry && (u = s.morphTargets && s.morphTargets.length > 0)),
                    e.isSkinnedMesh && !1 === i.skinning && console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", e);
                var d = e.isSkinnedMesh && i.skinning
                    , p = 0;
                u && (p |= v),
                    d && (p |= g),
                    h = l[p]
            }
            if (t.localClippingEnabled && !0 === i.clipShadows && 0 !== i.clippingPlanes.length) {
                var f = h.uuid
                    , m = i.uuid
                    , _ = b[f];
                void 0 === _ && (_ = {},
                    b[f] = _);
                var w = _[m];
                void 0 === w && (w = h.clone(),
                    _[m] = w),
                    h = w
            }
            h.visible = i.visible,
                h.wireframe = i.wireframe;
            var S = i.side;
            return L.renderSingleSided && S == na && (S = ea),
                L.renderReverseSided && (S === ea ? S = ia : S === ia && (S = ea)),
                h.side = S,
                h.clipShadows = i.clipShadows,
                h.clippingPlanes = i.clippingPlanes,
                h.clipIntersection = i.clipIntersection,
                h.wireframeLinewidth = i.wireframeLinewidth,
                h.linewidth = i.linewidth,
                n && h.isMeshDistanceMaterial && (h.referencePosition.copy(r),
                    h.nearDistance = o,
                    h.farDistance = a),
                h
        }
        function a(i, r, o, s) {
            if (!1 !== i.visible) {
                if (i.layers.test(r.layers) && (i.isMesh || i.isLine || i.isPoints) && i.castShadow && (!i.frustumCulled || h.intersectsObject(i))) {
                    i.modelViewMatrix.multiplyMatrices(o.matrixWorldInverse, i.matrixWorld);
                    var l = e.update(i)
                        , c = i.material;
                    if (Array.isArray(c))
                        for (var u = l.groups, d = 0, p = u.length; d < p; d++) {
                            var f = u[d]
                                , v = c[f.materialIndex];
                            if (v && v.visible) {
                                var g = n(i, v, s, m, o.near, o.far);
                                t.renderBufferDirect(o, null, l, g, i, f)
                            }
                        }
                    else if (c.visible) {
                        var g = n(i, c, s, m, o.near, o.far);
                        t.renderBufferDirect(o, null, l, g, i, null)
                    }
                }
                for (var _ = i.children, y = 0, x = _.length; y < x; y++)
                    a(_[y], r, o, s)
            }
        }
        for (var h = new at, l = new o, d = new r, p = new r(i, i), f = new s, m = new s, v = 1, g = 2, _ = 1 + (v | g), y = new Array(_), x = new Array(_), b = {}, w = [new s(1, 0, 0), new s(-1, 0, 0), new s(0, 0, 1), new s(0, 0, -1), new s(0, 1, 0), new s(0, -1, 0)], S = [new s(0, 1, 0), new s(0, 1, 0), new s(0, 1, 0), new s(0, 1, 0), new s(0, 0, 1), new s(0, 0, -1)], E = [new c, new c, new c, new c, new c, new c], T = 0; T !== _; ++T) {
            var M = 0 != (T & v)
                , A = 0 != (T & g)
                , P = new et({
                    depthPacking: ah,
                    morphTargets: M,
                    skinning: A
                });
            y[T] = P;
            var R = new it({
                morphTargets: M,
                skinning: A
            });
            x[T] = R
        }
        var L = this;
        this.enabled = !1,
            this.autoUpdate = !0,
            this.needsUpdate = !1,
            this.type = $o,
            this.renderReverseSided = !0,
            this.renderSingleSided = !0,
            this.render = function (e, i, n) {
                if (!1 !== L.enabled && (!1 !== L.autoUpdate || !1 !== L.needsUpdate) && 0 !== e.length) {
                    var r = t.context
                        , o = t.state;
                    o.disable(r.BLEND),
                        o.buffers.color.setClear(1, 1, 1, 1),
                        o.buffers.depth.setTest(!0),
                        o.setScissorTest(!1);
                    for (var s, c = 0, v = e.length; c < v; c++) {
                        var g = e[c]
                            , _ = g.shadow
                            , y = g && g.isPointLight;
                        if (void 0 !== _) {
                            var x = _.camera;
                            if (d.copy(_.mapSize),
                                d.min(p),
                                y) {
                                var b = d.x
                                    , T = d.y;
                                E[0].set(2 * b, T, b, T),
                                    E[1].set(0, T, b, T),
                                    E[2].set(3 * b, T, b, T),
                                    E[3].set(b, T, b, T),
                                    E[4].set(3 * b, 0, b, T),
                                    E[5].set(b, 0, b, T),
                                    d.x *= 4,
                                    d.y *= 2
                            }
                            if (null === _.map) {
                                var M = {
                                    minFilter: rs,
                                    magFilter: rs,
                                    format: Es
                                };
                                _.map = new u(d.x, d.y, M),
                                    _.map.texture.name = g.name + ".shadowMap",
                                    x.updateProjectionMatrix()
                            }
                            _.isSpotLightShadow && _.update(g);
                            var A = _.map
                                , P = _.matrix;
                            m.setFromMatrixPosition(g.matrixWorld),
                                x.position.copy(m),
                                y ? (s = 6,
                                    P.makeTranslation(-m.x, -m.y, -m.z)) : (s = 1,
                                        f.setFromMatrixPosition(g.target.matrixWorld),
                                        x.lookAt(f),
                                        x.updateMatrixWorld(),
                                        P.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1),
                                        P.multiply(x.projectionMatrix),
                                        P.multiply(x.matrixWorldInverse)),
                                t.setRenderTarget(A),
                                t.clear();
                            for (var R = 0; R < s; R++) {
                                if (y) {
                                    f.copy(x.position),
                                        f.add(w[R]),
                                        x.up.copy(S[R]),
                                        x.lookAt(f),
                                        x.updateMatrixWorld();
                                    var O = E[R];
                                    o.viewport(O)
                                }
                                l.multiplyMatrices(x.projectionMatrix, x.matrixWorldInverse),
                                    h.setFromMatrix(l),
                                    a(i, n, x, y)
                            }
                        } else
                            console.warn("THREE.WebGLShadowMap:", g, "has no shadow.")
                    }
                    L.needsUpdate = !1
                }
            }
    }
    function ht(t) {
        function e(e, i) {
            var n = e.array
                , r = e.dynamic ? t.DYNAMIC_DRAW : t.STATIC_DRAW
                , o = t.createBuffer();
            t.bindBuffer(i, o),
                t.bufferData(i, n, r),
                e.onUploadCallback();
            var a = t.FLOAT;
            return n instanceof Float32Array ? a = t.FLOAT : n instanceof Float64Array ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.") : n instanceof Uint16Array ? a = t.UNSIGNED_SHORT : n instanceof Int16Array ? a = t.SHORT : n instanceof Uint32Array ? a = t.UNSIGNED_INT : n instanceof Int32Array ? a = t.INT : n instanceof Int8Array ? a = t.BYTE : n instanceof Uint8Array && (a = t.UNSIGNED_BYTE),
            {
                buffer: o,
                type: a,
                bytesPerElement: n.BYTES_PER_ELEMENT,
                version: e.version
            }
        }
        function i(e, i, n) {
            var r = i.array
                , o = i.updateRange;
            t.bindBuffer(n, e),
                !1 === i.dynamic ? t.bufferData(n, r, t.STATIC_DRAW) : -1 === o.count ? t.bufferSubData(n, 0, r) : 0 === o.count ? console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.") : (t.bufferSubData(n, o.offset * r.BYTES_PER_ELEMENT, r.subarray(o.offset, o.offset + o.count)),
                    o.count = -1)
        }
        function n(t) {
            return t.isInterleavedBufferAttribute && (t = t.data),
                a[t.uuid]
        }
        function r(e) {
            e.isInterleavedBufferAttribute && (e = e.data);
            var i = a[e.uuid];
            i && (t.deleteBuffer(i.buffer),
                delete a[e.uuid])
        }
        function o(t, n) {
            t.isInterleavedBufferAttribute && (t = t.data);
            var r = a[t.uuid];
            void 0 === r ? a[t.uuid] = e(t, n) : r.version < t.version && (i(r.buffer, t, n),
                r.version = t.version)
        }
        var a = {};
        return {
            get: n,
            remove: r,
            update: o
        }
    }
    function lt(t, e, i, n) {
        this._x = t || 0,
            this._y = e || 0,
            this._z = i || 0,
            this._order = n || lt.DefaultOrder
    }
    function ct() {
        this.mask = 1
    }
    function ut() {
        function t() {
            r.setFromEuler(n, !1)
        }
        function e() {
            n.setFromQuaternion(r, void 0, !1)
        }
        Object.defineProperty(this, "id", {
            value: wh++
        }),
            this.uuid = sh.generateUUID(),
            this.name = "",
            this.type = "Object3D",
            this.parent = null,
            this.children = [],
            this.up = ut.DefaultUp.clone();
        var i = new s
            , n = new lt
            , r = new a
            , l = new s(1, 1, 1);
        n.onChange(t),
            r.onChange(e),
            Object.defineProperties(this, {
                position: {
                    enumerable: !0,
                    value: i
                },
                rotation: {
                    enumerable: !0,
                    value: n
                },
                quaternion: {
                    enumerable: !0,
                    value: r
                },
                scale: {
                    enumerable: !0,
                    value: l
                },
                modelViewMatrix: {
                    value: new o
                },
                normalMatrix: {
                    value: new h
                }
            }),
            this.matrix = new o,
            this.matrixWorld = new o,
            this.matrixAutoUpdate = ut.DefaultMatrixAutoUpdate,
            this.matrixWorldNeedsUpdate = !1,
            this.layers = new ct,
            this.visible = !0,
            this.castShadow = !1,
            this.receiveShadow = !1,
            this.frustumCulled = !0,
            this.renderOrder = 0,
            this.userData = {}
    }
    function dt() {
        ut.call(this),
            this.type = "Camera",
            this.matrixWorldInverse = new o,
            this.projectionMatrix = new o
    }
    function pt(t, e, i, n, r, o) {
        dt.call(this),
            this.type = "OrthographicCamera",
            this.zoom = 1,
            this.view = null,
            this.left = t,
            this.right = e,
            this.top = i,
            this.bottom = n,
            this.near = void 0 !== r ? r : .1,
            this.far = void 0 !== o ? o : 2e3,
            this.updateProjectionMatrix()
    }
    function ft(t, e, i, n, r, o) {
        this.a = t,
            this.b = e,
            this.c = i,
            this.normal = n && n.isVector3 ? n : new s,
            this.vertexNormals = Array.isArray(n) ? n : [],
            this.color = r && r.isColor ? r : new Z,
            this.vertexColors = Array.isArray(r) ? r : [],
            this.materialIndex = void 0 !== o ? o : 0
    }
    function mt() {
        Object.defineProperty(this, "id", {
            value: Sh += 2
        }),
            this.uuid = sh.generateUUID(),
            this.name = "",
            this.type = "Geometry",
            this.vertices = [],
            this.colors = [],
            this.faces = [],
            this.faceVertexUvs = [[]],
            this.morphTargets = [],
            this.morphNormals = [],
            this.skinWeights = [],
            this.skinIndices = [],
            this.lineDistances = [],
            this.boundingBox = null,
            this.boundingSphere = null,
            this.elementsNeedUpdate = !1,
            this.verticesNeedUpdate = !1,
            this.uvsNeedUpdate = !1,
            this.normalsNeedUpdate = !1,
            this.colorsNeedUpdate = !1,
            this.lineDistancesNeedUpdate = !1,
            this.groupsNeedUpdate = !1
    }
    function vt(t, e, i) {
        if (Array.isArray(t))
            throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
        this.uuid = sh.generateUUID(),
            this.name = "",
            this.array = t,
            this.itemSize = e,
            this.count = void 0 !== t ? t.length / e : 0,
            this.normalized = !0 === i,
            this.dynamic = !1,
            this.updateRange = {
                offset: 0,
                count: -1
            },
            this.onUploadCallback = function () { }
            ,
            this.version = 0
    }
    function gt(t, e, i) {
        vt.call(this, new Int8Array(t), e, i)
    }
    function _t(t, e, i) {
        vt.call(this, new Uint8Array(t), e, i)
    }
    function yt(t, e, i) {
        vt.call(this, new Uint8ClampedArray(t), e, i)
    }
    function xt(t, e, i) {
        vt.call(this, new Int16Array(t), e, i)
    }
    function bt(t, e, i) {
        vt.call(this, new Uint16Array(t), e, i)
    }
    function wt(t, e, i) {
        vt.call(this, new Int32Array(t), e, i)
    }
    function St(t, e, i) {
        vt.call(this, new Uint32Array(t), e, i)
    }
    function Et(t, e, i) {
        vt.call(this, new Float32Array(t), e, i)
    }
    function Tt(t, e, i) {
        vt.call(this, new Float64Array(t), e, i)
    }
    function Mt() {
        this.indices = [],
            this.vertices = [],
            this.normals = [],
            this.colors = [],
            this.uvs = [],
            this.uvs2 = [],
            this.groups = [],
            this.morphTargets = {},
            this.skinWeights = [],
            this.skinIndices = [],
            this.boundingBox = null,
            this.boundingSphere = null,
            this.verticesNeedUpdate = !1,
            this.normalsNeedUpdate = !1,
            this.colorsNeedUpdate = !1,
            this.uvsNeedUpdate = !1,
            this.groupsNeedUpdate = !1
    }
    function At(t) {
        if (0 === t.length)
            return -1 / 0;
        for (var e = t[0], i = 1, n = t.length; i < n; ++i)
            t[i] > e && (e = t[i]);
        return e
    }
    function Pt() {
        Object.defineProperty(this, "id", {
            value: Eh += 2
        }),
            this.uuid = sh.generateUUID(),
            this.name = "",
            this.type = "BufferGeometry",
            this.index = null,
            this.attributes = {},
            this.morphAttributes = {},
            this.groups = [],
            this.boundingBox = null,
            this.boundingSphere = null,
            this.drawRange = {
                start: 0,
                count: 1 / 0
            }
    }
    function Rt(t, e, i, n, r, o) {
        mt.call(this),
            this.type = "BoxGeometry",
            this.parameters = {
                width: t,
                height: e,
                depth: i,
                widthSegments: n,
                heightSegments: r,
                depthSegments: o
            },
            this.fromBufferGeometry(new Lt(t, e, i, n, r, o)),
            this.mergeVertices()
    }
    function Lt(t, e, i, n, r, o) {
        function a(t, e, i, n, r, o, a, m, v, g, _) {
            var y, x, b = o / v, w = a / g, S = o / 2, E = a / 2, T = m / 2, M = v + 1, A = g + 1, P = 0, R = 0, L = new s;
            for (x = 0; x < A; x++) {
                var O = x * w - E;
                for (y = 0; y < M; y++) {
                    var I = y * b - S;
                    L[t] = I * n,
                        L[e] = O * r,
                        L[i] = T,
                        c.push(L.x, L.y, L.z),
                        L[t] = 0,
                        L[e] = 0,
                        L[i] = m > 0 ? 1 : -1,
                        u.push(L.x, L.y, L.z),
                        d.push(y / v),
                        d.push(1 - x / g),
                        P += 1
                }
            }
            for (x = 0; x < g; x++)
                for (y = 0; y < v; y++) {
                    var C = p + y + M * x
                        , D = p + y + M * (x + 1)
                        , N = p + (y + 1) + M * (x + 1)
                        , U = p + (y + 1) + M * x;
                    l.push(C, D, U),
                        l.push(D, N, U),
                        R += 6
                }
            h.addGroup(f, R, _),
                f += R,
                p += P
        }
        Pt.call(this),
            this.type = "BoxBufferGeometry",
            this.parameters = {
                width: t,
                height: e,
                depth: i,
                widthSegments: n,
                heightSegments: r,
                depthSegments: o
            };
        var h = this;
        t = t || 1,
            e = e || 1,
            i = i || 1,
            n = Math.floor(n) || 1,
            r = Math.floor(r) || 1,
            o = Math.floor(o) || 1;
        var l = []
            , c = []
            , u = []
            , d = []
            , p = 0
            , f = 0;
        a("z", "y", "x", -1, -1, i, e, t, o, r, 0),
            a("z", "y", "x", 1, -1, i, e, -t, o, r, 1),
            a("x", "z", "y", 1, 1, t, i, e, n, o, 2),
            a("x", "z", "y", 1, -1, t, i, -e, n, o, 3),
            a("x", "y", "z", 1, -1, t, e, i, n, r, 4),
            a("x", "y", "z", -1, -1, t, e, -i, n, r, 5),
            this.setIndex(l),
            this.addAttribute("position", new Et(c, 3)),
            this.addAttribute("normal", new Et(u, 3)),
            this.addAttribute("uv", new Et(d, 2))
    }
    function Ot(t, e, i, n) {
        mt.call(this),
            this.type = "PlaneGeometry",
            this.parameters = {
                width: t,
                height: e,
                widthSegments: i,
                heightSegments: n
            },
            this.fromBufferGeometry(new It(t, e, i, n)),
            this.mergeVertices()
    }
    function It(t, e, i, n) {
        Pt.call(this),
            this.type = "PlaneBufferGeometry",
            this.parameters = {
                width: t,
                height: e,
                widthSegments: i,
                heightSegments: n
            },
            t = t || 1,
            e = e || 1;
        var r, o, a = t / 2, s = e / 2, h = Math.floor(i) || 1, l = Math.floor(n) || 1, c = h + 1, u = l + 1, d = t / h, p = e / l, f = [], m = [], v = [], g = [];
        for (o = 0; o < u; o++) {
            var _ = o * p - s;
            for (r = 0; r < c; r++) {
                var y = r * d - a;
                m.push(y, -_, 0),
                    v.push(0, 0, 1),
                    g.push(r / h),
                    g.push(1 - o / l)
            }
        }
        for (o = 0; o < l; o++)
            for (r = 0; r < h; r++) {
                var x = r + c * o
                    , b = r + c * (o + 1)
                    , w = r + 1 + c * (o + 1)
                    , S = r + 1 + c * o;
                f.push(x, b, S),
                    f.push(b, w, S)
            }
        this.setIndex(f),
            this.addAttribute("position", new Et(m, 3)),
            this.addAttribute("normal", new Et(v, 3)),
            this.addAttribute("uv", new Et(g, 2))
    }
    function Ct(t) {
        tt.call(this),
            this.type = "MeshBasicMaterial",
            this.color = new Z(16777215),
            this.map = null,
            this.lightMap = null,
            this.lightMapIntensity = 1,
            this.aoMap = null,
            this.aoMapIntensity = 1,
            this.specularMap = null,
            this.alphaMap = null,
            this.envMap = null,
            this.combine = za,
            this.reflectivity = 1,
            this.refractionRatio = .98,
            this.wireframe = !1,
            this.wireframeLinewidth = 1,
            this.wireframeLinecap = "round",
            this.wireframeLinejoin = "round",
            this.skinning = !1,
            this.morphTargets = !1,
            this.lights = !1,
            this.setValues(t)
    }
    function Dt(t) {
        tt.call(this),
            this.type = "ShaderMaterial",
            this.defines = {},
            this.uniforms = {},
            this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
            this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",
            this.linewidth = 1,
            this.wireframe = !1,
            this.wireframeLinewidth = 1,
            this.fog = !1,
            this.lights = !1,
            this.clipping = !1,
            this.skinning = !1,
            this.morphTargets = !1,
            this.morphNormals = !1,
            this.extensions = {
                derivatives: !1,
                fragDepth: !1,
                drawBuffers: !1,
                shaderTextureLOD: !1
            },
            this.defaultAttributeValues = {
                color: [1, 1, 1],
                uv: [0, 0],
                uv2: [0, 0]
            },
            this.index0AttributeName = void 0,
            void 0 !== t && (void 0 !== t.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),
                this.setValues(t))
    }
    function Nt(t, e) {
        this.origin = void 0 !== t ? t : new s,
            this.direction = void 0 !== e ? e : new s
    }
    function Ut(t, e) {
        this.start = void 0 !== t ? t : new s,
            this.end = void 0 !== e ? e : new s
    }
    function Bt(t, e, i) {
        this.a = void 0 !== t ? t : new s,
            this.b = void 0 !== e ? e : new s,
            this.c = void 0 !== i ? i : new s
    }
    function Ft(t, e) {
        ut.call(this),
            this.type = "Mesh",
            this.geometry = void 0 !== t ? t : new Pt,
            this.material = void 0 !== e ? e : new Ct({
                color: 16777215 * Math.random()
            }),
            this.drawMode = qs,
            this.updateMorphTargets()
    }
    function zt(t, e, i, n) {
        function r(e, n, r, u) {
            var d = n.background;
            null === d ? o(l, c) : d && d.isColor && (o(d, 1),
                u = !0),
                (t.autoClear || u) && t.clear(t.autoClearColor, t.autoClearDepth, t.autoClearStencil),
                d && d.isCubeTexture ? (void 0 === h && (h = new Ft(new Lt(1, 1, 1), new Dt({
                    uniforms: xh.cube.uniforms,
                    vertexShader: xh.cube.vertexShader,
                    fragmentShader: xh.cube.fragmentShader,
                    side: ia,
                    depthTest: !0,
                    depthWrite: !1,
                    fog: !1
                })),
                    h.geometry.removeAttribute("normal"),
                    h.geometry.removeAttribute("uv"),
                    h.onBeforeRender = function (t, e, i) {
                        this.matrixWorld.copyPosition(i.matrixWorld)
                    }
                    ,
                    i.update(h.geometry)),
                    h.material.uniforms.tCube.value = d,
                    e.push(h, h.geometry, h.material, 0, null)) : d && d.isTexture && (void 0 === a && (a = new pt(-1, 1, 1, -1, 0, 1),
                        s = new Ft(new It(2, 2), new Ct({
                            depthTest: !1,
                            depthWrite: !1,
                            fog: !1
                        })),
                        i.update(s.geometry)),
                        s.material.map = d,
                        t.renderBufferDirect(a, null, s.geometry, s.material, s, null))
        }
        function o(t, i) {
            e.buffers.color.setClear(t.r, t.g, t.b, i, n)
        }
        var a, s, h, l = new Z(0), c = 0;
        return {
            getClearColor: function () {
                return l
            },
            setClearColor: function (t, e) {
                l.set(t),
                    c = void 0 !== e ? e : 1,
                    o(l, c)
            },
            getClearAlpha: function () {
                return c
            },
            setClearAlpha: function (t) {
                c = t,
                    o(l, c)
            },
            render: r
        }
    }
    function Gt(t, e) {
        return t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.program && e.program && t.program !== e.program ? t.program.id - e.program.id : t.material.id !== e.material.id ? t.material.id - e.material.id : t.z !== e.z ? t.z - e.z : t.id - e.id
    }
    function jt(t, e) {
        return t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.z !== e.z ? e.z - t.z : t.id - e.id
    }
    function kt() {
        function t() {
            r = 0,
                o.length = 0,
                a.length = 0
        }
        function e(t, e, i, s, h) {
            var l = n[r];
            void 0 === l ? (l = {
                id: t.id,
                object: t,
                geometry: e,
                material: i,
                program: i.program,
                renderOrder: t.renderOrder,
                z: s,
                group: h
            },
                n[r] = l) : (l.id = t.id,
                    l.object = t,
                    l.geometry = e,
                    l.material = i,
                    l.program = i.program,
                    l.renderOrder = t.renderOrder,
                    l.z = s,
                    l.group = h),
                (!0 === i.transparent ? a : o).push(l),
                r++
        }
        function i() {
            o.length > 1 && o.sort(Gt),
                a.length > 1 && a.sort(jt)
        }
        var n = []
            , r = 0
            , o = []
            , a = [];
        return {
            opaque: o,
            transparent: a,
            init: t,
            push: e,
            sort: i
        }
    }
    function Ht() {
        function t(t, e) {
            var n = t.id + "," + e.id
                , r = i[n];
            return void 0 === r && (r = new kt,
                i[n] = r),
                r
        }
        function e() {
            i = {}
        }
        var i = {};
        return {
            get: t,
            dispose: e
        }
    }
    function Vt(t, e) {
        return Math.abs(e[1]) - Math.abs(t[1])
    }
    function Wt(t) {
        function e(e, r, o, a) {
            var s = e.morphTargetInfluences
                , h = s.length
                , l = i[r.id];
            if (void 0 === l) {
                l = [];
                for (var c = 0; c < h; c++)
                    l[c] = [c, 0];
                i[r.id] = l
            }
            for (var u = o.morphTargets && r.morphAttributes.position, d = o.morphNormals && r.morphAttributes.normal, c = 0; c < h; c++) {
                var p = l[c];
                0 !== p[1] && (u && r.removeAttribute("morphTarget" + c),
                    d && r.removeAttribute("morphNormal" + c))
            }
            for (var c = 0; c < h; c++) {
                var p = l[c];
                p[0] = c,
                    p[1] = s[c]
            }
            l.sort(Vt);
            for (var c = 0; c < 8; c++) {
                var p = l[c];
                if (p) {
                    var f = p[0]
                        , m = p[1];
                    if (m) {
                        u && r.addAttribute("morphTarget" + c, u[f]),
                            d && r.addAttribute("morphNormal" + c, d[f]),
                            n[c] = m;
                        continue
                    }
                }
                n[c] = 0
            }
            a.getUniforms().setValue(t, "morphTargetInfluences", n)
        }
        var i = {}
            , n = new Float32Array(8);
        return {
            update: e
        }
    }
    function Xt(t, e, i) {
        function n(t) {
            s = t
        }
        function r(t) {
            h = t.type,
                l = t.bytesPerElement
        }
        function o(e, n) {
            t.drawElements(s, n, h, e * l),
                i.calls++,
                i.vertices += n,
                s === t.TRIANGLES ? i.faces += n / 3 : s === t.POINTS && (i.points += n)
        }
        function a(n, r, o) {
            var a = e.get("ANGLE_instanced_arrays");
            if (null === a)
                return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            a.drawElementsInstancedANGLE(s, o, h, r * l, n.maxInstancedCount),
                i.calls++,
                i.vertices += o * n.maxInstancedCount,
                s === t.TRIANGLES ? i.faces += n.maxInstancedCount * o / 3 : s === t.POINTS && (i.points += n.maxInstancedCount * o)
        }
        var s, h, l;
        this.setMode = n,
            this.setIndex = r,
            this.render = o,
            this.renderInstances = a
    }
    function Yt(t, e, i) {
        function n(t) {
            a = t
        }
        function r(e, n) {
            t.drawArrays(a, e, n),
                i.calls++,
                i.vertices += n,
                a === t.TRIANGLES ? i.faces += n / 3 : a === t.POINTS && (i.points += n)
        }
        function o(n, r, o) {
            var s = e.get("ANGLE_instanced_arrays");
            if (null === s)
                return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            var h = n.attributes.position;
            h.isInterleavedBufferAttribute ? (o = h.data.count,
                s.drawArraysInstancedANGLE(a, 0, o, n.maxInstancedCount)) : s.drawArraysInstancedANGLE(a, r, o, n.maxInstancedCount),
                i.calls++,
                i.vertices += o * n.maxInstancedCount,
                a === t.TRIANGLES ? i.faces += n.maxInstancedCount * o / 3 : a === t.POINTS && (i.points += n.maxInstancedCount * o)
        }
        var a;
        this.setMode = n,
            this.render = r,
            this.renderInstances = o
    }
    function qt(t, e, i) {
        function n(t) {
            var r = t.target
                , o = s[r.id];
            null !== o.index && e.remove(o.index);
            for (var a in o.attributes)
                e.remove(o.attributes[a]);
            r.removeEventListener("dispose", n),
                delete s[r.id];
            var l = h[r.id];
            l && (e.remove(l),
                delete h[r.id]),
                l = h[o.id],
                l && (e.remove(l),
                    delete h[o.id]),
                i.geometries--
        }
        function r(t, e) {
            var r = s[e.id];
            return r || (e.addEventListener("dispose", n),
                e.isBufferGeometry ? r = e : e.isGeometry && (void 0 === e._bufferGeometry && (e._bufferGeometry = (new Pt).setFromObject(t)),
                    r = e._bufferGeometry),
                s[e.id] = r,
                i.geometries++,
                r)
        }
        function o(i) {
            var n = i.index
                , r = i.attributes;
            null !== n && e.update(n, t.ELEMENT_ARRAY_BUFFER);
            for (var o in r)
                e.update(r[o], t.ARRAY_BUFFER);
            var a = i.morphAttributes;
            for (var o in a)
                for (var s = a[o], h = 0, l = s.length; h < l; h++)
                    e.update(s[h], t.ARRAY_BUFFER)
        }
        function a(i) {
            var n = h[i.id];
            if (n)
                return n;
            var r = []
                , o = i.index
                , a = i.attributes;
            if (null !== o)
                for (var s = o.array, l = 0, c = s.length; l < c; l += 3) {
                    var u = s[l + 0]
                        , d = s[l + 1]
                        , p = s[l + 2];
                    r.push(u, d, d, p, p, u)
                }
            else
                for (var s = a.position.array, l = 0, c = s.length / 3 - 1; l < c; l += 3) {
                    var u = l + 0
                        , d = l + 1
                        , p = l + 2;
                    r.push(u, d, d, p, p, u)
                }
            return n = new (At(r) > 65535 ? St : bt)(r, 1),
                e.update(n, t.ELEMENT_ARRAY_BUFFER),
                h[i.id] = n,
                n
        }
        var s = {}
            , h = {};
        return {
            get: r,
            update: o,
            getWireframeAttribute: a
        }
    }
    function Zt() {
        var t = {};
        return {
            get: function (e) {
                if (void 0 !== t[e.id])
                    return t[e.id];
                var i;
                switch (e.type) {
                    case "DirectionalLight":
                        i = {
                            direction: new s,
                            color: new Z,
                            shadow: !1,
                            shadowBias: 0,
                            shadowRadius: 1,
                            shadowMapSize: new r
                        };
                        break;
                    case "SpotLight":
                        i = {
                            position: new s,
                            direction: new s,
                            color: new Z,
                            distance: 0,
                            coneCos: 0,
                            penumbraCos: 0,
                            decay: 0,
                            shadow: !1,
                            shadowBias: 0,
                            shadowRadius: 1,
                            shadowMapSize: new r
                        };
                        break;
                    case "PointLight":
                        i = {
                            position: new s,
                            color: new Z,
                            distance: 0,
                            decay: 0,
                            shadow: !1,
                            shadowBias: 0,
                            shadowRadius: 1,
                            shadowMapSize: new r,
                            shadowCameraNear: 1,
                            shadowCameraFar: 1e3
                        };
                        break;
                    case "HemisphereLight":
                        i = {
                            direction: new s,
                            skyColor: new Z,
                            groundColor: new Z
                        };
                        break;
                    case "RectAreaLight":
                        i = {
                            color: new Z,
                            position: new s,
                            halfWidth: new s,
                            halfHeight: new s
                        }
                }
                return t[e.id] = i,
                    i
            }
        }
    }
    function Jt() {
        function t(t, o, s) {
            for (var h = 0, l = 0, c = 0, u = 0, d = 0, p = 0, f = 0, m = 0, v = s.matrixWorldInverse, g = 0, _ = t.length; g < _; g++) {
                var y = t[g]
                    , x = y.color
                    , b = y.intensity
                    , w = y.distance
                    , S = y.shadow && y.shadow.map ? y.shadow.map.texture : null;
                if (y.isAmbientLight)
                    h += x.r * b,
                        l += x.g * b,
                        c += x.b * b;
                else if (y.isDirectionalLight) {
                    var E = e.get(y);
                    if (E.color.copy(y.color).multiplyScalar(y.intensity),
                        E.direction.setFromMatrixPosition(y.matrixWorld),
                        n.setFromMatrixPosition(y.target.matrixWorld),
                        E.direction.sub(n),
                        E.direction.transformDirection(v),
                        E.shadow = y.castShadow,
                        y.castShadow) {
                        var T = y.shadow;
                        E.shadowBias = T.bias,
                            E.shadowRadius = T.radius,
                            E.shadowMapSize = T.mapSize
                    }
                    i.directionalShadowMap[u] = S,
                        i.directionalShadowMatrix[u] = y.shadow.matrix,
                        i.directional[u] = E,
                        u++
                } else if (y.isSpotLight) {
                    var E = e.get(y);
                    if (E.position.setFromMatrixPosition(y.matrixWorld),
                        E.position.applyMatrix4(v),
                        E.color.copy(x).multiplyScalar(b),
                        E.distance = w,
                        E.direction.setFromMatrixPosition(y.matrixWorld),
                        n.setFromMatrixPosition(y.target.matrixWorld),
                        E.direction.sub(n),
                        E.direction.transformDirection(v),
                        E.coneCos = Math.cos(y.angle),
                        E.penumbraCos = Math.cos(y.angle * (1 - y.penumbra)),
                        E.decay = 0 === y.distance ? 0 : y.decay,
                        E.shadow = y.castShadow,
                        y.castShadow) {
                        var T = y.shadow;
                        E.shadowBias = T.bias,
                            E.shadowRadius = T.radius,
                            E.shadowMapSize = T.mapSize
                    }
                    i.spotShadowMap[p] = S,
                        i.spotShadowMatrix[p] = y.shadow.matrix,
                        i.spot[p] = E,
                        p++
                } else if (y.isRectAreaLight) {
                    var E = e.get(y);
                    E.color.copy(x).multiplyScalar(b / (y.width * y.height)),
                        E.position.setFromMatrixPosition(y.matrixWorld),
                        E.position.applyMatrix4(v),
                        a.identity(),
                        r.copy(y.matrixWorld),
                        r.premultiply(v),
                        a.extractRotation(r),
                        E.halfWidth.set(.5 * y.width, 0, 0),
                        E.halfHeight.set(0, .5 * y.height, 0),
                        E.halfWidth.applyMatrix4(a),
                        E.halfHeight.applyMatrix4(a),
                        i.rectArea[f] = E,
                        f++
                } else if (y.isPointLight) {
                    var E = e.get(y);
                    if (E.position.setFromMatrixPosition(y.matrixWorld),
                        E.position.applyMatrix4(v),
                        E.color.copy(y.color).multiplyScalar(y.intensity),
                        E.distance = y.distance,
                        E.decay = 0 === y.distance ? 0 : y.decay,
                        E.shadow = y.castShadow,
                        y.castShadow) {
                        var T = y.shadow;
                        E.shadowBias = T.bias,
                            E.shadowRadius = T.radius,
                            E.shadowMapSize = T.mapSize,
                            E.shadowCameraNear = T.camera.near,
                            E.shadowCameraFar = T.camera.far
                    }
                    i.pointShadowMap[d] = S,
                        i.pointShadowMatrix[d] = y.shadow.matrix,
                        i.point[d] = E,
                        d++
                } else if (y.isHemisphereLight) {
                    var E = e.get(y);
                    E.direction.setFromMatrixPosition(y.matrixWorld),
                        E.direction.transformDirection(v),
                        E.direction.normalize(),
                        E.skyColor.copy(y.color).multiplyScalar(b),
                        E.groundColor.copy(y.groundColor).multiplyScalar(b),
                        i.hemi[m] = E,
                        m++
                }
            }
            i.ambient[0] = h,
                i.ambient[1] = l,
                i.ambient[2] = c,
                i.directional.length = u,
                i.spot.length = p,
                i.rectArea.length = f,
                i.point.length = d,
                i.hemi.length = m,
                i.hash = u + "," + d + "," + p + "," + f + "," + m + "," + o.length
        }
        var e = new Zt
            , i = {
                hash: "",
                ambient: [0, 0, 0],
                directional: [],
                directionalShadowMap: [],
                directionalShadowMatrix: [],
                spot: [],
                spotShadowMap: [],
                spotShadowMatrix: [],
                rectArea: [],
                point: [],
                pointShadowMap: [],
                pointShadowMatrix: [],
                hemi: []
            }
            , n = new s
            , r = new o
            , a = new o;
        return {
            setup: t,
            state: i
        }
    }
    function Kt(t, e) {
        function i(i) {
            var n = e.frame
                , o = i.geometry
                , a = t.get(i, o);
            return r[a.id] !== n && (o.isGeometry && a.updateFromObject(i),
                t.update(a),
                r[a.id] = n),
                a
        }
        function n() {
            r = {}
        }
        var r = {};
        return {
            update: i,
            clear: n
        }
    }
    function Qt(t) {
        for (var e = t.split("\n"), i = 0; i < e.length; i++)
            e[i] = i + 1 + ": " + e[i];
        return e.join("\n")
    }
    function $t(t, e, i) {
        var n = t.createShader(e);
        return t.shaderSource(n, i),
            t.compileShader(n),
            !1 === t.getShaderParameter(n, t.COMPILE_STATUS) && console.error("THREE.WebGLShader: Shader couldn't compile."),
            "" !== t.getShaderInfoLog(n) && console.warn("THREE.WebGLShader: gl.getShaderInfoLog()", e === t.VERTEX_SHADER ? "vertex" : "fragment", t.getShaderInfoLog(n), Qt(i)),
            n
    }
    function te(t) {
        switch (t) {
            case Ks:
                return ["Linear", "( value )"];
            case Qs:
                return ["sRGB", "( value )"];
            case th:
                return ["RGBE", "( value )"];
            case ih:
                return ["RGBM", "( value, 7.0 )"];
            case nh:
                return ["RGBM", "( value, 16.0 )"];
            case rh:
                return ["RGBD", "( value, 256.0 )"];
            case $s:
                return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
            default:
                throw new Error("unsupported encoding: " + t)
        }
    }
    function ee(t, e) {
        var i = te(e);
        return "vec4 " + t + "( vec4 value ) { return " + i[0] + "ToLinear" + i[1] + "; }"
    }
    function ie(t, e) {
        var i = te(e);
        return "vec4 " + t + "( vec4 value ) { return LinearTo" + i[0] + i[1] + "; }"
    }
    function ne(t, e) {
        var i;
        switch (e) {
            case Ha:
                i = "Linear";
                break;
            case Va:
                i = "Reinhard";
                break;
            case Wa:
                i = "Uncharted2";
                break;
            case Xa:
                i = "OptimizedCineon";
                break;
            default:
                throw new Error("unsupported toneMapping: " + e)
        }
        return "vec3 " + t + "( vec3 color ) { return " + i + "ToneMapping( color ); }"
    }
    function re(t, e, i) {
        return t = t || {},
            [t.derivatives || e.envMapCubeUV || e.bumpMap || e.normalMap || e.flatShading ? "#extension GL_OES_standard_derivatives : enable" : "", (t.fragDepth || e.logarithmicDepthBuffer) && i.get("EXT_frag_depth") ? "#extension GL_EXT_frag_depth : enable" : "", t.drawBuffers && i.get("WEBGL_draw_buffers") ? "#extension GL_EXT_draw_buffers : require" : "", (t.shaderTextureLOD || e.envMap) && i.get("EXT_shader_texture_lod") ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(se).join("\n")
    }
    function oe(t) {
        var e = [];
        for (var i in t) {
            var n = t[i];
            !1 !== n && e.push("#define " + i + " " + n)
        }
        return e.join("\n")
    }
    function ae(t, e) {
        for (var i = {}, n = t.getProgramParameter(e, t.ACTIVE_ATTRIBUTES), r = 0; r < n; r++) {
            var o = t.getActiveAttrib(e, r)
                , a = o.name;
            i[a] = t.getAttribLocation(e, a)
        }
        return i
    }
    function se(t) {
        return "" !== t
    }
    function he(t, e) {
        return t.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights)
    }
    function le(t) {
        function e(t, e) {
            var i = yh[e];
            if (void 0 === i)
                throw new Error("Can not resolve #include <" + e + ">");
            return le(i)
        }
        var i = /^[ \t]*#include +<([\w\d.]+)>/gm;
        return t.replace(i, e)
    }
    function ce(t) {
        function e(t, e, i, n) {
            for (var r = "", o = parseInt(e); o < parseInt(i); o++)
                r += n.replace(/\[ i \]/g, "[ " + o + " ]");
            return r
        }
        var i = /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
        return t.replace(i, e)
    }
    function ue(t, e, i, n, r, o) {
        var a = t.context
            , s = n.defines
            , h = r.vertexShader
            , l = r.fragmentShader
            , c = "SHADOWMAP_TYPE_BASIC";
        o.shadowMapType === $o ? c = "SHADOWMAP_TYPE_PCF" : o.shadowMapType === ta && (c = "SHADOWMAP_TYPE_PCF_SOFT");
        var u = "ENVMAP_TYPE_CUBE"
            , d = "ENVMAP_MODE_REFLECTION"
            , p = "ENVMAP_BLENDING_MULTIPLY";
        if (o.envMap) {
            switch (n.envMap.mapping) {
                case qa:
                case Za:
                    u = "ENVMAP_TYPE_CUBE";
                    break;
                case $a:
                case ts:
                    u = "ENVMAP_TYPE_CUBE_UV";
                    break;
                case Ja:
                case Ka:
                    u = "ENVMAP_TYPE_EQUIREC";
                    break;
                case Qa:
                    u = "ENVMAP_TYPE_SPHERE"
            }
            switch (n.envMap.mapping) {
                case Za:
                case Ka:
                    d = "ENVMAP_MODE_REFRACTION"
            }
            switch (n.combine) {
                case za:
                    p = "ENVMAP_BLENDING_MULTIPLY";
                    break;
                case Ga:
                    p = "ENVMAP_BLENDING_MIX";
                    break;
                case ja:
                    p = "ENVMAP_BLENDING_ADD"
            }
        }
        var f, m, v = t.gammaFactor > 0 ? t.gammaFactor : 1, g = re(n.extensions, o, e), _ = oe(s), y = a.createProgram();
        n.isRawShaderMaterial ? (f = [_].filter(se).join("\n"),
            f.length > 0 && (f += "\n"),
            m = [g, _].filter(se).join("\n"),
            m.length > 0 && (m += "\n")) : (f = ["precision " + o.precision + " float;", "precision " + o.precision + " int;", "#define SHADER_NAME " + r.name, _, o.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + v, "#define MAX_BONES " + o.maxBones, o.useFog && o.fog ? "#define USE_FOG" : "", o.useFog && o.fogExp ? "#define FOG_EXP2" : "", o.map ? "#define USE_MAP" : "", o.envMap ? "#define USE_ENVMAP" : "", o.envMap ? "#define " + d : "", o.lightMap ? "#define USE_LIGHTMAP" : "", o.aoMap ? "#define USE_AOMAP" : "", o.emissiveMap ? "#define USE_EMISSIVEMAP" : "", o.bumpMap ? "#define USE_BUMPMAP" : "", o.normalMap ? "#define USE_NORMALMAP" : "", o.displacementMap && o.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", o.specularMap ? "#define USE_SPECULARMAP" : "", o.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", o.metalnessMap ? "#define USE_METALNESSMAP" : "", o.alphaMap ? "#define USE_ALPHAMAP" : "", o.vertexColors ? "#define USE_COLOR" : "", o.flatShading ? "#define FLAT_SHADED" : "", o.skinning ? "#define USE_SKINNING" : "", o.useVertexTexture ? "#define BONE_TEXTURE" : "", o.morphTargets ? "#define USE_MORPHTARGETS" : "", o.morphNormals && !1 === o.flatShading ? "#define USE_MORPHNORMALS" : "", o.doubleSided ? "#define DOUBLE_SIDED" : "", o.flipSided ? "#define FLIP_SIDED" : "", "#define NUM_CLIPPING_PLANES " + o.numClippingPlanes, o.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", o.shadowMapEnabled ? "#define " + c : "", o.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", o.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", o.logarithmicDepthBuffer && e.get("EXT_frag_depth") ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_COLOR", "\tattribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(se).join("\n"),
                m = [g, "precision " + o.precision + " float;", "precision " + o.precision + " int;", "#define SHADER_NAME " + r.name, _, o.alphaTest ? "#define ALPHATEST " + o.alphaTest : "", "#define GAMMA_FACTOR " + v, o.useFog && o.fog ? "#define USE_FOG" : "", o.useFog && o.fogExp ? "#define FOG_EXP2" : "", o.map ? "#define USE_MAP" : "", o.envMap ? "#define USE_ENVMAP" : "", o.envMap ? "#define " + u : "", o.envMap ? "#define " + d : "", o.envMap ? "#define " + p : "", o.lightMap ? "#define USE_LIGHTMAP" : "", o.aoMap ? "#define USE_AOMAP" : "", o.emissiveMap ? "#define USE_EMISSIVEMAP" : "", o.bumpMap ? "#define USE_BUMPMAP" : "", o.normalMap ? "#define USE_NORMALMAP" : "", o.specularMap ? "#define USE_SPECULARMAP" : "", o.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", o.metalnessMap ? "#define USE_METALNESSMAP" : "", o.alphaMap ? "#define USE_ALPHAMAP" : "", o.vertexColors ? "#define USE_COLOR" : "", o.gradientMap ? "#define USE_GRADIENTMAP" : "", o.flatShading ? "#define FLAT_SHADED" : "", o.doubleSided ? "#define DOUBLE_SIDED" : "", o.flipSided ? "#define FLIP_SIDED" : "", "#define NUM_CLIPPING_PLANES " + o.numClippingPlanes, "#define UNION_CLIPPING_PLANES " + (o.numClippingPlanes - o.numClipIntersection), o.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", o.shadowMapEnabled ? "#define " + c : "", o.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", o.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", o.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", o.logarithmicDepthBuffer && e.get("EXT_frag_depth") ? "#define USE_LOGDEPTHBUF_EXT" : "", o.envMap && e.get("EXT_shader_texture_lod") ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", o.toneMapping !== ka ? "#define TONE_MAPPING" : "", o.toneMapping !== ka ? yh.tonemapping_pars_fragment : "", o.toneMapping !== ka ? ne("toneMapping", o.toneMapping) : "", o.dithering ? "#define DITHERING" : "", o.outputEncoding || o.mapEncoding || o.envMapEncoding || o.emissiveMapEncoding ? yh.encodings_pars_fragment : "", o.mapEncoding ? ee("mapTexelToLinear", o.mapEncoding) : "", o.envMapEncoding ? ee("envMapTexelToLinear", o.envMapEncoding) : "", o.emissiveMapEncoding ? ee("emissiveMapTexelToLinear", o.emissiveMapEncoding) : "", o.outputEncoding ? ie("linearToOutputTexel", o.outputEncoding) : "", o.depthPacking ? "#define DEPTH_PACKING " + n.depthPacking : "", "\n"].filter(se).join("\n")),
            h = le(h),
            h = he(h, o),
            l = le(l),
            l = he(l, o),
            n.isShaderMaterial || (h = ce(h),
                l = ce(l));
        var x = f + h
            , b = m + l
            , w = $t(a, a.VERTEX_SHADER, x)
            , S = $t(a, a.FRAGMENT_SHADER, b);
        a.attachShader(y, w),
            a.attachShader(y, S),
            void 0 !== n.index0AttributeName ? a.bindAttribLocation(y, 0, n.index0AttributeName) : !0 === o.morphTargets && a.bindAttribLocation(y, 0, "position"),
            a.linkProgram(y);
        var E = a.getProgramInfoLog(y)
            , T = a.getShaderInfoLog(w)
            , M = a.getShaderInfoLog(S)
            , A = !0
            , P = !0;
        !1 === a.getProgramParameter(y, a.LINK_STATUS) ? (A = !1,
            console.error("THREE.WebGLProgram: shader error: ", a.getError(), "gl.VALIDATE_STATUS", a.getProgramParameter(y, a.VALIDATE_STATUS), "gl.getProgramInfoLog", E, T, M)) : "" !== E ? console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", E) : "" !== T && "" !== M || (P = !1),
            P && (this.diagnostics = {
                runnable: A,
                material: n,
                programLog: E,
                vertexShader: {
                    log: T,
                    prefix: f
                },
                fragmentShader: {
                    log: M,
                    prefix: m
                }
            }),
            a.deleteShader(w),
            a.deleteShader(S);
        var R;
        this.getUniforms = function () {
            return void 0 === R && (R = new q(a, y, t)),
                R
        }
            ;
        var L;
        return this.getAttributes = function () {
            return void 0 === L && (L = ae(a, y)),
                L
        }
            ,
            this.destroy = function () {
                a.deleteProgram(y),
                    this.program = void 0
            }
            ,
            Object.defineProperties(this, {
                uniforms: {
                    get: function () {
                        return console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms()."),
                            this.getUniforms()
                    }
                },
                attributes: {
                    get: function () {
                        return console.warn("THREE.WebGLProgram: .attributes is now .getAttributes()."),
                            this.getAttributes()
                    }
                }
            }),
            this.id = Th++,
            this.code = i,
            this.usedTimes = 1,
            this.program = y,
            this.vertexShader = w,
            this.fragmentShader = S,
            this
    }
    function de(t, e, i) {
        function n(t) {
            var e = t.skeleton
                , n = e.bones;
            if (i.floatVertexTextures)
                return 1024;
            var r = i.maxVertexUniforms
                , o = Math.floor((r - 20) / 4)
                , a = Math.min(o, n.length);
            return a < n.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + n.length + " bones. This GPU supports " + a + "."),
                0) : a
        }
        function r(t, e) {
            var i;
            return t ? t.isTexture ? i = t.encoding : t.isWebGLRenderTarget && (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),
                i = t.texture.encoding) : i = Ks,
                i === Ks && e && (i = $s),
                i
        }
        var o = []
            , a = {
                MeshDepthMaterial: "depth",
                MeshDistanceMaterial: "distanceRGBA",
                MeshNormalMaterial: "normal",
                MeshBasicMaterial: "basic",
                MeshLambertMaterial: "lambert",
                MeshPhongMaterial: "phong",
                MeshToonMaterial: "phong",
                MeshStandardMaterial: "physical",
                MeshPhysicalMaterial: "physical",
                LineBasicMaterial: "basic",
                LineDashedMaterial: "dashed",
                PointsMaterial: "points",
                ShadowMaterial: "shadow"
            }
            , s = ["precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding", "lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "displacementMap", "specularMap", "roughnessMap", "metalnessMap", "gradientMap", "alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp", "flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning", "maxBones", "useVertexTexture", "morphTargets", "morphNormals", "maxMorphTargets", "maxMorphNormals", "premultipliedAlpha", "numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights", "shadowMapEnabled", "shadowMapType", "toneMapping", "physicallyCorrectLights", "alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering"];
        this.getParameters = function (e, o, s, h, l, c, u) {
            var d = a[e.type]
                , p = u.isSkinnedMesh ? n(u) : 0
                , f = i.precision;
            null !== e.precision && (f = i.getMaxPrecision(e.precision)) !== e.precision && console.warn("THREE.WebGLProgram.getParameters:", e.precision, "not supported, using", f, "instead.");
            var m = t.getRenderTarget();
            return {
                shaderID: d,
                precision: f,
                supportsVertexTextures: i.vertexTextures,
                outputEncoding: r(m ? m.texture : null, t.gammaOutput),
                map: !!e.map,
                mapEncoding: r(e.map, t.gammaInput),
                envMap: !!e.envMap,
                envMapMode: e.envMap && e.envMap.mapping,
                envMapEncoding: r(e.envMap, t.gammaInput),
                envMapCubeUV: !!e.envMap && (e.envMap.mapping === $a || e.envMap.mapping === ts),
                lightMap: !!e.lightMap,
                aoMap: !!e.aoMap,
                emissiveMap: !!e.emissiveMap,
                emissiveMapEncoding: r(e.emissiveMap, t.gammaInput),
                bumpMap: !!e.bumpMap,
                normalMap: !!e.normalMap,
                displacementMap: !!e.displacementMap,
                roughnessMap: !!e.roughnessMap,
                metalnessMap: !!e.metalnessMap,
                specularMap: !!e.specularMap,
                alphaMap: !!e.alphaMap,
                gradientMap: !!e.gradientMap,
                combine: e.combine,
                vertexColors: e.vertexColors,
                fog: !!h,
                useFog: e.fog,
                fogExp: h && h.isFogExp2,
                flatShading: e.flatShading,
                sizeAttenuation: e.sizeAttenuation,
                logarithmicDepthBuffer: i.logarithmicDepthBuffer,
                skinning: e.skinning && p > 0,
                maxBones: p,
                useVertexTexture: i.floatVertexTextures,
                morphTargets: e.morphTargets,
                morphNormals: e.morphNormals,
                maxMorphTargets: t.maxMorphTargets,
                maxMorphNormals: t.maxMorphNormals,
                numDirLights: o.directional.length,
                numPointLights: o.point.length,
                numSpotLights: o.spot.length,
                numRectAreaLights: o.rectArea.length,
                numHemiLights: o.hemi.length,
                numClippingPlanes: l,
                numClipIntersection: c,
                dithering: e.dithering,
                shadowMapEnabled: t.shadowMap.enabled && u.receiveShadow && s.length > 0,
                shadowMapType: t.shadowMap.type,
                toneMapping: t.toneMapping,
                physicallyCorrectLights: t.physicallyCorrectLights,
                premultipliedAlpha: e.premultipliedAlpha,
                alphaTest: e.alphaTest,
                doubleSided: e.side === na,
                flipSided: e.side === ia,
                depthPacking: void 0 !== e.depthPacking && e.depthPacking
            }
        }
            ,
            this.getProgramCode = function (e, i) {
                var n = [];
                if (i.shaderID ? n.push(i.shaderID) : (n.push(e.fragmentShader),
                    n.push(e.vertexShader)),
                    void 0 !== e.defines)
                    for (var r in e.defines)
                        n.push(r),
                            n.push(e.defines[r]);
                for (var o = 0; o < s.length; o++)
                    n.push(i[s[o]]);
                return n.push(e.onBeforeCompile.toString()),
                    n.push(t.gammaOutput),
                    n.join()
            }
            ,
            this.acquireProgram = function (i, n, r, a) {
                for (var s, h = 0, l = o.length; h < l; h++) {
                    var c = o[h];
                    if (c.code === a) {
                        s = c,
                            ++s.usedTimes;
                        break
                    }
                }
                return void 0 === s && (s = new ue(t, e, a, i, n, r),
                    o.push(s)),
                    s
            }
            ,
            this.releaseProgram = function (t) {
                if (0 == --t.usedTimes) {
                    var e = o.indexOf(t);
                    o[e] = o[o.length - 1],
                        o.pop(),
                        t.destroy()
                }
            }
            ,
            this.programs = o
    }
    function pe(t, e, i, n, r, o, a) {
        function s(t, e) {
            if (t.width > e || t.height > e) {
                var i = e / Math.max(t.width, t.height)
                    , n = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
                n.width = Math.floor(t.width * i),
                    n.height = Math.floor(t.height * i);
                return n.getContext("2d").drawImage(t, 0, 0, t.width, t.height, 0, 0, n.width, n.height),
                    console.warn("THREE.WebGLRenderer: image is too big (" + t.width + "x" + t.height + "). Resized to " + n.width + "x" + n.height, t),
                    n
            }
            return t
        }
        function h(t) {
            return sh.isPowerOfTwo(t.width) && sh.isPowerOfTwo(t.height)
        }
        function l(t) {
            if (t instanceof HTMLImageElement || t instanceof HTMLCanvasElement || t instanceof ImageBitmap) {
                var e = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
                e.width = sh.floorPowerOfTwo(t.width),
                    e.height = sh.floorPowerOfTwo(t.height);
                return e.getContext("2d").drawImage(t, 0, 0, e.width, e.height),
                    console.warn("THREE.WebGLRenderer: image is not power of two (" + t.width + "x" + t.height + "). Resized to " + e.width + "x" + e.height, t),
                    e
            }
            return t
        }
        function c(t) {
            return t.wrapS !== is || t.wrapT !== is || t.minFilter !== rs && t.minFilter !== ss
        }
        function u(t, e) {
            return t.generateMipmaps && e && t.minFilter !== rs && t.minFilter !== ss
        }
        function d(e) {
            return e === rs || e === os || e === as ? t.NEAREST : t.LINEAR
        }
        function p(t) {
            var e = t.target;
            e.removeEventListener("dispose", p),
                m(e),
                e.isVideoTexture && delete L[e.id],
                a.textures--
        }
        function f(t) {
            var e = t.target;
            e.removeEventListener("dispose", f),
                v(e),
                a.textures--
        }
        function m(e) {
            var i = n.get(e);
            if (e.image && i.__image__webglTextureCube)
                t.deleteTexture(i.__image__webglTextureCube);
            else {
                if (void 0 === i.__webglInit)
                    return;
                t.deleteTexture(i.__webglTexture)
            }
            n.remove(e)
        }
        function v(e) {
            var i = n.get(e)
                , r = n.get(e.texture);
            if (e) {
                if (void 0 !== r.__webglTexture && t.deleteTexture(r.__webglTexture),
                    e.depthTexture && e.depthTexture.dispose(),
                    e.isWebGLRenderTargetCube)
                    for (var o = 0; o < 6; o++)
                        t.deleteFramebuffer(i.__webglFramebuffer[o]),
                            i.__webglDepthbuffer && t.deleteRenderbuffer(i.__webglDepthbuffer[o]);
                else
                    t.deleteFramebuffer(i.__webglFramebuffer),
                        i.__webglDepthbuffer && t.deleteRenderbuffer(i.__webglDepthbuffer);
                n.remove(e.texture),
                    n.remove(e)
            }
        }
        function g(e, r) {
            var o = n.get(e);
            if (e.version > 0 && o.__version !== e.version) {
                var a = e.image;
                if (void 0 === a)
                    console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined", e);
                else {
                    if (!1 !== a.complete)
                        return void b(o, e, r);
                    console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete", e)
                }
            }
            i.activeTexture(t.TEXTURE0 + r),
                i.bindTexture(t.TEXTURE_2D, o.__webglTexture)
        }
        function _(e, l) {
            var c = n.get(e);
            if (6 === e.image.length)
                if (e.version > 0 && c.__version !== e.version) {
                    c.__image__webglTextureCube || (e.addEventListener("dispose", p),
                        c.__image__webglTextureCube = t.createTexture(),
                        a.textures++),
                        i.activeTexture(t.TEXTURE0 + l),
                        i.bindTexture(t.TEXTURE_CUBE_MAP, c.__image__webglTextureCube),
                        t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, e.flipY);
                    for (var d = e && e.isCompressedTexture, f = e.image[0] && e.image[0].isDataTexture, m = [], v = 0; v < 6; v++)
                        m[v] = d || f ? f ? e.image[v].image : e.image[v] : s(e.image[v], r.maxCubemapSize);
                    var g = m[0]
                        , _ = h(g)
                        , y = o.convert(e.format)
                        , b = o.convert(e.type);
                    x(t.TEXTURE_CUBE_MAP, e, _);
                    for (var v = 0; v < 6; v++)
                        if (d)
                            for (var w, S = m[v].mipmaps, E = 0, T = S.length; E < T; E++)
                                w = S[E],
                                    e.format !== Es && e.format !== Ss ? i.getCompressedTextureFormats().indexOf(y) > -1 ? i.compressedTexImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + v, E, y, w.width, w.height, 0, w.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : i.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + v, E, y, w.width, w.height, 0, y, b, w.data);
                        else
                            f ? i.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + v, 0, y, m[v].width, m[v].height, 0, y, b, m[v].data) : i.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + v, 0, y, y, b, m[v]);
                    u(e, _) && t.generateMipmap(t.TEXTURE_CUBE_MAP),
                        c.__version = e.version,
                        e.onUpdate && e.onUpdate(e)
                } else
                    i.activeTexture(t.TEXTURE0 + l),
                        i.bindTexture(t.TEXTURE_CUBE_MAP, c.__image__webglTextureCube)
        }
        function y(e, r) {
            i.activeTexture(t.TEXTURE0 + r),
                i.bindTexture(t.TEXTURE_CUBE_MAP, n.get(e).__webglTexture)
        }
        function x(i, a, s) {
            var h;
            if (s ? (t.texParameteri(i, t.TEXTURE_WRAP_S, o.convert(a.wrapS)),
                t.texParameteri(i, t.TEXTURE_WRAP_T, o.convert(a.wrapT)),
                t.texParameteri(i, t.TEXTURE_MAG_FILTER, o.convert(a.magFilter)),
                t.texParameteri(i, t.TEXTURE_MIN_FILTER, o.convert(a.minFilter))) : (t.texParameteri(i, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE),
                    t.texParameteri(i, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE),
                    a.wrapS === is && a.wrapT === is || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.", a),
                    t.texParameteri(i, t.TEXTURE_MAG_FILTER, d(a.magFilter)),
                    t.texParameteri(i, t.TEXTURE_MIN_FILTER, d(a.minFilter)),
                    a.minFilter !== rs && a.minFilter !== ss && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.", a)),
                h = e.get("EXT_texture_filter_anisotropic")) {
                if (a.type === vs && null === e.get("OES_texture_float_linear"))
                    return;
                if (a.type === gs && null === e.get("OES_texture_half_float_linear"))
                    return;
                (a.anisotropy > 1 || n.get(a).__currentAnisotropy) && (t.texParameterf(i, h.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(a.anisotropy, r.getMaxAnisotropy())),
                    n.get(a).__currentAnisotropy = a.anisotropy)
            }
        }
        function b(e, n, d) {
            void 0 === e.__webglInit && (e.__webglInit = !0,
                n.addEventListener("dispose", p),
                e.__webglTexture = t.createTexture(),
                n.isVideoTexture && (L[n.id] = n),
                a.textures++),
                i.activeTexture(t.TEXTURE0 + d),
                i.bindTexture(t.TEXTURE_2D, e.__webglTexture),
                t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, n.flipY),
                t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL, n.premultiplyAlpha),
                t.pixelStorei(t.UNPACK_ALIGNMENT, n.unpackAlignment);
            var f = s(n.image, r.maxTextureSize);
            c(n) && !1 === h(f) && (f = l(f));
            var m = h(f)
                , v = o.convert(n.format)
                , g = o.convert(n.type);
            x(t.TEXTURE_2D, n, m);
            var _, y = n.mipmaps;
            if (n.isDepthTexture) {
                var b = t.DEPTH_COMPONENT;
                if (n.type === vs) {
                    if (!R)
                        throw new Error("Float Depth Texture only supported in WebGL2.0");
                    b = t.DEPTH_COMPONENT32F
                } else
                    R && (b = t.DEPTH_COMPONENT16);
                n.format === Ps && b === t.DEPTH_COMPONENT && n.type !== ps && n.type !== ms && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),
                    n.type = ps,
                    g = o.convert(n.type)),
                    n.format === Rs && (b = t.DEPTH_STENCIL,
                        n.type !== bs && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),
                            n.type = bs,
                            g = o.convert(n.type))),
                    i.texImage2D(t.TEXTURE_2D, 0, b, f.width, f.height, 0, v, g, null)
            } else if (n.isDataTexture)
                if (y.length > 0 && m) {
                    for (var w = 0, S = y.length; w < S; w++)
                        _ = y[w],
                            i.texImage2D(t.TEXTURE_2D, w, v, _.width, _.height, 0, v, g, _.data);
                    n.generateMipmaps = !1
                } else
                    i.texImage2D(t.TEXTURE_2D, 0, v, f.width, f.height, 0, v, g, f.data);
            else if (n.isCompressedTexture)
                for (var w = 0, S = y.length; w < S; w++)
                    _ = y[w],
                        n.format !== Es && n.format !== Ss ? i.getCompressedTextureFormats().indexOf(v) > -1 ? i.compressedTexImage2D(t.TEXTURE_2D, w, v, _.width, _.height, 0, _.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : i.texImage2D(t.TEXTURE_2D, w, v, _.width, _.height, 0, v, g, _.data);
            else if (y.length > 0 && m) {
                for (var w = 0, S = y.length; w < S; w++)
                    _ = y[w],
                        i.texImage2D(t.TEXTURE_2D, w, v, v, g, _);
                n.generateMipmaps = !1
            } else
                i.texImage2D(t.TEXTURE_2D, 0, v, v, g, f);
            u(n, m) && t.generateMipmap(t.TEXTURE_2D),
                e.__version = n.version,
                n.onUpdate && n.onUpdate(n)
        }
        function w(e, r, a, s) {
            var h = o.convert(r.texture.format)
                , l = o.convert(r.texture.type);
            i.texImage2D(s, 0, h, r.width, r.height, 0, h, l, null),
                t.bindFramebuffer(t.FRAMEBUFFER, e),
                t.framebufferTexture2D(t.FRAMEBUFFER, a, s, n.get(r.texture).__webglTexture, 0),
                t.bindFramebuffer(t.FRAMEBUFFER, null)
        }
        function S(e, i) {
            t.bindRenderbuffer(t.RENDERBUFFER, e),
                i.depthBuffer && !i.stencilBuffer ? (t.renderbufferStorage(t.RENDERBUFFER, t.DEPTH_COMPONENT16, i.width, i.height),
                    t.framebufferRenderbuffer(t.FRAMEBUFFER, t.DEPTH_ATTACHMENT, t.RENDERBUFFER, e)) : i.depthBuffer && i.stencilBuffer ? (t.renderbufferStorage(t.RENDERBUFFER, t.DEPTH_STENCIL, i.width, i.height),
                        t.framebufferRenderbuffer(t.FRAMEBUFFER, t.DEPTH_STENCIL_ATTACHMENT, t.RENDERBUFFER, e)) : t.renderbufferStorage(t.RENDERBUFFER, t.RGBA4, i.width, i.height),
                t.bindRenderbuffer(t.RENDERBUFFER, null)
        }
        function E(e, i) {
            if (i && i.isWebGLRenderTargetCube)
                throw new Error("Depth Texture with cube render targets is not supported");
            if (t.bindFramebuffer(t.FRAMEBUFFER, e),
                !i.depthTexture || !i.depthTexture.isDepthTexture)
                throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
            n.get(i.depthTexture).__webglTexture && i.depthTexture.image.width === i.width && i.depthTexture.image.height === i.height || (i.depthTexture.image.width = i.width,
                i.depthTexture.image.height = i.height,
                i.depthTexture.needsUpdate = !0),
                g(i.depthTexture, 0);
            var r = n.get(i.depthTexture).__webglTexture;
            if (i.depthTexture.format === Ps)
                t.framebufferTexture2D(t.FRAMEBUFFER, t.DEPTH_ATTACHMENT, t.TEXTURE_2D, r, 0);
            else {
                if (i.depthTexture.format !== Rs)
                    throw new Error("Unknown depthTexture format");
                t.framebufferTexture2D(t.FRAMEBUFFER, t.DEPTH_STENCIL_ATTACHMENT, t.TEXTURE_2D, r, 0)
            }
        }
        function T(e) {
            var i = n.get(e)
                , r = !0 === e.isWebGLRenderTargetCube;
            if (e.depthTexture) {
                if (r)
                    throw new Error("target.depthTexture not supported in Cube render targets");
                E(i.__webglFramebuffer, e)
            } else if (r) {
                i.__webglDepthbuffer = [];
                for (var o = 0; o < 6; o++)
                    t.bindFramebuffer(t.FRAMEBUFFER, i.__webglFramebuffer[o]),
                        i.__webglDepthbuffer[o] = t.createRenderbuffer(),
                        S(i.__webglDepthbuffer[o], e)
            } else
                t.bindFramebuffer(t.FRAMEBUFFER, i.__webglFramebuffer),
                    i.__webglDepthbuffer = t.createRenderbuffer(),
                    S(i.__webglDepthbuffer, e);
            t.bindFramebuffer(t.FRAMEBUFFER, null)
        }
        function M(e) {
            var r = n.get(e)
                , o = n.get(e.texture);
            e.addEventListener("dispose", f),
                o.__webglTexture = t.createTexture(),
                a.textures++;
            var s = !0 === e.isWebGLRenderTargetCube
                , l = h(e);
            if (s) {
                r.__webglFramebuffer = [];
                for (var c = 0; c < 6; c++)
                    r.__webglFramebuffer[c] = t.createFramebuffer()
            } else
                r.__webglFramebuffer = t.createFramebuffer();
            if (s) {
                i.bindTexture(t.TEXTURE_CUBE_MAP, o.__webglTexture),
                    x(t.TEXTURE_CUBE_MAP, e.texture, l);
                for (var c = 0; c < 6; c++)
                    w(r.__webglFramebuffer[c], e, t.COLOR_ATTACHMENT0, t.TEXTURE_CUBE_MAP_POSITIVE_X + c);
                u(e.texture, l) && t.generateMipmap(t.TEXTURE_CUBE_MAP),
                    i.bindTexture(t.TEXTURE_CUBE_MAP, null)
            } else
                i.bindTexture(t.TEXTURE_2D, o.__webglTexture),
                    x(t.TEXTURE_2D, e.texture, l),
                    w(r.__webglFramebuffer, e, t.COLOR_ATTACHMENT0, t.TEXTURE_2D),
                    u(e.texture, l) && t.generateMipmap(t.TEXTURE_2D),
                    i.bindTexture(t.TEXTURE_2D, null);
            e.depthBuffer && T(e)
        }
        function A(e) {
            var r = e.texture;
            if (u(r, h(e))) {
                var o = e.isWebGLRenderTargetCube ? t.TEXTURE_CUBE_MAP : t.TEXTURE_2D
                    , a = n.get(r).__webglTexture;
                i.bindTexture(o, a),
                    t.generateMipmap(o),
                    i.bindTexture(o, null)
            }
        }
        function P() {
            for (var t in L)
                L[t].update()
        }
        var R = "undefined" != typeof WebGL2RenderingContext && t instanceof window.WebGL2RenderingContext
            , L = {};
        this.setTexture2D = g,
            this.setTextureCube = _,
            this.setTextureCubeDynamic = y,
            this.setupRenderTarget = M,
            this.updateRenderTargetMipmap = A,
            this.updateVideoTextures = P
    }
    function fe() {
        function t(t) {
            var e = t.uuid
                , i = n[e];
            return void 0 === i && (i = {},
                n[e] = i),
                i
        }
        function e(t) {
            delete n[t.uuid]
        }
        function i() {
            n = {}
        }
        var n = {};
        return {
            get: t,
            remove: e,
            clear: i
        }
    }
    function me(t, e, i) {
        function n() {
            var e = !1
                , i = new c
                , n = null
                , r = new c(0, 0, 0, 0);
            return {
                setMask: function (i) {
                    n === i || e || (t.colorMask(i, i, i, i),
                        n = i)
                },
                setLocked: function (t) {
                    e = t
                },
                setClear: function (e, n, o, a, s) {
                    !0 === s && (e *= a,
                        n *= a,
                        o *= a),
                        i.set(e, n, o, a),
                        !1 === r.equals(i) && (t.clearColor(e, n, o, a),
                            r.copy(i))
                },
                reset: function () {
                    e = !1,
                        n = null,
                        r.set(-1, 0, 0, 0)
                }
            }
        }
        function r() {
            var e = !1
                , i = null
                , n = null
                , r = null;
            return {
                setTest: function (e) {
                    e ? d(t.DEPTH_TEST) : p(t.DEPTH_TEST)
                },
                setMask: function (n) {
                    i === n || e || (t.depthMask(n),
                        i = n)
                },
                setFunc: function (e) {
                    if (n !== e) {
                        if (e)
                            switch (e) {
                                case Oa:
                                    t.depthFunc(t.NEVER);
                                    break;
                                case Ia:
                                    t.depthFunc(t.ALWAYS);
                                    break;
                                case Ca:
                                    t.depthFunc(t.LESS);
                                    break;
                                case Da:
                                    t.depthFunc(t.LEQUAL);
                                    break;
                                case Na:
                                    t.depthFunc(t.EQUAL);
                                    break;
                                case Ua:
                                    t.depthFunc(t.GEQUAL);
                                    break;
                                case Ba:
                                    t.depthFunc(t.GREATER);
                                    break;
                                case Fa:
                                    t.depthFunc(t.NOTEQUAL);
                                    break;
                                default:
                                    t.depthFunc(t.LEQUAL)
                            }
                        else
                            t.depthFunc(t.LEQUAL);
                        n = e
                    }
                },
                setLocked: function (t) {
                    e = t
                },
                setClear: function (e) {
                    r !== e && (t.clearDepth(e),
                        r = e)
                },
                reset: function () {
                    e = !1,
                        i = null,
                        n = null,
                        r = null
                }
            }
        }
        function o() {
            var e = !1
                , i = null
                , n = null
                , r = null
                , o = null
                , a = null
                , s = null
                , h = null
                , l = null;
            return {
                setTest: function (e) {
                    e ? d(t.STENCIL_TEST) : p(t.STENCIL_TEST)
                },
                setMask: function (n) {
                    i === n || e || (t.stencilMask(n),
                        i = n)
                },
                setFunc: function (e, i, a) {
                    n === e && r === i && o === a || (t.stencilFunc(e, i, a),
                        n = e,
                        r = i,
                        o = a)
                },
                setOp: function (e, i, n) {
                    a === e && s === i && h === n || (t.stencilOp(e, i, n),
                        a = e,
                        s = i,
                        h = n)
                },
                setLocked: function (t) {
                    e = t
                },
                setClear: function (e) {
                    l !== e && (t.clearStencil(e),
                        l = e)
                },
                reset: function () {
                    e = !1,
                        i = null,
                        n = null,
                        r = null,
                        o = null,
                        a = null,
                        s = null,
                        h = null,
                        l = null
                }
            }
        }
        function a(e, i, n) {
            var r = new Uint8Array(4)
                , o = t.createTexture();
            t.bindTexture(e, o),
                t.texParameteri(e, t.TEXTURE_MIN_FILTER, t.NEAREST),
                t.texParameteri(e, t.TEXTURE_MAG_FILTER, t.NEAREST);
            for (var a = 0; a < n; a++)
                t.texImage2D(i + a, 0, t.RGBA, 1, 1, 0, t.RGBA, t.UNSIGNED_BYTE, r);
            return o
        }
        function s() {
            for (var t = 0, e = D.length; t < e; t++)
                D[t] = 0
        }
        function h(i) {
            if (D[i] = 1,
                0 === N[i] && (t.enableVertexAttribArray(i),
                    N[i] = 1),
                0 !== U[i]) {
                e.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(i, 0),
                    U[i] = 0
            }
        }
        function l(i, n) {
            if (D[i] = 1,
                0 === N[i] && (t.enableVertexAttribArray(i),
                    N[i] = 1),
                U[i] !== n) {
                e.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(i, n),
                    U[i] = n
            }
        }
        function u() {
            for (var e = 0, i = N.length; e !== i; ++e)
                N[e] !== D[e] && (t.disableVertexAttribArray(e),
                    N[e] = 0)
        }
        function d(e) {
            !0 !== B[e] && (t.enable(e),
                B[e] = !0)
        }
        function p(e) {
            !1 !== B[e] && (t.disable(e),
                B[e] = !1)
        }
        function f() {
            if (null === F && (F = [],
                e.get("WEBGL_compressed_texture_pvrtc") || e.get("WEBGL_compressed_texture_s3tc") || e.get("WEBGL_compressed_texture_etc1")))
                for (var i = t.getParameter(t.COMPRESSED_TEXTURE_FORMATS), n = 0; n < i.length; n++)
                    F.push(i[n]);
            return F
        }
        function m(e) {
            return z !== e && (t.useProgram(e),
                z = e,
                !0)
        }
        function v(e, n, r, o, a, s, h, l) {
            if (e !== la ? d(t.BLEND) : p(t.BLEND),
                e !== fa) {
                if (e !== G || l !== Y)
                    switch (e) {
                        case ua:
                            l ? (t.blendEquationSeparate(t.FUNC_ADD, t.FUNC_ADD),
                                t.blendFuncSeparate(t.ONE, t.ONE, t.ONE, t.ONE)) : (t.blendEquation(t.FUNC_ADD),
                                    t.blendFunc(t.SRC_ALPHA, t.ONE));
                            break;
                        case da:
                            l ? (t.blendEquationSeparate(t.FUNC_ADD, t.FUNC_ADD),
                                t.blendFuncSeparate(t.ZERO, t.ZERO, t.ONE_MINUS_SRC_COLOR, t.ONE_MINUS_SRC_ALPHA)) : (t.blendEquation(t.FUNC_ADD),
                                    t.blendFunc(t.ZERO, t.ONE_MINUS_SRC_COLOR));
                            break;
                        case pa:
                            l ? (t.blendEquationSeparate(t.FUNC_ADD, t.FUNC_ADD),
                                t.blendFuncSeparate(t.ZERO, t.SRC_COLOR, t.ZERO, t.SRC_ALPHA)) : (t.blendEquation(t.FUNC_ADD),
                                    t.blendFunc(t.ZERO, t.SRC_COLOR));
                            break;
                        default:
                            l ? (t.blendEquationSeparate(t.FUNC_ADD, t.FUNC_ADD),
                                t.blendFuncSeparate(t.ONE, t.ONE_MINUS_SRC_ALPHA, t.ONE, t.ONE_MINUS_SRC_ALPHA)) : (t.blendEquationSeparate(t.FUNC_ADD, t.FUNC_ADD),
                                    t.blendFuncSeparate(t.SRC_ALPHA, t.ONE_MINUS_SRC_ALPHA, t.ONE, t.ONE_MINUS_SRC_ALPHA))
                    }
                j = null,
                    k = null,
                    H = null,
                    V = null,
                    W = null,
                    X = null
            } else
                a = a || n,
                    s = s || r,
                    h = h || o,
                    n === j && a === V || (t.blendEquationSeparate(i.convert(n), i.convert(a)),
                        j = n,
                        V = a),
                    r === k && o === H && s === W && h === X || (t.blendFuncSeparate(i.convert(r), i.convert(o), i.convert(s), i.convert(h)),
                        k = r,
                        H = o,
                        W = s,
                        X = h);
            G = e,
                Y = l
        }
        function g(e, i) {
            e.side === na ? p(t.CULL_FACE) : d(t.CULL_FACE);
            var n = e.side === ia;
            i && (n = !n),
                _(n),
                !0 === e.transparent ? v(e.blending, e.blendEquation, e.blendSrc, e.blendDst, e.blendEquationAlpha, e.blendSrcAlpha, e.blendDstAlpha, e.premultipliedAlpha) : v(la),
                O.setFunc(e.depthFunc),
                O.setTest(e.depthTest),
                O.setMask(e.depthWrite),
                L.setMask(e.colorWrite),
                b(e.polygonOffset, e.polygonOffsetFactor, e.polygonOffsetUnits)
        }
        function _(e) {
            q !== e && (e ? t.frontFace(t.CW) : t.frontFace(t.CCW),
                q = e)
        }
        function y(e) {
            e !== Xo ? (d(t.CULL_FACE),
                e !== Z && (e === Yo ? t.cullFace(t.BACK) : e === qo ? t.cullFace(t.FRONT) : t.cullFace(t.FRONT_AND_BACK))) : p(t.CULL_FACE),
                Z = e
        }
        function x(e) {
            e !== J && (et && t.lineWidth(e),
                J = e)
        }
        function b(e, i, n) {
            e ? (d(t.POLYGON_OFFSET_FILL),
                K === i && Q === n || (t.polygonOffset(i, n),
                    K = i,
                    Q = n)) : p(t.POLYGON_OFFSET_FILL)
        }
        function w(e) {
            e ? d(t.SCISSOR_TEST) : p(t.SCISSOR_TEST)
        }
        function S(e) {
            void 0 === e && (e = t.TEXTURE0 + $ - 1),
                it !== e && (t.activeTexture(e),
                    it = e)
        }
        function E(e, i) {
            null === it && S();
            var n = nt[it];
            void 0 === n && (n = {
                type: void 0,
                texture: void 0
            },
                nt[it] = n),
                n.type === e && n.texture === i || (t.bindTexture(e, i || at[e]),
                    n.type = e,
                    n.texture = i)
        }
        function T() {
            try {
                t.compressedTexImage2D.apply(t, arguments)
            } catch (t) {
                console.error("THREE.WebGLState:", t)
            }
        }
        function M() {
            try {
                t.texImage2D.apply(t, arguments)
            } catch (t) {
                console.error("THREE.WebGLState:", t)
            }
        }
        function A(e) {
            !1 === rt.equals(e) && (t.scissor(e.x, e.y, e.z, e.w),
                rt.copy(e))
        }
        function P(e) {
            !1 === ot.equals(e) && (t.viewport(e.x, e.y, e.z, e.w),
                ot.copy(e))
        }
        function R() {
            for (var e = 0; e < N.length; e++)
                1 === N[e] && (t.disableVertexAttribArray(e),
                    N[e] = 0);
            B = {},
                F = null,
                it = null,
                nt = {},
                z = null,
                G = null,
                q = null,
                Z = null,
                L.reset(),
                O.reset(),
                I.reset()
        }
        var L = new n
            , O = new r
            , I = new o
            , C = t.getParameter(t.MAX_VERTEX_ATTRIBS)
            , D = new Uint8Array(C)
            , N = new Uint8Array(C)
            , U = new Uint8Array(C)
            , B = {}
            , F = null
            , z = null
            , G = null
            , j = null
            , k = null
            , H = null
            , V = null
            , W = null
            , X = null
            , Y = !1
            , q = null
            , Z = null
            , J = null
            , K = null
            , Q = null
            , $ = t.getParameter(t.MAX_COMBINED_TEXTURE_IMAGE_UNITS)
            , tt = parseFloat(/^WebGL\ ([0-9])/.exec(t.getParameter(t.VERSION))[1])
            , et = parseFloat(tt) >= 1
            , it = null
            , nt = {}
            , rt = new c
            , ot = new c
            , at = {};
        return at[t.TEXTURE_2D] = a(t.TEXTURE_2D, t.TEXTURE_2D, 1),
            at[t.TEXTURE_CUBE_MAP] = a(t.TEXTURE_CUBE_MAP, t.TEXTURE_CUBE_MAP_POSITIVE_X, 6),
            L.setClear(0, 0, 0, 1),
            O.setClear(1),
            I.setClear(0),
            d(t.DEPTH_TEST),
            O.setFunc(Da),
            _(!1),
            y(Yo),
            d(t.CULL_FACE),
            d(t.BLEND),
            v(ca),
        {
            buffers: {
                color: L,
                depth: O,
                stencil: I
            },
            initAttributes: s,
            enableAttribute: h,
            enableAttributeAndDivisor: l,
            disableUnusedAttributes: u,
            enable: d,
            disable: p,
            getCompressedTextureFormats: f,
            useProgram: m,
            setBlending: v,
            setMaterial: g,
            setFlipSided: _,
            setCullFace: y,
            setLineWidth: x,
            setPolygonOffset: b,
            setScissorTest: w,
            activeTexture: S,
            bindTexture: E,
            compressedTexImage2D: T,
            texImage2D: M,
            scissor: A,
            viewport: P,
            reset: R
        }
    }
    function ve(t, e, i) {
        function n() {
            if (void 0 !== o)
                return o;
            var i = e.get("EXT_texture_filter_anisotropic");
            return o = null !== i ? t.getParameter(i.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0
        }
        function r(e) {
            if ("highp" === e) {
                if (t.getShaderPrecisionFormat(t.VERTEX_SHADER, t.HIGH_FLOAT).precision > 0 && t.getShaderPrecisionFormat(t.FRAGMENT_SHADER, t.HIGH_FLOAT).precision > 0)
                    return "highp";
                e = "mediump"
            }
            return "mediump" === e && t.getShaderPrecisionFormat(t.VERTEX_SHADER, t.MEDIUM_FLOAT).precision > 0 && t.getShaderPrecisionFormat(t.FRAGMENT_SHADER, t.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp"
        }
        var o, a = void 0 !== i.precision ? i.precision : "highp", s = r(a);
        s !== a && (console.warn("THREE.WebGLRenderer:", a, "not supported, using", s, "instead."),
            a = s);
        var h = !0 === i.logarithmicDepthBuffer
            , l = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)
            , c = t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS)
            , u = t.getParameter(t.MAX_TEXTURE_SIZE)
            , d = t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE)
            , p = t.getParameter(t.MAX_VERTEX_ATTRIBS)
            , f = t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS)
            , m = t.getParameter(t.MAX_VARYING_VECTORS)
            , v = t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS)
            , g = c > 0
            , _ = !!e.get("OES_texture_float");
        return {
            getMaxAnisotropy: n,
            getMaxPrecision: r,
            precision: a,
            logarithmicDepthBuffer: h,
            maxTextures: l,
            maxVertexTextures: c,
            maxTextureSize: u,
            maxCubemapSize: d,
            maxAttributes: p,
            maxVertexUniforms: f,
            maxVaryings: m,
            maxFragmentUniforms: v,
            vertexTextures: g,
            floatFragmentTextures: _,
            floatVertexTextures: g && _
        }
    }
    function ge(t, e, i, n) {
        dt.call(this),
            this.type = "PerspectiveCamera",
            this.fov = void 0 !== t ? t : 50,
            this.zoom = 1,
            this.near = void 0 !== i ? i : .1,
            this.far = void 0 !== n ? n : 2e3,
            this.focus = 10,
            this.aspect = void 0 !== e ? e : 1,
            this.view = null,
            this.filmGauge = 35,
            this.filmOffset = 0,
            this.updateProjectionMatrix()
    }
    function _e(t) {
        ge.call(this),
            this.cameras = t || []
    }
    function ye(t) {
        function e() {
            if (null !== n && n.isPresenting) {
                var e = n.getEyeParameters("left")
                    , r = e.renderWidth
                    , o = e.renderHeight;
                p = t.getPixelRatio(),
                    d = t.getSize(),
                    t.setDrawingBufferSize(2 * r, o, 1)
            } else
                i.enabled && t.setDrawingBufferSize(d.width, d.height, p)
        }
        var i = this
            , n = null
            , r = null
            , a = null;
        "undefined" != typeof window && "VRFrameData" in window && (r = new window.VRFrameData);
        var s = new o
            , h = new ge;
        h.bounds = new c(0, 0, .5, 1),
            h.layers.enable(1);
        var l = new ge;
        l.bounds = new c(.5, 0, .5, 1),
            l.layers.enable(2);
        var u = new _e([h, l]);
        u.layers.enable(1),
            u.layers.enable(2);
        var d, p;
        "undefined" != typeof window && window.addEventListener("vrdisplaypresentchange", e, !1),
            this.enabled = !1,
            this.getDevice = function () {
                return n
            }
            ,
            this.setDevice = function (t) {
                void 0 !== t && (n = t)
            }
            ,
            this.setPoseTarget = function (t) {
                void 0 !== t && (a = t)
            }
            ,
            this.getCamera = function (t) {
                if (null === n)
                    return t;
                n.depthNear = t.near,
                    n.depthFar = t.far,
                    n.getFrameData(r);
                var e = r.pose
                    , i = null !== a ? a : t;
                if (null !== e.position ? i.position.fromArray(e.position) : i.position.set(0, 0, 0),
                    null !== e.orientation && i.quaternion.fromArray(e.orientation),
                    i.updateMatrixWorld(),
                    !1 === n.isPresenting)
                    return t;
                h.near = t.near,
                    l.near = t.near,
                    h.far = t.far,
                    l.far = t.far,
                    u.matrixWorld.copy(t.matrixWorld),
                    u.matrixWorldInverse.copy(t.matrixWorldInverse),
                    h.matrixWorldInverse.fromArray(r.leftViewMatrix),
                    l.matrixWorldInverse.fromArray(r.rightViewMatrix);
                var o = i.parent;
                null !== o && (s.getInverse(o.matrixWorld),
                    h.matrixWorldInverse.multiply(s),
                    l.matrixWorldInverse.multiply(s)),
                    h.matrixWorld.getInverse(h.matrixWorldInverse),
                    l.matrixWorld.getInverse(l.matrixWorldInverse),
                    h.projectionMatrix.fromArray(r.leftProjectionMatrix),
                    l.projectionMatrix.fromArray(r.rightProjectionMatrix),
                    u.projectionMatrix.copy(h.projectionMatrix);
                var c = n.getLayers();
                if (c.length) {
                    var d = c[0];
                    null !== d.leftBounds && 4 === d.leftBounds.length && h.bounds.fromArray(d.leftBounds),
                        null !== d.rightBounds && 4 === d.rightBounds.length && l.bounds.fromArray(d.rightBounds)
                }
                return u
            }
            ,
            this.submitFrame = function () {
                n && n.isPresenting && n.submitFrame()
            }
            ,
            this.dispose = function () {
                "undefined" != typeof window && window.removeEventListener("vrdisplaypresentchange", e)
            }
    }
    function xe(t) {
        var e = {};
        return {
            get: function (i) {
                if (void 0 !== e[i])
                    return e[i];
                var n;
                switch (i) {
                    case "WEBGL_depth_texture":
                        n = t.getExtension("WEBGL_depth_texture") || t.getExtension("MOZ_WEBGL_depth_texture") || t.getExtension("WEBKIT_WEBGL_depth_texture");
                        break;
                    case "EXT_texture_filter_anisotropic":
                        n = t.getExtension("EXT_texture_filter_anisotropic") || t.getExtension("MOZ_EXT_texture_filter_anisotropic") || t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                        break;
                    case "WEBGL_compressed_texture_s3tc":
                        n = t.getExtension("WEBGL_compressed_texture_s3tc") || t.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                        break;
                    case "WEBGL_compressed_texture_pvrtc":
                        n = t.getExtension("WEBGL_compressed_texture_pvrtc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                        break;
                    case "WEBGL_compressed_texture_etc1":
                        n = t.getExtension("WEBGL_compressed_texture_etc1");
                        break;
                    default:
                        n = t.getExtension(i)
                }
                return null === n && console.warn("THREE.WebGLRenderer: " + i + " extension not supported."),
                    e[i] = n,
                    n
            }
        }
    }
    function be() {
        function t() {
            c.value !== n && (c.value = n,
                c.needsUpdate = r > 0),
                i.numPlanes = r,
                i.numIntersection = 0
        }
        function e(t, e, n, r) {
            var o = null !== t ? t.length : 0
                , a = null;
            if (0 !== o) {
                if (a = c.value,
                    !0 !== r || null === a) {
                    var h = n + 4 * o
                        , u = e.matrixWorldInverse;
                    l.getNormalMatrix(u),
                        (null === a || a.length < h) && (a = new Float32Array(h));
                    for (var d = 0, p = n; d !== o; ++d,
                        p += 4)
                        s.copy(t[d]).applyMatrix4(u, l),
                            s.normal.toArray(a, p),
                            a[p + 3] = s.constant
                }
                c.value = a,
                    c.needsUpdate = !0
            }
            return i.numPlanes = o,
                a
        }
        var i = this
            , n = null
            , r = 0
            , o = !1
            , a = !1
            , s = new ot
            , l = new h
            , c = {
                value: null,
                needsUpdate: !1
            };
        this.uniform = c,
            this.numPlanes = 0,
            this.numIntersection = 0,
            this.init = function (t, i, a) {
                var s = 0 !== t.length || i || 0 !== r || o;
                return o = i,
                    n = e(t, a, 0),
                    r = t.length,
                    s
            }
            ,
            this.beginShadows = function () {
                a = !0,
                    e(null)
            }
            ,
            this.endShadows = function () {
                a = !1,
                    t()
            }
            ,
            this.setState = function (i, s, h, l, u, d) {
                if (!o || null === i || 0 === i.length || a && !h)
                    a ? e(null) : t();
                else {
                    var p = a ? 0 : r
                        , f = 4 * p
                        , m = u.clippingState || null;
                    c.value = m,
                        m = e(i, l, f, d);
                    for (var v = 0; v !== f; ++v)
                        m[v] = n[v];
                    u.clippingState = m,
                        this.numIntersection = s ? this.numPlanes : 0,
                        this.numPlanes += p
                }
            }
    }
    function we(t, e) {
        function i(i) {
            var n;
            if (i === es)
                return t.REPEAT;
            if (i === is)
                return t.CLAMP_TO_EDGE;
            if (i === ns)
                return t.MIRRORED_REPEAT;
            if (i === rs)
                return t.NEAREST;
            if (i === os)
                return t.NEAREST_MIPMAP_NEAREST;
            if (i === as)
                return t.NEAREST_MIPMAP_LINEAR;
            if (i === ss)
                return t.LINEAR;
            if (i === hs)
                return t.LINEAR_MIPMAP_NEAREST;
            if (i === ls)
                return t.LINEAR_MIPMAP_LINEAR;
            if (i === cs)
                return t.UNSIGNED_BYTE;
            if (i === _s)
                return t.UNSIGNED_SHORT_4_4_4_4;
            if (i === ys)
                return t.UNSIGNED_SHORT_5_5_5_1;
            if (i === xs)
                return t.UNSIGNED_SHORT_5_6_5;
            if (i === us)
                return t.BYTE;
            if (i === ds)
                return t.SHORT;
            if (i === ps)
                return t.UNSIGNED_SHORT;
            if (i === fs)
                return t.INT;
            if (i === ms)
                return t.UNSIGNED_INT;
            if (i === vs)
                return t.FLOAT;
            if (i === gs && null !== (n = e.get("OES_texture_half_float")))
                return n.HALF_FLOAT_OES;
            if (i === ws)
                return t.ALPHA;
            if (i === Ss)
                return t.RGB;
            if (i === Es)
                return t.RGBA;
            if (i === Ts)
                return t.LUMINANCE;
            if (i === Ms)
                return t.LUMINANCE_ALPHA;
            if (i === Ps)
                return t.DEPTH_COMPONENT;
            if (i === Rs)
                return t.DEPTH_STENCIL;
            if (i === ma)
                return t.FUNC_ADD;
            if (i === va)
                return t.FUNC_SUBTRACT;
            if (i === ga)
                return t.FUNC_REVERSE_SUBTRACT;
            if (i === xa)
                return t.ZERO;
            if (i === ba)
                return t.ONE;
            if (i === wa)
                return t.SRC_COLOR;
            if (i === Sa)
                return t.ONE_MINUS_SRC_COLOR;
            if (i === Ea)
                return t.SRC_ALPHA;
            if (i === Ta)
                return t.ONE_MINUS_SRC_ALPHA;
            if (i === Ma)
                return t.DST_ALPHA;
            if (i === Aa)
                return t.ONE_MINUS_DST_ALPHA;
            if (i === Pa)
                return t.DST_COLOR;
            if (i === Ra)
                return t.ONE_MINUS_DST_COLOR;
            if (i === La)
                return t.SRC_ALPHA_SATURATE;
            if ((i === Ls || i === Os || i === Is || i === Cs) && null !== (n = e.get("WEBGL_compressed_texture_s3tc"))) {
                if (i === Ls)
                    return n.COMPRESSED_RGB_S3TC_DXT1_EXT;
                if (i === Os)
                    return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                if (i === Is)
                    return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                if (i === Cs)
                    return n.COMPRESSED_RGBA_S3TC_DXT5_EXT
            }
            if ((i === Ds || i === Ns || i === Us || i === Bs) && null !== (n = e.get("WEBGL_compressed_texture_pvrtc"))) {
                if (i === Ds)
                    return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                if (i === Ns)
                    return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                if (i === Us)
                    return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                if (i === Bs)
                    return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
            }
            if (i === Fs && null !== (n = e.get("WEBGL_compressed_texture_etc1")))
                return n.COMPRESSED_RGB_ETC1_WEBGL;
            if ((i === _a || i === ya) && null !== (n = e.get("EXT_blend_minmax"))) {
                if (i === _a)
                    return n.MIN_EXT;
                if (i === ya)
                    return n.MAX_EXT
            }
            return i === bs && null !== (n = e.get("WEBGL_depth_texture")) ? n.UNSIGNED_INT_24_8_WEBGL : 0
        }
        return {
            convert: i
        }
    }
    function Se(t) {
        function e() {
            return null === et ? vt : 1
        }
        function i() {
            Lt = new xe(Pt),
                Lt.get("WEBGL_depth_texture"),
                Lt.get("OES_texture_float"),
                Lt.get("OES_texture_float_linear"),
                Lt.get("OES_texture_half_float"),
                Lt.get("OES_texture_half_float_linear"),
                Lt.get("OES_standard_derivatives"),
                Lt.get("OES_element_index_uint"),
                Lt.get("ANGLE_instanced_arrays"),
                ee = new we(Pt, Lt),
                Ot = new ve(Pt, Lt, t),
                It = new me(Pt, Lt, ee),
                It.scissor(ut.copy(_t).multiplyScalar(vt)),
                It.viewport(ct.copy(gt).multiplyScalar(vt)),
                Ct = new fe,
                Dt = new pe(Pt, Lt, It, Ct, Ot, ee, Mt),
                Nt = new ht(Pt),
                Ut = new qt(Pt, Nt, Mt),
                Bt = new Kt(Ut, At),
                Vt = new Wt(Pt),
                Gt = new de(Q, Lt, Ot),
                Ft = new Jt,
                jt = new Ht,
                kt = new zt(Q, It, Ut, k),
                Zt = new Yt(Pt, Lt, At),
                Qt = new Xt(Pt, Lt, At),
                $t = new K(Q, Pt, It, Dt, Ot),
                te = new $(Q, Pt, It, Dt, Ot),
                Q.info.programs = Gt.programs,
                Q.context = Pt,
                Q.capabilities = Ot,
                Q.extensions = Lt,
                Q.properties = Ct,
                Q.renderLists = jt,
                Q.state = It
        }
        function n(t) {
            t.preventDefault(),
                console.log("THREE.WebGLRenderer: Context Lost."),
                tt = !0
        }
        function r() {
            console.log("THREE.WebGLRenderer: Context Restored."),
                tt = !1,
                i()
        }
        function a(t) {
            var e = t.target;
            e.removeEventListener("dispose", a),
                h(e)
        }
        function h(t) {
            l(t),
                Ct.remove(t)
        }
        function l(t) {
            var e = Ct.get(t).program;
            t.program = void 0,
                void 0 !== e && Gt.releaseProgram(e)
        }
        function u(t, e, i) {
            t.render(function (t) {
                Q.renderBufferImmediate(t, e, i)
            })
        }
        function d(t, e, i, n) {
            if (i && i.isInstancedBufferGeometry && null === Lt.get("ANGLE_instanced_arrays"))
                return void console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            void 0 === n && (n = 0),
                It.initAttributes();
            var r = i.attributes
                , o = e.getAttributes()
                , a = t.defaultAttributeValues;
            for (var s in o) {
                var h = o[s];
                if (h >= 0) {
                    var l = r[s];
                    if (void 0 !== l) {
                        var c = l.normalized
                            , u = l.itemSize
                            , d = Nt.get(l);
                        if (void 0 === d)
                            continue;
                        var p = d.buffer
                            , f = d.type
                            , m = d.bytesPerElement;
                        if (l.isInterleavedBufferAttribute) {
                            var v = l.data
                                , g = v.stride
                                , _ = l.offset;
                            v && v.isInstancedInterleavedBuffer ? (It.enableAttributeAndDivisor(h, v.meshPerAttribute),
                                void 0 === i.maxInstancedCount && (i.maxInstancedCount = v.meshPerAttribute * v.count)) : It.enableAttribute(h),
                                Pt.bindBuffer(Pt.ARRAY_BUFFER, p),
                                Pt.vertexAttribPointer(h, u, f, c, g * m, (n * g + _) * m)
                        } else
                            l.isInstancedBufferAttribute ? (It.enableAttributeAndDivisor(h, l.meshPerAttribute),
                                void 0 === i.maxInstancedCount && (i.maxInstancedCount = l.meshPerAttribute * l.count)) : It.enableAttribute(h),
                                Pt.bindBuffer(Pt.ARRAY_BUFFER, p),
                                Pt.vertexAttribPointer(h, u, f, c, 0, n * u * m)
                    } else if (void 0 !== a) {
                        var y = a[s];
                        if (void 0 !== y)
                            switch (y.length) {
                                case 2:
                                    Pt.vertexAttrib2fv(h, y);
                                    break;
                                case 3:
                                    Pt.vertexAttrib3fv(h, y);
                                    break;
                                case 4:
                                    Pt.vertexAttrib4fv(h, y);
                                    break;
                                default:
                                    Pt.vertexAttrib1fv(h, y)
                            }
                    }
                }
            }
            It.disableUnusedAttributes()
        }
        function f() {
            if (!re) {
                var t = ie.getDevice();
                t && t.isPresenting ? t.requestAnimationFrame(m) : window.requestAnimationFrame(m),
                    re = !0
            }
        }
        function m(t) {
            null !== oe && oe(t);
            var e = ie.getDevice();
            e && e.isPresenting ? e.requestAnimationFrame(m) : window.requestAnimationFrame(m)
        }
        function v(t, e, i) {
            if (!1 !== t.visible) {
                if (t.layers.test(e.layers))
                    if (t.isLight)
                        W.push(t),
                            t.castShadow && X.push(t);
                    else if (t.isSprite)
                        t.frustumCulled && !xt.intersectsSprite(t) || Z.push(t);
                    else if (t.isLensFlare)
                        J.push(t);
                    else if (t.isImmediateRenderObject)
                        i && Tt.setFromMatrixPosition(t.matrixWorld).applyMatrix4(Et),
                            Y.push(t, null, t.material, Tt.z, null);
                    else if ((t.isMesh || t.isLine || t.isPoints) && (t.isSkinnedMesh && t.skeleton.update(),
                        !t.frustumCulled || xt.intersectsObject(t))) {
                        i && Tt.setFromMatrixPosition(t.matrixWorld).applyMatrix4(Et);
                        var n = Bt.update(t)
                            , r = t.material;
                        if (Array.isArray(r))
                            for (var o = n.groups, a = 0, s = o.length; a < s; a++) {
                                var h = o[a]
                                    , l = r[h.materialIndex];
                                l && l.visible && Y.push(t, n, l, Tt.z, h)
                            }
                        else
                            r.visible && Y.push(t, n, r, Tt.z, null)
                    }
                for (var c = t.children, a = 0, s = c.length; a < s; a++)
                    v(c[a], e, i)
            }
        }
        function g(t, e, i, n) {
            for (var r = 0, o = t.length; r < o; r++) {
                var a = t[r]
                    , s = a.object
                    , h = a.geometry
                    , l = void 0 === n ? a.material : n
                    , c = a.group;
                if (i.isArrayCamera) {
                    lt = i;
                    for (var u = i.cameras, d = 0, p = u.length; d < p; d++) {
                        var f = u[d];
                        if (s.layers.test(f.layers)) {
                            var m = f.bounds
                                , v = m.x * ft
                                , g = m.y * mt
                                , y = m.z * ft
                                , x = m.w * mt;
                            It.viewport(ct.set(v, g, y, x).multiplyScalar(vt)),
                                _(s, e, f, h, l, c)
                        }
                    }
                } else
                    lt = null,
                        _(s, e, i, h, l, c)
            }
        }
        function _(t, e, i, n, r, o) {
            if (t.onBeforeRender(Q, e, i, n, r, o),
                t.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse, t.matrixWorld),
                t.normalMatrix.getNormalMatrix(t.modelViewMatrix),
                t.isImmediateRenderObject) {
                var a = t.isMesh && t.matrixWorld.determinant() < 0;
                It.setMaterial(r, a);
                var s = x(i, e.fog, r, t);
                rt = "",
                    u(t, s, r)
            } else
                Q.renderBufferDirect(i, e.fog, n, r, t, o);
            t.onAfterRender(Q, e, i, n, r, o)
        }
        function y(t, e, i) {
            var n = Ct.get(t)
                , r = Gt.getParameters(t, Ft.state, X, e, bt.numPlanes, bt.numIntersection, i)
                , o = Gt.getProgramCode(t, r)
                , s = n.program
                , h = !0;
            if (void 0 === s)
                t.addEventListener("dispose", a);
            else if (s.code !== o)
                l(t);
            else {
                if (void 0 !== r.shaderID)
                    return;
                h = !1
            }
            if (h) {
                if (r.shaderID) {
                    var c = xh[r.shaderID];
                    n.shader = {
                        name: t.type,
                        uniforms: _h.clone(c.uniforms),
                        vertexShader: c.vertexShader,
                        fragmentShader: c.fragmentShader
                    }
                } else
                    n.shader = {
                        name: t.type,
                        uniforms: t.uniforms,
                        vertexShader: t.vertexShader,
                        fragmentShader: t.fragmentShader
                    };
                t.onBeforeCompile(n.shader),
                    s = Gt.acquireProgram(t, n.shader, r, o),
                    n.program = s,
                    t.program = s
            }
            var u = s.getAttributes();
            if (t.morphTargets) {
                t.numSupportedMorphTargets = 0;
                for (var d = 0; d < Q.maxMorphTargets; d++)
                    u["morphTarget" + d] >= 0 && t.numSupportedMorphTargets++
            }
            if (t.morphNormals) {
                t.numSupportedMorphNormals = 0;
                for (var d = 0; d < Q.maxMorphNormals; d++)
                    u["morphNormal" + d] >= 0 && t.numSupportedMorphNormals++
            }
            var p = n.shader.uniforms;
            (t.isShaderMaterial || t.isRawShaderMaterial) && !0 !== t.clipping || (n.numClippingPlanes = bt.numPlanes,
                n.numIntersection = bt.numIntersection,
                p.clippingPlanes = bt.uniform),
                n.fog = e,
                n.lightsHash = Ft.state.hash,
                t.lights && (p.ambientLightColor.value = Ft.state.ambient,
                    p.directionalLights.value = Ft.state.directional,
                    p.spotLights.value = Ft.state.spot,
                    p.rectAreaLights.value = Ft.state.rectArea,
                    p.pointLights.value = Ft.state.point,
                    p.hemisphereLights.value = Ft.state.hemi,
                    p.directionalShadowMap.value = Ft.state.directionalShadowMap,
                    p.directionalShadowMatrix.value = Ft.state.directionalShadowMatrix,
                    p.spotShadowMap.value = Ft.state.spotShadowMap,
                    p.spotShadowMatrix.value = Ft.state.spotShadowMatrix,
                    p.pointShadowMap.value = Ft.state.pointShadowMap,
                    p.pointShadowMatrix.value = Ft.state.pointShadowMatrix);
            var f = n.program.getUniforms()
                , m = q.seqWithValue(f.seq, p);
            n.uniformsList = m
        }
        function x(t, e, i, n) {
            pt = 0;
            var r = Ct.get(i);
            if (wt && (St || t !== ot)) {
                var o = t === ot && i.id === nt;
                bt.setState(i.clippingPlanes, i.clipIntersection, i.clipShadows, t, r, o)
            }
            !1 === i.needsUpdate && (void 0 === r.program ? i.needsUpdate = !0 : i.fog && r.fog !== e ? i.needsUpdate = !0 : i.lights && r.lightsHash !== Ft.state.hash ? i.needsUpdate = !0 : void 0 === r.numClippingPlanes || r.numClippingPlanes === bt.numPlanes && r.numIntersection === bt.numIntersection || (i.needsUpdate = !0)),
                i.needsUpdate && (y(i, e, n),
                    i.needsUpdate = !1);
            var a = !1
                , s = !1
                , h = !1
                , l = r.program
                , c = l.getUniforms()
                , u = r.shader.uniforms;
            if (It.useProgram(l.program) && (a = !0,
                s = !0,
                h = !0),
                i.id !== nt && (nt = i.id,
                    s = !0),
                a || t !== ot) {
                if (c.setValue(Pt, "projectionMatrix", t.projectionMatrix),
                    Ot.logarithmicDepthBuffer && c.setValue(Pt, "logDepthBufFC", 2 / (Math.log(t.far + 1) / Math.LN2)),
                    ot !== (lt || t) && (ot = lt || t,
                        s = !0,
                        h = !0),
                    i.isShaderMaterial || i.isMeshPhongMaterial || i.isMeshStandardMaterial || i.envMap) {
                    var d = c.map.cameraPosition;
                    void 0 !== d && d.setValue(Pt, Tt.setFromMatrixPosition(t.matrixWorld))
                }
                (i.isMeshPhongMaterial || i.isMeshLambertMaterial || i.isMeshBasicMaterial || i.isMeshStandardMaterial || i.isShaderMaterial || i.skinning) && c.setValue(Pt, "viewMatrix", t.matrixWorldInverse)
            }
            if (i.skinning) {
                c.setOptional(Pt, n, "bindMatrix"),
                    c.setOptional(Pt, n, "bindMatrixInverse");
                var f = n.skeleton;
                if (f) {
                    var m = f.bones;
                    if (Ot.floatVertexTextures) {
                        if (void 0 === f.boneTexture) {
                            var v = Math.sqrt(4 * m.length);
                            v = sh.ceilPowerOfTwo(v),
                                v = Math.max(v, 4);
                            var g = new Float32Array(v * v * 4);
                            g.set(f.boneMatrices);
                            var _ = new p(g, v, v, Es, vs);
                            f.boneMatrices = g,
                                f.boneTexture = _,
                                f.boneTextureSize = v
                        }
                        c.setValue(Pt, "boneTexture", f.boneTexture),
                            c.setValue(Pt, "boneTextureSize", f.boneTextureSize)
                    } else
                        c.setOptional(Pt, f, "boneMatrices")
                }
            }
            return s && (c.setValue(Pt, "toneMappingExposure", Q.toneMappingExposure),
                c.setValue(Pt, "toneMappingWhitePoint", Q.toneMappingWhitePoint),
                i.lights && D(u, h),
                e && i.fog && T(u, e),
                i.isMeshBasicMaterial ? b(u, i) : i.isMeshLambertMaterial ? (b(u, i),
                    M(u, i)) : i.isMeshPhongMaterial ? (b(u, i),
                        i.isMeshToonMaterial ? P(u, i) : A(u, i)) : i.isMeshStandardMaterial ? (b(u, i),
                            i.isMeshPhysicalMaterial ? L(u, i) : R(u, i)) : i.isMeshDepthMaterial ? (b(u, i),
                                O(u, i)) : i.isMeshDistanceMaterial ? (b(u, i),
                                    I(u, i)) : i.isMeshNormalMaterial ? (b(u, i),
                                        C(u, i)) : i.isLineBasicMaterial ? (w(u, i),
                                            i.isLineDashedMaterial && S(u, i)) : i.isPointsMaterial ? E(u, i) : i.isShadowMaterial && (u.color.value = i.color,
                                                u.opacity.value = i.opacity),
                void 0 !== u.ltcMat && (u.ltcMat.value = gh.LTC_MAT_TEXTURE),
                void 0 !== u.ltcMag && (u.ltcMag.value = gh.LTC_MAG_TEXTURE),
                q.upload(Pt, r.uniformsList, u, Q)),
                c.setValue(Pt, "modelViewMatrix", n.modelViewMatrix),
                c.setValue(Pt, "normalMatrix", n.normalMatrix),
                c.setValue(Pt, "modelMatrix", n.matrixWorld),
                l
        }
        function b(t, e) {
            t.opacity.value = e.opacity,
                e.color && (t.diffuse.value = e.color),
                e.emissive && t.emissive.value.copy(e.emissive).multiplyScalar(e.emissiveIntensity),
                e.map && (t.map.value = e.map),
                e.alphaMap && (t.alphaMap.value = e.alphaMap),
                e.specularMap && (t.specularMap.value = e.specularMap),
                e.envMap && (t.envMap.value = e.envMap,
                    t.flipEnvMap.value = e.envMap && e.envMap.isCubeTexture ? -1 : 1,
                    t.reflectivity.value = e.reflectivity,
                    t.refractionRatio.value = e.refractionRatio),
                e.lightMap && (t.lightMap.value = e.lightMap,
                    t.lightMapIntensity.value = e.lightMapIntensity),
                e.aoMap && (t.aoMap.value = e.aoMap,
                    t.aoMapIntensity.value = e.aoMapIntensity);
            var i;
            if (e.map ? i = e.map : e.specularMap ? i = e.specularMap : e.displacementMap ? i = e.displacementMap : e.normalMap ? i = e.normalMap : e.bumpMap ? i = e.bumpMap : e.roughnessMap ? i = e.roughnessMap : e.metalnessMap ? i = e.metalnessMap : e.alphaMap ? i = e.alphaMap : e.emissiveMap && (i = e.emissiveMap),
                void 0 !== i) {
                if (i.isWebGLRenderTarget && (i = i.texture),
                    !0 === i.matrixAutoUpdate) {
                    var n = i.offset
                        , r = i.repeat
                        , o = i.rotation
                        , a = i.center;
                    i.matrix.setUvTransform(n.x, n.y, r.x, r.y, o, a.x, a.y)
                }
                t.uvTransform.value.copy(i.matrix)
            }
        }
        function w(t, e) {
            t.diffuse.value = e.color,
                t.opacity.value = e.opacity
        }
        function S(t, e) {
            t.dashSize.value = e.dashSize,
                t.totalSize.value = e.dashSize + e.gapSize,
                t.scale.value = e.scale
        }
        function E(t, e) {
            if (t.diffuse.value = e.color,
                t.opacity.value = e.opacity,
                t.size.value = e.size * vt,
                t.scale.value = .5 * mt,
                t.map.value = e.map,
                null !== e.map) {
                if (!0 === e.map.matrixAutoUpdate) {
                    var i = e.map.offset
                        , n = e.map.repeat
                        , r = e.map.rotation
                        , o = e.map.center;
                    e.map.matrix.setUvTransform(i.x, i.y, n.x, n.y, r, o.x, o.y)
                }
                t.uvTransform.value.copy(e.map.matrix)
            }
        }
        function T(t, e) {
            t.fogColor.value = e.color,
                e.isFog ? (t.fogNear.value = e.near,
                    t.fogFar.value = e.far) : e.isFogExp2 && (t.fogDensity.value = e.density)
        }
        function M(t, e) {
            e.emissiveMap && (t.emissiveMap.value = e.emissiveMap)
        }
        function A(t, e) {
            t.specular.value = e.specular,
                t.shininess.value = Math.max(e.shininess, 1e-4),
                e.emissiveMap && (t.emissiveMap.value = e.emissiveMap),
                e.bumpMap && (t.bumpMap.value = e.bumpMap,
                    t.bumpScale.value = e.bumpScale),
                e.normalMap && (t.normalMap.value = e.normalMap,
                    t.normalScale.value.copy(e.normalScale)),
                e.displacementMap && (t.displacementMap.value = e.displacementMap,
                    t.displacementScale.value = e.displacementScale,
                    t.displacementBias.value = e.displacementBias)
        }
        function P(t, e) {
            A(t, e),
                e.gradientMap && (t.gradientMap.value = e.gradientMap)
        }
        function R(t, e) {
            t.roughness.value = e.roughness,
                t.metalness.value = e.metalness,
                e.roughnessMap && (t.roughnessMap.value = e.roughnessMap),
                e.metalnessMap && (t.metalnessMap.value = e.metalnessMap),
                e.emissiveMap && (t.emissiveMap.value = e.emissiveMap),
                e.bumpMap && (t.bumpMap.value = e.bumpMap,
                    t.bumpScale.value = e.bumpScale),
                e.normalMap && (t.normalMap.value = e.normalMap,
                    t.normalScale.value.copy(e.normalScale)),
                e.displacementMap && (t.displacementMap.value = e.displacementMap,
                    t.displacementScale.value = e.displacementScale,
                    t.displacementBias.value = e.displacementBias),
                e.envMap && (t.envMapIntensity.value = e.envMapIntensity)
        }
        function L(t, e) {
            t.clearCoat.value = e.clearCoat,
                t.clearCoatRoughness.value = e.clearCoatRoughness,
                R(t, e)
        }
        function O(t, e) {
            e.displacementMap && (t.displacementMap.value = e.displacementMap,
                t.displacementScale.value = e.displacementScale,
                t.displacementBias.value = e.displacementBias)
        }
        function I(t, e) {
            e.displacementMap && (t.displacementMap.value = e.displacementMap,
                t.displacementScale.value = e.displacementScale,
                t.displacementBias.value = e.displacementBias),
                t.referencePosition.value.copy(e.referencePosition),
                t.nearDistance.value = e.nearDistance,
                t.farDistance.value = e.farDistance
        }
        function C(t, e) {
            e.bumpMap && (t.bumpMap.value = e.bumpMap,
                t.bumpScale.value = e.bumpScale),
                e.normalMap && (t.normalMap.value = e.normalMap,
                    t.normalScale.value.copy(e.normalScale)),
                e.displacementMap && (t.displacementMap.value = e.displacementMap,
                    t.displacementScale.value = e.displacementScale,
                    t.displacementBias.value = e.displacementBias)
        }
        function D(t, e) {
            t.ambientLightColor.needsUpdate = e,
                t.directionalLights.needsUpdate = e,
                t.pointLights.needsUpdate = e,
                t.spotLights.needsUpdate = e,
                t.rectAreaLights.needsUpdate = e,
                t.hemisphereLights.needsUpdate = e
        }
        function N() {
            var t = pt;
            return t >= Ot.maxTextures && console.warn("THREE.WebGLRenderer: Trying to use " + t + " texture units while this GPU supports only " + Ot.maxTextures),
                pt += 1,
                t
        }
        console.log("THREE.WebGLRenderer", Vo),
            t = t || {};
        var U = void 0 !== t.canvas ? t.canvas : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas")
            , B = void 0 !== t.context ? t.context : null
            , F = void 0 !== t.alpha && t.alpha
            , z = void 0 === t.depth || t.depth
            , G = void 0 === t.stencil || t.stencil
            , j = void 0 !== t.antialias && t.antialias
            , k = void 0 === t.premultipliedAlpha || t.premultipliedAlpha
            , H = void 0 !== t.preserveDrawingBuffer && t.preserveDrawingBuffer
            , V = void 0 !== t.powerPreference ? t.powerPreference : "default"
            , W = []
            , X = []
            , Y = null
            , Z = []
            , J = [];
        this.domElement = U,
            this.context = null,
            this.autoClear = !0,
            this.autoClearColor = !0,
            this.autoClearDepth = !0,
            this.autoClearStencil = !0,
            this.sortObjects = !0,
            this.clippingPlanes = [],
            this.localClippingEnabled = !1,
            this.gammaFactor = 2,
            this.gammaInput = !1,
            this.gammaOutput = !1,
            this.physicallyCorrectLights = !1,
            this.toneMapping = Ha,
            this.toneMappingExposure = 1,
            this.toneMappingWhitePoint = 1,
            this.maxMorphTargets = 8,
            this.maxMorphNormals = 4;
        var Q = this
            , tt = !1
            , et = null
            , it = null
            , nt = -1
            , rt = ""
            , ot = null
            , lt = null
            , ct = new c
            , ut = new c
            , dt = null
            , pt = 0
            , ft = U.width
            , mt = U.height
            , vt = 1
            , gt = new c(0, 0, ft, mt)
            , _t = new c(0, 0, ft, mt)
            , yt = !1
            , xt = new at
            , bt = new be
            , wt = !1
            , St = !1
            , Et = new o
            , Tt = new s
            , Mt = {
                geometries: 0,
                textures: 0
            }
            , At = {
                frame: 0,
                calls: 0,
                vertices: 0,
                faces: 0,
                points: 0
            };
        this.info = {
            render: At,
            memory: Mt,
            programs: null
        };
        var Pt;
        try {
            var Rt = {
                alpha: F,
                depth: z,
                stencil: G,
                antialias: j,
                premultipliedAlpha: k,
                preserveDrawingBuffer: H,
                powerPreference: V
            };
            if (U.addEventListener("webglcontextlost", n, !1),
                U.addEventListener("webglcontextrestored", r, !1),
                null === (Pt = B || U.getContext("webgl", Rt) || U.getContext("experimental-webgl", Rt)))
                throw null !== U.getContext("webgl") ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
            void 0 === Pt.getShaderPrecisionFormat && (Pt.getShaderPrecisionFormat = function () {
                return {
                    rangeMin: 1,
                    rangeMax: 1,
                    precision: 1
                }
            }
            )
        } catch (t) {
            console.error("THREE.WebGLRenderer: " + t.message)
        }
        var Lt, Ot, It, Ct, Dt, Nt, Ut, Bt, Ft, Gt, jt, kt, Vt, Zt, Qt, $t, te, ee;
        i();
        var ie = new ye(Q);
        this.vr = ie;
        var ne = new st(Q, Bt, Ot.maxTextureSize);
        this.shadowMap = ne,
            this.getContext = function () {
                return Pt
            }
            ,
            this.getContextAttributes = function () {
                return Pt.getContextAttributes()
            }
            ,
            this.forceContextLoss = function () {
                var t = Lt.get("WEBGL_lose_context");
                t && t.loseContext()
            }
            ,
            this.forceContextRestore = function () {
                var t = Lt.get("WEBGL_lose_context");
                t && t.restoreContext()
            }
            ,
            this.getPixelRatio = function () {
                return vt
            }
            ,
            this.setPixelRatio = function (t) {
                void 0 !== t && (vt = t,
                    this.setSize(ft, mt, !1))
            }
            ,
            this.getSize = function () {
                return {
                    width: ft,
                    height: mt
                }
            }
            ,
            this.setSize = function (t, e, i) {
                var n = ie.getDevice();
                if (n && n.isPresenting)
                    return void console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
                ft = t,
                    mt = e,
                    U.width = t * vt,
                    U.height = e * vt,
                    !1 !== i && (U.style.width = t + "px",
                        U.style.height = e + "px"),
                    this.setViewport(0, 0, t, e)
            }
            ,
            this.getDrawingBufferSize = function () {
                return {
                    width: ft * vt,
                    height: mt * vt
                }
            }
            ,
            this.setDrawingBufferSize = function (t, e, i) {
                ft = t,
                    mt = e,
                    vt = i,
                    U.width = t * i,
                    U.height = e * i,
                    this.setViewport(0, 0, t, e)
            }
            ,
            this.setViewport = function (t, e, i, n) {
                gt.set(t, mt - e - n, i, n),
                    It.viewport(ct.copy(gt).multiplyScalar(vt))
            }
            ,
            this.setScissor = function (t, e, i, n) {
                _t.set(t, mt - e - n, i, n),
                    It.scissor(ut.copy(_t).multiplyScalar(vt))
            }
            ,
            this.setScissorTest = function (t) {
                It.setScissorTest(yt = t)
            }
            ,
            this.getClearColor = function () {
                return kt.getClearColor()
            }
            ,
            this.setClearColor = function () {
                kt.setClearColor.apply(kt, arguments)
            }
            ,
            this.getClearAlpha = function () {
                return kt.getClearAlpha()
            }
            ,
            this.setClearAlpha = function () {
                kt.setClearAlpha.apply(kt, arguments)
            }
            ,
            this.clear = function (t, e, i) {
                var n = 0;
                (void 0 === t || t) && (n |= Pt.COLOR_BUFFER_BIT),
                    (void 0 === e || e) && (n |= Pt.DEPTH_BUFFER_BIT),
                    (void 0 === i || i) && (n |= Pt.STENCIL_BUFFER_BIT),
                    Pt.clear(n)
            }
            ,
            this.clearColor = function () {
                this.clear(!0, !1, !1)
            }
            ,
            this.clearDepth = function () {
                this.clear(!1, !0, !1)
            }
            ,
            this.clearStencil = function () {
                this.clear(!1, !1, !0)
            }
            ,
            this.clearTarget = function (t, e, i, n) {
                this.setRenderTarget(t),
                    this.clear(e, i, n)
            }
            ,
            this.dispose = function () {
                U.removeEventListener("webglcontextlost", n, !1),
                    U.removeEventListener("webglcontextrestored", r, !1),
                    jt.dispose(),
                    ie.dispose()
            }
            ,
            this.renderBufferImmediate = function (t, e, i) {
                It.initAttributes();
                var n = Ct.get(t);
                t.hasPositions && !n.position && (n.position = Pt.createBuffer()),
                    t.hasNormals && !n.normal && (n.normal = Pt.createBuffer()),
                    t.hasUvs && !n.uv && (n.uv = Pt.createBuffer()),
                    t.hasColors && !n.color && (n.color = Pt.createBuffer());
                var r = e.getAttributes();
                if (t.hasPositions && (Pt.bindBuffer(Pt.ARRAY_BUFFER, n.position),
                    Pt.bufferData(Pt.ARRAY_BUFFER, t.positionArray, Pt.DYNAMIC_DRAW),
                    It.enableAttribute(r.position),
                    Pt.vertexAttribPointer(r.position, 3, Pt.FLOAT, !1, 0, 0)),
                    t.hasNormals) {
                    if (Pt.bindBuffer(Pt.ARRAY_BUFFER, n.normal),
                        !i.isMeshPhongMaterial && !i.isMeshStandardMaterial && !i.isMeshNormalMaterial && !0 === i.flatShading)
                        for (var o = 0, a = 3 * t.count; o < a; o += 9) {
                            var s = t.normalArray
                                , h = (s[o + 0] + s[o + 3] + s[o + 6]) / 3
                                , l = (s[o + 1] + s[o + 4] + s[o + 7]) / 3
                                , c = (s[o + 2] + s[o + 5] + s[o + 8]) / 3;
                            s[o + 0] = h,
                                s[o + 1] = l,
                                s[o + 2] = c,
                                s[o + 3] = h,
                                s[o + 4] = l,
                                s[o + 5] = c,
                                s[o + 6] = h,
                                s[o + 7] = l,
                                s[o + 8] = c
                        }
                    Pt.bufferData(Pt.ARRAY_BUFFER, t.normalArray, Pt.DYNAMIC_DRAW),
                        It.enableAttribute(r.normal),
                        Pt.vertexAttribPointer(r.normal, 3, Pt.FLOAT, !1, 0, 0)
                }
                t.hasUvs && i.map && (Pt.bindBuffer(Pt.ARRAY_BUFFER, n.uv),
                    Pt.bufferData(Pt.ARRAY_BUFFER, t.uvArray, Pt.DYNAMIC_DRAW),
                    It.enableAttribute(r.uv),
                    Pt.vertexAttribPointer(r.uv, 2, Pt.FLOAT, !1, 0, 0)),
                    t.hasColors && i.vertexColors !== aa && (Pt.bindBuffer(Pt.ARRAY_BUFFER, n.color),
                        Pt.bufferData(Pt.ARRAY_BUFFER, t.colorArray, Pt.DYNAMIC_DRAW),
                        It.enableAttribute(r.color),
                        Pt.vertexAttribPointer(r.color, 3, Pt.FLOAT, !1, 0, 0)),
                    It.disableUnusedAttributes(),
                    Pt.drawArrays(Pt.TRIANGLES, 0, t.count),
                    t.count = 0
            }
            ,
            this.renderBufferDirect = function (t, i, n, r, o, a) {
                var s = o.isMesh && o.matrixWorld.determinant() < 0;
                It.setMaterial(r, s);
                var h = x(t, i, r, o)
                    , l = n.id + "_" + h.id + "_" + (!0 === r.wireframe)
                    , c = !1;
                l !== rt && (rt = l,
                    c = !0),
                    o.morphTargetInfluences && (Vt.update(o, n, r, h),
                        c = !0);
                var u = n.index
                    , p = n.attributes.position
                    , f = 1;
                !0 === r.wireframe && (u = Ut.getWireframeAttribute(n),
                    f = 2);
                var m, v = Zt;
                null !== u && (m = Nt.get(u),
                    v = Qt,
                    v.setIndex(m)),
                    c && (d(r, h, n),
                        null !== u && Pt.bindBuffer(Pt.ELEMENT_ARRAY_BUFFER, m.buffer));
                var g = 0;
                null !== u ? g = u.count : void 0 !== p && (g = p.count);
                var _ = n.drawRange.start * f
                    , y = n.drawRange.count * f
                    , b = null !== a ? a.start * f : 0
                    , w = null !== a ? a.count * f : 1 / 0
                    , S = Math.max(_, b)
                    , E = Math.min(g, _ + y, b + w) - 1
                    , T = Math.max(0, E - S + 1);
                if (0 !== T) {
                    if (o.isMesh)
                        if (!0 === r.wireframe)
                            It.setLineWidth(r.wireframeLinewidth * e()),
                                v.setMode(Pt.LINES);
                        else
                            switch (o.drawMode) {
                                case qs:
                                    v.setMode(Pt.TRIANGLES);
                                    break;
                                case Zs:
                                    v.setMode(Pt.TRIANGLE_STRIP);
                                    break;
                                case Js:
                                    v.setMode(Pt.TRIANGLE_FAN)
                            }
                    else if (o.isLine) {
                        var M = r.linewidth;
                        void 0 === M && (M = 1),
                            It.setLineWidth(M * e()),
                            o.isLineSegments ? v.setMode(Pt.LINES) : o.isLineLoop ? v.setMode(Pt.LINE_LOOP) : v.setMode(Pt.LINE_STRIP)
                    } else
                        o.isPoints && v.setMode(Pt.POINTS);
                    n && n.isInstancedBufferGeometry ? n.maxInstancedCount > 0 && v.renderInstances(n, S, T) : v.render(S, T)
                }
            }
            ,
            this.compile = function (t, e) {
                W.length = 0,
                    X.length = 0,
                    t.traverse(function (t) {
                        t.isLight && (W.push(t),
                            t.castShadow && X.push(t))
                    }),
                    Ft.setup(W, X, e),
                    t.traverse(function (e) {
                        if (e.material)
                            if (Array.isArray(e.material))
                                for (var i = 0; i < e.material.length; i++)
                                    y(e.material[i], t.fog, e);
                            else
                                y(e.material, t.fog, e)
                    })
            }
            ;
        var re = !1
            , oe = null;
        this.animate = function (t) {
            oe = t,
                f()
        }
            ,
            this.render = function (t, e, i, n) {
                if (!e || !e.isCamera)
                    return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
                if (!tt) {
                    rt = "",
                        nt = -1,
                        ot = null,
                        !0 === t.autoUpdate && t.updateMatrixWorld(),
                        null === e.parent && e.updateMatrixWorld(),
                        ie.enabled && (e = ie.getCamera(e)),
                        Et.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse),
                        xt.setFromMatrix(Et),
                        W.length = 0,
                        X.length = 0,
                        Z.length = 0,
                        J.length = 0,
                        St = this.localClippingEnabled,
                        wt = bt.init(this.clippingPlanes, St, e),
                        Y = jt.get(t, e),
                        Y.init(),
                        v(t, e, Q.sortObjects),
                        !0 === Q.sortObjects && Y.sort(),
                        Dt.updateVideoTextures(),
                        wt && bt.beginShadows(),
                        ne.render(X, t, e),
                        Ft.setup(W, X, e),
                        wt && bt.endShadows(),
                        At.frame++,
                        At.calls = 0,
                        At.vertices = 0,
                        At.faces = 0,
                        At.points = 0,
                        void 0 === i && (i = null),
                        this.setRenderTarget(i),
                        kt.render(Y, t, e, n);
                    var r = Y.opaque
                        , o = Y.transparent;
                    if (t.overrideMaterial) {
                        var a = t.overrideMaterial;
                        r.length && g(r, t, e, a),
                            o.length && g(o, t, e, a)
                    } else
                        r.length && g(r, t, e),
                            o.length && g(o, t, e);
                    te.render(Z, t, e),
                        $t.render(J, t, e, ct),
                        i && Dt.updateRenderTargetMipmap(i),
                        It.buffers.depth.setTest(!0),
                        It.buffers.depth.setMask(!0),
                        It.buffers.color.setMask(!0),
                        It.setPolygonOffset(!1),
                        ie.enabled && ie.submitFrame()
                }
            }
            ,
            this.setFaceCulling = function (t, e) {
                It.setCullFace(t),
                    It.setFlipSided(e === Jo)
            }
            ,
            this.allocTextureUnit = N,
            this.setTexture2D = function () {
                var t = !1;
                return function (e, i) {
                    e && e.isWebGLRenderTarget && (t || (console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."),
                        t = !0),
                        e = e.texture),
                        Dt.setTexture2D(e, i)
                }
            }(),
            this.setTexture = function () {
                var t = !1;
                return function (e, i) {
                    t || (console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."),
                        t = !0),
                        Dt.setTexture2D(e, i)
                }
            }(),
            this.setTextureCube = function () {
                var t = !1;
                return function (e, i) {
                    e && e.isWebGLRenderTargetCube && (t || (console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."),
                        t = !0),
                        e = e.texture),
                        e && e.isCubeTexture || Array.isArray(e.image) && 6 === e.image.length ? Dt.setTextureCube(e, i) : Dt.setTextureCubeDynamic(e, i)
                }
            }(),
            this.getRenderTarget = function () {
                return et
            }
            ,
            this.setRenderTarget = function (t) {
                et = t,
                    t && void 0 === Ct.get(t).__webglFramebuffer && Dt.setupRenderTarget(t);
                var e = null
                    , i = !1;
                if (t) {
                    var n = Ct.get(t).__webglFramebuffer;
                    t.isWebGLRenderTargetCube ? (e = n[t.activeCubeFace],
                        i = !0) : e = n,
                        ct.copy(t.viewport),
                        ut.copy(t.scissor),
                        dt = t.scissorTest
                } else
                    ct.copy(gt).multiplyScalar(vt),
                        ut.copy(_t).multiplyScalar(vt),
                        dt = yt;
                if (it !== e && (Pt.bindFramebuffer(Pt.FRAMEBUFFER, e),
                    it = e),
                    It.viewport(ct),
                    It.scissor(ut),
                    It.setScissorTest(dt),
                    i) {
                    var r = Ct.get(t.texture);
                    Pt.framebufferTexture2D(Pt.FRAMEBUFFER, Pt.COLOR_ATTACHMENT0, Pt.TEXTURE_CUBE_MAP_POSITIVE_X + t.activeCubeFace, r.__webglTexture, t.activeMipMapLevel)
                }
            }
            ,
            this.readRenderTargetPixels = function (t, e, i, n, r, o) {
                if (!t || !t.isWebGLRenderTarget)
                    return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
                var a = Ct.get(t).__webglFramebuffer;
                if (a) {
                    var s = !1;
                    a !== it && (Pt.bindFramebuffer(Pt.FRAMEBUFFER, a),
                        s = !0);
                    try {
                        var h = t.texture
                            , l = h.format
                            , c = h.type;
                        if (l !== Es && ee.convert(l) !== Pt.getParameter(Pt.IMPLEMENTATION_COLOR_READ_FORMAT))
                            return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                        if (!(c === cs || ee.convert(c) === Pt.getParameter(Pt.IMPLEMENTATION_COLOR_READ_TYPE) || c === vs && (Lt.get("OES_texture_float") || Lt.get("WEBGL_color_buffer_float")) || c === gs && Lt.get("EXT_color_buffer_half_float")))
                            return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                        Pt.checkFramebufferStatus(Pt.FRAMEBUFFER) === Pt.FRAMEBUFFER_COMPLETE ? e >= 0 && e <= t.width - n && i >= 0 && i <= t.height - r && Pt.readPixels(e, i, n, r, ee.convert(l), ee.convert(c), o) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")
                    } finally {
                        s && Pt.bindFramebuffer(Pt.FRAMEBUFFER, it)
                    }
                }
            }
    }
    function Ee(t, e) {
        this.name = "",
            this.color = new Z(t),
            this.density = void 0 !== e ? e : 25e-5
    }
    function Te(t, e, i) {
        this.name = "",
            this.color = new Z(t),
            this.near = void 0 !== e ? e : 1,
            this.far = void 0 !== i ? i : 1e3
    }
    function Me() {
        ut.call(this),
            this.type = "Scene",
            this.background = null,
            this.fog = null,
            this.overrideMaterial = null,
            this.autoUpdate = !0
    }
    function Ae(t, e, i, n, r) {
        ut.call(this),
            this.lensFlares = [],
            this.positionScreen = new s,
            this.customUpdateCallback = void 0,
            void 0 !== t && this.add(t, e, i, n, r)
    }
    function Pe(t) {
        tt.call(this),
            this.type = "SpriteMaterial",
            this.color = new Z(16777215),
            this.map = null,
            this.rotation = 0,
            this.fog = !1,
            this.lights = !1,
            this.setValues(t)
    }
    function Re(t) {
        ut.call(this),
            this.type = "Sprite",
            this.material = void 0 !== t ? t : new Pe
    }
    function Le() {
        ut.call(this),
            this.type = "LOD",
            Object.defineProperties(this, {
                levels: {
                    enumerable: !0,
                    value: []
                }
            })
    }
    function Oe(t, e) {
        if (t = t || [],
            this.bones = t.slice(0),
            this.boneMatrices = new Float32Array(16 * this.bones.length),
            void 0 === e)
            this.calculateInverses();
        else if (this.bones.length === e.length)
            this.boneInverses = e.slice(0);
        else {
            console.warn("THREE.Skeleton boneInverses is the wrong length."),
                this.boneInverses = [];
            for (var i = 0, n = this.bones.length; i < n; i++)
                this.boneInverses.push(new o)
        }
    }
    function Ie() {
        ut.call(this),
            this.type = "Bone"
    }
    function Ce(t, e) {
        Ft.call(this, t, e),
            this.type = "SkinnedMesh",
            this.bindMode = "attached",
            this.bindMatrix = new o,
            this.bindMatrixInverse = new o;
        var i = this.initBones()
            , n = new Oe(i);
        this.bind(n, this.matrixWorld),
            this.normalizeSkinWeights()
    }
    function De(t) {
        tt.call(this),
            this.type = "LineBasicMaterial",
            this.color = new Z(16777215),
            this.linewidth = 1,
            this.linecap = "round",
            this.linejoin = "round",
            this.lights = !1,
            this.setValues(t)
    }
    function Ne(t, e, i) {
        if (1 === i)
            return console.warn("THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead."),
                new Ue(t, e);
        ut.call(this),
            this.type = "Line",
            this.geometry = void 0 !== t ? t : new Pt,
            this.material = void 0 !== e ? e : new De({
                color: 16777215 * Math.random()
            })
    }
    function Ue(t, e) {
        Ne.call(this, t, e),
            this.type = "LineSegments"
    }
    function Be(t, e) {
        Ne.call(this, t, e),
            this.type = "LineLoop"
    }
    function Fe(t) {
        tt.call(this),
            this.type = "PointsMaterial",
            this.color = new Z(16777215),
            this.map = null,
            this.size = 1,
            this.sizeAttenuation = !0,
            this.lights = !1,
            this.setValues(t)
    }
    function ze(t, e) {
        ut.call(this),
            this.type = "Points",
            this.geometry = void 0 !== t ? t : new Pt,
            this.material = void 0 !== e ? e : new Fe({
                color: 16777215 * Math.random()
            })
    }
    function Ge() {
        ut.call(this),
            this.type = "Group"
    }
    function je(t, e, i, n, r, o, a, s, h) {
        function c() {
            t.removeEventListener("loadeddata", c, !1),
                u.needsUpdate = !0
        }
        l.call(this, t, e, i, n, r, o, a, s, h),
            this.generateMipmaps = !1;
        var u = this;
        t.addEventListener("loadeddata", c, !1)
    }
    function ke(t, e, i, n, r, o, a, s, h, c, u, d) {
        l.call(this, null, o, a, s, h, c, n, r, u, d),
            this.image = {
                width: e,
                height: i
            },
            this.mipmaps = t,
            this.flipY = !1,
            this.generateMipmaps = !1
    }
    function He(t, e, i, n, r, o, a, s, h, c) {
        if ((c = void 0 !== c ? c : Ps) !== Ps && c !== Rs)
            throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
        void 0 === i && c === Ps && (i = ps),
            void 0 === i && c === Rs && (i = bs),
            l.call(this, null, n, r, o, a, s, c, i, h),
            this.image = {
                width: t,
                height: e
            },
            this.magFilter = void 0 !== a ? a : rs,
            this.minFilter = void 0 !== s ? s : rs,
            this.flipY = !1,
            this.generateMipmaps = !1
    }
    function Ve(t) {
        Pt.call(this),
            this.type = "WireframeGeometry";
        var e, i, n, r, o, a, h, l, c, u, d = [], p = [0, 0], f = {}, m = ["a", "b", "c"];
        if (t && t.isGeometry) {
            var v = t.faces;
            for (e = 0,
                n = v.length; e < n; e++) {
                var g = v[e];
                for (i = 0; i < 3; i++)
                    h = g[m[i]],
                        l = g[m[(i + 1) % 3]],
                        p[0] = Math.min(h, l),
                        p[1] = Math.max(h, l),
                        c = p[0] + "," + p[1],
                        void 0 === f[c] && (f[c] = {
                            index1: p[0],
                            index2: p[1]
                        })
            }
            for (c in f)
                a = f[c],
                    u = t.vertices[a.index1],
                    d.push(u.x, u.y, u.z),
                    u = t.vertices[a.index2],
                    d.push(u.x, u.y, u.z)
        } else if (t && t.isBufferGeometry) {
            var _, y, x, b, w, S, E, T;
            if (u = new s,
                null !== t.index) {
                for (_ = t.attributes.position,
                    y = t.index,
                    x = t.groups,
                    0 === x.length && (x = [{
                        start: 0,
                        count: y.count,
                        materialIndex: 0
                    }]),
                    r = 0,
                    o = x.length; r < o; ++r)
                    for (b = x[r],
                        w = b.start,
                        S = b.count,
                        e = w,
                        n = w + S; e < n; e += 3)
                        for (i = 0; i < 3; i++)
                            h = y.getX(e + i),
                                l = y.getX(e + (i + 1) % 3),
                                p[0] = Math.min(h, l),
                                p[1] = Math.max(h, l),
                                c = p[0] + "," + p[1],
                                void 0 === f[c] && (f[c] = {
                                    index1: p[0],
                                    index2: p[1]
                                });
                for (c in f)
                    a = f[c],
                        u.fromBufferAttribute(_, a.index1),
                        d.push(u.x, u.y, u.z),
                        u.fromBufferAttribute(_, a.index2),
                        d.push(u.x, u.y, u.z)
            } else
                for (_ = t.attributes.position,
                    e = 0,
                    n = _.count / 3; e < n; e++)
                    for (i = 0; i < 3; i++)
                        E = 3 * e + i,
                            u.fromBufferAttribute(_, E),
                            d.push(u.x, u.y, u.z),
                            T = 3 * e + (i + 1) % 3,
                            u.fromBufferAttribute(_, T),
                            d.push(u.x, u.y, u.z)
        }
        this.addAttribute("position", new Et(d, 3))
    }
    function We(t, e, i) {
        mt.call(this),
            this.type = "ParametricGeometry",
            this.parameters = {
                func: t,
                slices: e,
                stacks: i
            },
            this.fromBufferGeometry(new Xe(t, e, i)),
            this.mergeVertices()
    }
    function Xe(t, e, i) {
        Pt.call(this),
            this.type = "ParametricBufferGeometry",
            this.parameters = {
                func: t,
                slices: e,
                stacks: i
            };
        var n, r, o = [], a = [], h = [], l = [], c = new s, u = new s, d = new s, p = new s, f = new s, m = e + 1;
        for (n = 0; n <= i; n++) {
            var v = n / i;
            for (r = 0; r <= e; r++) {
                var g = r / e;
                u = t(g, v, u),
                    a.push(u.x, u.y, u.z),
                    g - 1e-5 >= 0 ? (d = t(g - 1e-5, v, d),
                        p.subVectors(u, d)) : (d = t(g + 1e-5, v, d),
                            p.subVectors(d, u)),
                    v - 1e-5 >= 0 ? (d = t(g, v - 1e-5, d),
                        f.subVectors(u, d)) : (d = t(g, v + 1e-5, d),
                            f.subVectors(d, u)),
                    c.crossVectors(p, f).normalize(),
                    h.push(c.x, c.y, c.z),
                    l.push(g, v)
            }
        }
        for (n = 0; n < i; n++)
            for (r = 0; r < e; r++) {
                var _ = n * m + r
                    , y = n * m + r + 1
                    , x = (n + 1) * m + r + 1
                    , b = (n + 1) * m + r;
                o.push(_, y, b),
                    o.push(y, x, b)
            }
        this.setIndex(o),
            this.addAttribute("position", new Et(a, 3)),
            this.addAttribute("normal", new Et(h, 3)),
            this.addAttribute("uv", new Et(l, 2))
    }
    function Ye(t, e, i, n) {
        mt.call(this),
            this.type = "PolyhedronGeometry",
            this.parameters = {
                vertices: t,
                indices: e,
                radius: i,
                detail: n
            },
            this.fromBufferGeometry(new qe(t, e, i, n)),
            this.mergeVertices()
    }
    function qe(t, e, i, n) {
        function o(t, e, i, n) {
            var r, o, a = Math.pow(2, n), s = [];
            for (r = 0; r <= a; r++) {
                s[r] = [];
                var l = t.clone().lerp(i, r / a)
                    , c = e.clone().lerp(i, r / a)
                    , u = a - r;
                for (o = 0; o <= u; o++)
                    s[r][o] = 0 === o && r === a ? l : l.clone().lerp(c, o / u)
            }
            for (r = 0; r < a; r++)
                for (o = 0; o < 2 * (a - r) - 1; o++) {
                    var d = Math.floor(o / 2);
                    o % 2 == 0 ? (h(s[r][d + 1]),
                        h(s[r + 1][d]),
                        h(s[r][d])) : (h(s[r][d + 1]),
                            h(s[r + 1][d + 1]),
                            h(s[r + 1][d]))
                }
        }
        function a() {
            for (var t = 0; t < m.length; t += 6) {
                var e = m[t + 0]
                    , i = m[t + 2]
                    , n = m[t + 4]
                    , r = Math.max(e, i, n)
                    , o = Math.min(e, i, n);
                r > .9 && o < .1 && (e < .2 && (m[t + 0] += 1),
                    i < .2 && (m[t + 2] += 1),
                    n < .2 && (m[t + 4] += 1))
            }
        }
        function h(t) {
            f.push(t.x, t.y, t.z)
        }
        function l(e, i) {
            var n = 3 * e;
            i.x = t[n + 0],
                i.y = t[n + 1],
                i.z = t[n + 2]
        }
        function c() {
            for (var t = new s, e = new s, i = new s, n = new s, o = new r, a = new r, h = new r, l = 0, c = 0; l < f.length; l += 9,
                c += 6) {
                t.set(f[l + 0], f[l + 1], f[l + 2]),
                    e.set(f[l + 3], f[l + 4], f[l + 5]),
                    i.set(f[l + 6], f[l + 7], f[l + 8]),
                    o.set(m[c + 0], m[c + 1]),
                    a.set(m[c + 2], m[c + 3]),
                    h.set(m[c + 4], m[c + 5]),
                    n.copy(t).add(e).add(i).divideScalar(3);
                var p = d(n);
                u(o, c + 0, t, p),
                    u(a, c + 2, e, p),
                    u(h, c + 4, i, p)
            }
        }
        function u(t, e, i, n) {
            n < 0 && 1 === t.x && (m[e] = t.x - 1),
                0 === i.x && 0 === i.z && (m[e] = n / 2 / Math.PI + .5)
        }
        function d(t) {
            return Math.atan2(t.z, -t.x)
        }
        function p(t) {
            return Math.atan2(-t.y, Math.sqrt(t.x * t.x + t.z * t.z))
        }
        Pt.call(this),
            this.type = "PolyhedronBufferGeometry",
            this.parameters = {
                vertices: t,
                indices: e,
                radius: i,
                detail: n
            },
            i = i || 1,
            n = n || 0;
        var f = []
            , m = [];
        !function (t) {
            for (var i = new s, n = new s, r = new s, a = 0; a < e.length; a += 3)
                l(e[a + 0], i),
                    l(e[a + 1], n),
                    l(e[a + 2], r),
                    o(i, n, r, t)
        }(n),
            function (t) {
                for (var e = new s, i = 0; i < f.length; i += 3)
                    e.x = f[i + 0],
                        e.y = f[i + 1],
                        e.z = f[i + 2],
                        e.normalize().multiplyScalar(t),
                        f[i + 0] = e.x,
                        f[i + 1] = e.y,
                        f[i + 2] = e.z
            }(i),
            function () {
                for (var t = new s, e = 0; e < f.length; e += 3) {
                    t.x = f[e + 0],
                        t.y = f[e + 1],
                        t.z = f[e + 2];
                    var i = d(t) / 2 / Math.PI + .5
                        , n = p(t) / Math.PI + .5;
                    m.push(i, 1 - n)
                }
                c(),
                    a()
            }(),
            this.addAttribute("position", new Et(f, 3)),
            this.addAttribute("normal", new Et(f.slice(), 3)),
            this.addAttribute("uv", new Et(m, 2)),
            0 === n ? this.computeVertexNormals() : this.normalizeNormals()
    }
    function Ze(t, e) {
        mt.call(this),
            this.type = "TetrahedronGeometry",
            this.parameters = {
                radius: t,
                detail: e
            },
            this.fromBufferGeometry(new Je(t, e)),
            this.mergeVertices()
    }
    function Je(t, e) {
        var i = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1]
            , n = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];
        qe.call(this, i, n, t, e),
            this.type = "TetrahedronBufferGeometry",
            this.parameters = {
                radius: t,
                detail: e
            }
    }
    function Ke(t, e) {
        mt.call(this),
            this.type = "OctahedronGeometry",
            this.parameters = {
                radius: t,
                detail: e
            },
            this.fromBufferGeometry(new Qe(t, e)),
            this.mergeVertices()
    }
    function Qe(t, e) {
        var i = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1]
            , n = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];
        qe.call(this, i, n, t, e),
            this.type = "OctahedronBufferGeometry",
            this.parameters = {
                radius: t,
                detail: e
            }
    }
    function $e(t, e) {
        mt.call(this),
            this.type = "IcosahedronGeometry",
            this.parameters = {
                radius: t,
                detail: e
            },
            this.fromBufferGeometry(new ti(t, e)),
            this.mergeVertices()
    }
    function ti(t, e) {
        var i = (1 + Math.sqrt(5)) / 2
            , n = [-1, i, 0, 1, i, 0, -1, -i, 0, 1, -i, 0, 0, -1, i, 0, 1, i, 0, -1, -i, 0, 1, -i, i, 0, -1, i, 0, 1, -i, 0, -1, -i, 0, 1]
            , r = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];
        qe.call(this, n, r, t, e),
            this.type = "IcosahedronBufferGeometry",
            this.parameters = {
                radius: t,
                detail: e
            }
    }
    function ei(t, e) {
        mt.call(this),
            this.type = "DodecahedronGeometry",
            this.parameters = {
                radius: t,
                detail: e
            },
            this.fromBufferGeometry(new ii(t, e)),
            this.mergeVertices()
    }
    function ii(t, e) {
        var i = (1 + Math.sqrt(5)) / 2
            , n = 1 / i
            , r = [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -n, -i, 0, -n, i, 0, n, -i, 0, n, i, -n, -i, 0, -n, i, 0, n, -i, 0, n, i, 0, -i, 0, -n, i, 0, -n, -i, 0, n, i, 0, n]
            , o = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];
        qe.call(this, r, o, t, e),
            this.type = "DodecahedronBufferGeometry",
            this.parameters = {
                radius: t,
                detail: e
            }
    }
    function ni(t, e, i, n, r, o) {
        mt.call(this),
            this.type = "TubeGeometry",
            this.parameters = {
                path: t,
                tubularSegments: e,
                radius: i,
                radialSegments: n,
                closed: r
            },
            void 0 !== o && console.warn("THREE.TubeGeometry: taper has been removed.");
        var a = new ri(t, e, i, n, r);
        this.tangents = a.tangents,
            this.normals = a.normals,
            this.binormals = a.binormals,
            this.fromBufferGeometry(a),
            this.mergeVertices()
    }
    function ri(t, e, i, n, o) {
        function a(r) {
            v = t.getPointAt(r / e, v);
            var o = c.normals[r]
                , a = c.binormals[r];
            for (d = 0; d <= n; d++) {
                var s = d / n * Math.PI * 2
                    , h = Math.sin(s)
                    , l = -Math.cos(s);
                f.x = l * o.x + h * a.x,
                    f.y = l * o.y + h * a.y,
                    f.z = l * o.z + h * a.z,
                    f.normalize(),
                    _.push(f.x, f.y, f.z),
                    p.x = v.x + i * f.x,
                    p.y = v.y + i * f.y,
                    p.z = v.z + i * f.z,
                    g.push(p.x, p.y, p.z)
            }
        }
        function h() {
            for (d = 1; d <= e; d++)
                for (u = 1; u <= n; u++) {
                    var t = (n + 1) * (d - 1) + (u - 1)
                        , i = (n + 1) * d + (u - 1)
                        , r = (n + 1) * d + u
                        , o = (n + 1) * (d - 1) + u;
                    x.push(t, i, o),
                        x.push(i, r, o)
                }
        }
        function l() {
            for (u = 0; u <= e; u++)
                for (d = 0; d <= n; d++)
                    m.x = u / e,
                        m.y = d / n,
                        y.push(m.x, m.y)
        }
        Pt.call(this),
            this.type = "TubeBufferGeometry",
            this.parameters = {
                path: t,
                tubularSegments: e,
                radius: i,
                radialSegments: n,
                closed: o
            },
            e = e || 64,
            i = i || 1,
            n = n || 8,
            o = o || !1;
        var c = t.computeFrenetFrames(e, o);
        this.tangents = c.tangents,
            this.normals = c.normals,
            this.binormals = c.binormals;
        var u, d, p = new s, f = new s, m = new r, v = new s, g = [], _ = [], y = [], x = [];
        !function () {
            for (u = 0; u < e; u++)
                a(u);
            a(!1 === o ? e : 0),
                l(),
                h()
        }(),
            this.setIndex(x),
            this.addAttribute("position", new Et(g, 3)),
            this.addAttribute("normal", new Et(_, 3)),
            this.addAttribute("uv", new Et(y, 2))
    }
    function oi(t, e, i, n, r, o, a) {
        mt.call(this),
            this.type = "TorusKnotGeometry",
            this.parameters = {
                radius: t,
                tube: e,
                tubularSegments: i,
                radialSegments: n,
                p: r,
                q: o
            },
            void 0 !== a && console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),
            this.fromBufferGeometry(new ai(t, e, i, n, r, o)),
            this.mergeVertices()
    }
    function ai(t, e, i, n, r, o) {
        function a(t, e, i, n, r) {
            var o = Math.cos(t)
                , a = Math.sin(t)
                , s = i / e * t
                , h = Math.cos(s);
            r.x = n * (2 + h) * .5 * o,
                r.y = n * (2 + h) * a * .5,
                r.z = n * Math.sin(s) * .5
        }
        Pt.call(this),
            this.type = "TorusKnotBufferGeometry",
            this.parameters = {
                radius: t,
                tube: e,
                tubularSegments: i,
                radialSegments: n,
                p: r,
                q: o
            },
            t = t || 1,
            e = e || .4,
            i = Math.floor(i) || 64,
            n = Math.floor(n) || 8,
            r = r || 2,
            o = o || 3;
        var h, l, c = [], u = [], d = [], p = [], f = new s, m = new s, v = new s, g = new s, _ = new s, y = new s, x = new s;
        for (h = 0; h <= i; ++h) {
            var b = h / i * r * Math.PI * 2;
            for (a(b, r, o, t, v),
                a(b + .01, r, o, t, g),
                y.subVectors(g, v),
                x.addVectors(g, v),
                _.crossVectors(y, x),
                x.crossVectors(_, y),
                _.normalize(),
                x.normalize(),
                l = 0; l <= n; ++l) {
                var w = l / n * Math.PI * 2
                    , S = -e * Math.cos(w)
                    , E = e * Math.sin(w);
                f.x = v.x + (S * x.x + E * _.x),
                    f.y = v.y + (S * x.y + E * _.y),
                    f.z = v.z + (S * x.z + E * _.z),
                    u.push(f.x, f.y, f.z),
                    m.subVectors(f, v).normalize(),
                    d.push(m.x, m.y, m.z),
                    p.push(h / i),
                    p.push(l / n)
            }
        }
        for (l = 1; l <= i; l++)
            for (h = 1; h <= n; h++) {
                var T = (n + 1) * (l - 1) + (h - 1)
                    , M = (n + 1) * l + (h - 1)
                    , A = (n + 1) * l + h
                    , P = (n + 1) * (l - 1) + h;
                c.push(T, M, P),
                    c.push(M, A, P)
            }
        this.setIndex(c),
            this.addAttribute("position", new Et(u, 3)),
            this.addAttribute("normal", new Et(d, 3)),
            this.addAttribute("uv", new Et(p, 2))
    }
    function si(t, e, i, n, r) {
        mt.call(this),
            this.type = "TorusGeometry",
            this.parameters = {
                radius: t,
                tube: e,
                radialSegments: i,
                tubularSegments: n,
                arc: r
            },
            this.fromBufferGeometry(new hi(t, e, i, n, r)),
            this.mergeVertices()
    }
    function hi(t, e, i, n, r) {
        Pt.call(this),
            this.type = "TorusBufferGeometry",
            this.parameters = {
                radius: t,
                tube: e,
                radialSegments: i,
                tubularSegments: n,
                arc: r
            },
            t = t || 1,
            e = e || .4,
            i = Math.floor(i) || 8,
            n = Math.floor(n) || 6,
            r = r || 2 * Math.PI;
        var o, a, h = [], l = [], c = [], u = [], d = new s, p = new s, f = new s;
        for (o = 0; o <= i; o++)
            for (a = 0; a <= n; a++) {
                var m = a / n * r
                    , v = o / i * Math.PI * 2;
                p.x = (t + e * Math.cos(v)) * Math.cos(m),
                    p.y = (t + e * Math.cos(v)) * Math.sin(m),
                    p.z = e * Math.sin(v),
                    l.push(p.x, p.y, p.z),
                    d.x = t * Math.cos(m),
                    d.y = t * Math.sin(m),
                    f.subVectors(p, d).normalize(),
                    c.push(f.x, f.y, f.z),
                    u.push(a / n),
                    u.push(o / i)
            }
        for (o = 1; o <= i; o++)
            for (a = 1; a <= n; a++) {
                var g = (n + 1) * o + a - 1
                    , _ = (n + 1) * (o - 1) + a - 1
                    , y = (n + 1) * (o - 1) + a
                    , x = (n + 1) * o + a;
                h.push(g, _, x),
                    h.push(_, y, x)
            }
        this.setIndex(h),
            this.addAttribute("position", new Et(l, 3)),
            this.addAttribute("normal", new Et(c, 3)),
            this.addAttribute("uv", new Et(u, 2))
    }
    function li(t, e, i, n, r) {
        var o, a;
        if (r === Ui(t, e, i, n) > 0)
            for (o = e; o < i; o += n)
                a = Ci(o, t[o], t[o + 1], a);
        else
            for (o = i - n; o >= e; o -= n)
                a = Ci(o, t[o], t[o + 1], a);
        return a && Ai(a, a.next) && (Di(a),
            a = a.next),
            a
    }
    function ci(t, e) {
        if (!t)
            return t;
        e || (e = t);
        var i, n = t;
        do {
            if (i = !1,
                n.steiner || !Ai(n, n.next) && 0 !== Mi(n.prev, n, n.next))
                n = n.next;
            else {
                if (Di(n),
                    (n = e = n.prev) === n.next)
                    break;
                i = !0
            }
        } while (i || n !== e);
        return e
    }
    function ui(t, e, i, n, r, o, a) {
        if (t) {
            !a && o && xi(t, n, r, o);
            for (var s, h, l = t; t.prev !== t.next;)
                if (s = t.prev,
                    h = t.next,
                    o ? pi(t, n, r, o) : di(t))
                    e.push(s.i / i),
                        e.push(t.i / i),
                        e.push(h.i / i),
                        Di(t),
                        t = h.next,
                        l = h.next;
                else if ((t = h) === l) {
                    a ? 1 === a ? (t = fi(t, e, i),
                        ui(t, e, i, n, r, o, 2)) : 2 === a && mi(t, e, i, n, r, o) : ui(ci(t), e, i, n, r, o, 1);
                    break
                }
        }
    }
    function di(t) {
        var e = t.prev
            , i = t
            , n = t.next;
        if (Mi(e, i, n) >= 0)
            return !1;
        for (var r = t.next.next; r !== t.prev;) {
            if (Ei(e.x, e.y, i.x, i.y, n.x, n.y, r.x, r.y) && Mi(r.prev, r, r.next) >= 0)
                return !1;
            r = r.next
        }
        return !0
    }
    function pi(t, e, i, n) {
        var r = t.prev
            , o = t
            , a = t.next;
        if (Mi(r, o, a) >= 0)
            return !1;
        for (var s = r.x < o.x ? r.x < a.x ? r.x : a.x : o.x < a.x ? o.x : a.x, h = r.y < o.y ? r.y < a.y ? r.y : a.y : o.y < a.y ? o.y : a.y, l = r.x > o.x ? r.x > a.x ? r.x : a.x : o.x > a.x ? o.x : a.x, c = r.y > o.y ? r.y > a.y ? r.y : a.y : o.y > a.y ? o.y : a.y, u = wi(s, h, e, i, n), d = wi(l, c, e, i, n), p = t.nextZ; p && p.z <= d;) {
            if (p !== t.prev && p !== t.next && Ei(r.x, r.y, o.x, o.y, a.x, a.y, p.x, p.y) && Mi(p.prev, p, p.next) >= 0)
                return !1;
            p = p.nextZ
        }
        for (p = t.prevZ; p && p.z >= u;) {
            if (p !== t.prev && p !== t.next && Ei(r.x, r.y, o.x, o.y, a.x, a.y, p.x, p.y) && Mi(p.prev, p, p.next) >= 0)
                return !1;
            p = p.prevZ
        }
        return !0
    }
    function fi(t, e, i) {
        var n = t;
        do {
            var r = n.prev
                , o = n.next.next;
            !Ai(r, o) && Pi(r, n, n.next, o) && Li(r, o) && Li(o, r) && (e.push(r.i / i),
                e.push(n.i / i),
                e.push(o.i / i),
                Di(n),
                Di(n.next),
                n = t = o),
                n = n.next
        } while (n !== t);
        return n
    }
    function mi(t, e, i, n, r, o) {
        var a = t;
        do {
            for (var s = a.next.next; s !== a.prev;) {
                if (a.i !== s.i && Ti(a, s)) {
                    var h = Ii(a, s);
                    return a = ci(a, a.next),
                        h = ci(h, h.next),
                        ui(a, e, i, n, r, o),
                        void ui(h, e, i, n, r, o)
                }
                s = s.next
            }
            a = a.next
        } while (a !== t)
    }
    function vi(t, e, i, n) {
        var r, o, a, s, h, l = [];
        for (r = 0,
            o = e.length; r < o; r++)
            a = e[r] * n,
                s = r < o - 1 ? e[r + 1] * n : t.length,
                h = li(t, a, s, n, !1),
                h === h.next && (h.steiner = !0),
                l.push(Si(h));
        for (l.sort(gi),
            r = 0; r < l.length; r++)
            _i(l[r], i),
                i = ci(i, i.next);
        return i
    }
    function gi(t, e) {
        return t.x - e.x
    }
    function _i(t, e) {
        if (e = yi(t, e)) {
            var i = Ii(e, t);
            ci(i, i.next)
        }
    }
    function yi(t, e) {
        var i, n = e, r = t.x, o = t.y, a = -1 / 0;
        do {
            if (o <= n.y && o >= n.next.y && n.next.y !== n.y) {
                var s = n.x + (o - n.y) * (n.next.x - n.x) / (n.next.y - n.y);
                if (s <= r && s > a) {
                    if (a = s,
                        s === r) {
                        if (o === n.y)
                            return n;
                        if (o === n.next.y)
                            return n.next
                    }
                    i = n.x < n.next.x ? n : n.next
                }
            }
            n = n.next
        } while (n !== e);
        if (!i)
            return null;
        if (r === a)
            return i.prev;
        var h, l = i, c = i.x, u = i.y, d = 1 / 0;
        for (n = i.next; n !== l;)
            r >= n.x && n.x >= c && r !== n.x && Ei(o < u ? r : a, o, c, u, o < u ? a : r, o, n.x, n.y) && ((h = Math.abs(o - n.y) / (r - n.x)) < d || h === d && n.x > i.x) && Li(n, t) && (i = n,
                d = h),
                n = n.next;
        return i
    }
    function xi(t, e, i, n) {
        var r = t;
        do {
            null === r.z && (r.z = wi(r.x, r.y, e, i, n)),
                r.prevZ = r.prev,
                r.nextZ = r.next,
                r = r.next
        } while (r !== t);
        r.prevZ.nextZ = null,
            r.prevZ = null,
            bi(r)
    }
    function bi(t) {
        var e, i, n, r, o, a, s, h, l = 1;
        do {
            for (i = t,
                t = null,
                o = null,
                a = 0; i;) {
                for (a++,
                    n = i,
                    s = 0,
                    e = 0; e < l && (s++,
                        n = n.nextZ); e++)
                    ;
                for (h = l; s > 0 || h > 0 && n;)
                    0 !== s && (0 === h || !n || i.z <= n.z) ? (r = i,
                        i = i.nextZ,
                        s--) : (r = n,
                            n = n.nextZ,
                            h--),
                        o ? o.nextZ = r : t = r,
                        r.prevZ = o,
                        o = r;
                i = n
            }
            o.nextZ = null,
                l *= 2
        } while (a > 1);
        return t
    }
    function wi(t, e, i, n, r) {
        return t = 32767 * (t - i) * r,
            e = 32767 * (e - n) * r,
            t = 16711935 & (t | t << 8),
            t = 252645135 & (t | t << 4),
            t = 858993459 & (t | t << 2),
            t = 1431655765 & (t | t << 1),
            e = 16711935 & (e | e << 8),
            e = 252645135 & (e | e << 4),
            e = 858993459 & (e | e << 2),
            e = 1431655765 & (e | e << 1),
            t | e << 1
    }
    function Si(t) {
        var e = t
            , i = t;
        do {
            e.x < i.x && (i = e),
                e = e.next
        } while (e !== t);
        return i
    }
    function Ei(t, e, i, n, r, o, a, s) {
        return (r - a) * (e - s) - (t - a) * (o - s) >= 0 && (t - a) * (n - s) - (i - a) * (e - s) >= 0 && (i - a) * (o - s) - (r - a) * (n - s) >= 0
    }
    function Ti(t, e) {
        return t.next.i !== e.i && t.prev.i !== e.i && !Ri(t, e) && Li(t, e) && Li(e, t) && Oi(t, e)
    }
    function Mi(t, e, i) {
        return (e.y - t.y) * (i.x - e.x) - (e.x - t.x) * (i.y - e.y)
    }
    function Ai(t, e) {
        return t.x === e.x && t.y === e.y
    }
    function Pi(t, e, i, n) {
        return !!(Ai(t, e) && Ai(i, n) || Ai(t, n) && Ai(i, e)) || Mi(t, e, i) > 0 != Mi(t, e, n) > 0 && Mi(i, n, t) > 0 != Mi(i, n, e) > 0
    }
    function Ri(t, e) {
        var i = t;
        do {
            if (i.i !== t.i && i.next.i !== t.i && i.i !== e.i && i.next.i !== e.i && Pi(i, i.next, t, e))
                return !0;
            i = i.next
        } while (i !== t);
        return !1
    }
    function Li(t, e) {
        return Mi(t.prev, t, t.next) < 0 ? Mi(t, e, t.next) >= 0 && Mi(t, t.prev, e) >= 0 : Mi(t, e, t.prev) < 0 || Mi(t, t.next, e) < 0
    }
    function Oi(t, e) {
        var i = t
            , n = !1
            , r = (t.x + e.x) / 2
            , o = (t.y + e.y) / 2;
        do {
            i.y > o != i.next.y > o && i.next.y !== i.y && r < (i.next.x - i.x) * (o - i.y) / (i.next.y - i.y) + i.x && (n = !n),
                i = i.next
        } while (i !== t);
        return n
    }
    function Ii(t, e) {
        var i = new Ni(t.i, t.x, t.y)
            , n = new Ni(e.i, e.x, e.y)
            , r = t.next
            , o = e.prev;
        return t.next = e,
            e.prev = t,
            i.next = r,
            r.prev = i,
            n.next = i,
            i.prev = n,
            o.next = n,
            n.prev = o,
            n
    }
    function Ci(t, e, i, n) {
        var r = new Ni(t, e, i);
        return n ? (r.next = n.next,
            r.prev = n,
            n.next.prev = r,
            n.next = r) : (r.prev = r,
                r.next = r),
            r
    }
    function Di(t) {
        t.next.prev = t.prev,
            t.prev.next = t.next,
            t.prevZ && (t.prevZ.nextZ = t.nextZ),
            t.nextZ && (t.nextZ.prevZ = t.prevZ)
    }
    function Ni(t, e, i) {
        this.i = t,
            this.x = e,
            this.y = i,
            this.prev = null,
            this.next = null,
            this.z = null,
            this.prevZ = null,
            this.nextZ = null,
            this.steiner = !1
    }
    function Ui(t, e, i, n) {
        for (var r = 0, o = e, a = i - n; o < i; o += n)
            r += (t[a] - t[o]) * (t[o + 1] + t[a + 1]),
                a = o;
        return r
    }
    function Bi(t, e) {
        mt.call(this),
            this.type = "ExtrudeGeometry",
            this.parameters = {
                shapes: t,
                options: e
            },
            this.fromBufferGeometry(new Fi(t, e)),
            this.mergeVertices()
    }
    function Fi(t, e) {
        void 0 !== t && (Pt.call(this),
            this.type = "ExtrudeBufferGeometry",
            t = Array.isArray(t) ? t : [t],
            this.addShapeList(t, e),
            this.computeVertexNormals())
    }
    function zi(t, e) {
        mt.call(this),
            this.type = "TextGeometry",
            this.parameters = {
                text: t,
                parameters: e
            },
            this.fromBufferGeometry(new Gi(t, e)),
            this.mergeVertices()
    }
    function Gi(t, e) {
        e = e || {};
        var i = e.font;
        if (!i || !i.isFont)
            return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),
                new mt;
        var n = i.generateShapes(t, e.size, e.curveSegments);
        e.amount = void 0 !== e.height ? e.height : 50,
            void 0 === e.bevelThickness && (e.bevelThickness = 10),
            void 0 === e.bevelSize && (e.bevelSize = 8),
            void 0 === e.bevelEnabled && (e.bevelEnabled = !1),
            Fi.call(this, n, e),
            this.type = "TextBufferGeometry"
    }
    function ji(t, e, i, n, r, o, a) {
        mt.call(this),
            this.type = "SphereGeometry",
            this.parameters = {
                radius: t,
                widthSegments: e,
                heightSegments: i,
                phiStart: n,
                phiLength: r,
                thetaStart: o,
                thetaLength: a
            },
            this.fromBufferGeometry(new ki(t, e, i, n, r, o, a)),
            this.mergeVertices()
    }
    function ki(t, e, i, n, r, o, a) {
        Pt.call(this),
            this.type = "SphereBufferGeometry",
            this.parameters = {
                radius: t,
                widthSegments: e,
                heightSegments: i,
                phiStart: n,
                phiLength: r,
                thetaStart: o,
                thetaLength: a
            },
            t = t || 1,
            e = Math.max(3, Math.floor(e) || 8),
            i = Math.max(2, Math.floor(i) || 6),
            n = void 0 !== n ? n : 0,
            r = void 0 !== r ? r : 2 * Math.PI,
            o = void 0 !== o ? o : 0,
            a = void 0 !== a ? a : Math.PI;
        var h, l, c = o + a, u = 0, d = [], p = new s, f = new s, m = [], v = [], g = [], _ = [];
        for (l = 0; l <= i; l++) {
            var y = []
                , x = l / i;
            for (h = 0; h <= e; h++) {
                var b = h / e;
                p.x = -t * Math.cos(n + b * r) * Math.sin(o + x * a),
                    p.y = t * Math.cos(o + x * a),
                    p.z = t * Math.sin(n + b * r) * Math.sin(o + x * a),
                    v.push(p.x, p.y, p.z),
                    f.set(p.x, p.y, p.z).normalize(),
                    g.push(f.x, f.y, f.z),
                    _.push(b, 1 - x),
                    y.push(u++)
            }
            d.push(y)
        }
        for (l = 0; l < i; l++)
            for (h = 0; h < e; h++) {
                var w = d[l][h + 1]
                    , S = d[l][h]
                    , E = d[l + 1][h]
                    , T = d[l + 1][h + 1];
                (0 !== l || o > 0) && m.push(w, S, T),
                    (l !== i - 1 || c < Math.PI) && m.push(S, E, T)
            }
        this.setIndex(m),
            this.addAttribute("position", new Et(v, 3)),
            this.addAttribute("normal", new Et(g, 3)),
            this.addAttribute("uv", new Et(_, 2))
    }
    function Hi(t, e, i, n, r, o) {
        mt.call(this),
            this.type = "RingGeometry",
            this.parameters = {
                innerRadius: t,
                outerRadius: e,
                thetaSegments: i,
                phiSegments: n,
                thetaStart: r,
                thetaLength: o
            },
            this.fromBufferGeometry(new Vi(t, e, i, n, r, o)),
            this.mergeVertices()
    }
    function Vi(t, e, i, n, o, a) {
        Pt.call(this),
            this.type = "RingBufferGeometry",
            this.parameters = {
                innerRadius: t,
                outerRadius: e,
                thetaSegments: i,
                phiSegments: n,
                thetaStart: o,
                thetaLength: a
            },
            t = t || .5,
            e = e || 1,
            o = void 0 !== o ? o : 0,
            a = void 0 !== a ? a : 2 * Math.PI,
            i = void 0 !== i ? Math.max(3, i) : 8,
            n = void 0 !== n ? Math.max(1, n) : 1;
        var h, l, c, u = [], d = [], p = [], f = [], m = t, v = (e - t) / n, g = new s, _ = new r;
        for (l = 0; l <= n; l++) {
            for (c = 0; c <= i; c++)
                h = o + c / i * a,
                    g.x = m * Math.cos(h),
                    g.y = m * Math.sin(h),
                    d.push(g.x, g.y, g.z),
                    p.push(0, 0, 1),
                    _.x = (g.x / e + 1) / 2,
                    _.y = (g.y / e + 1) / 2,
                    f.push(_.x, _.y);
            m += v
        }
        for (l = 0; l < n; l++) {
            var y = l * (i + 1);
            for (c = 0; c < i; c++) {
                h = c + y;
                var x = h
                    , b = h + i + 1
                    , w = h + i + 2
                    , S = h + 1;
                u.push(x, b, S),
                    u.push(b, w, S)
            }
        }
        this.setIndex(u),
            this.addAttribute("position", new Et(d, 3)),
            this.addAttribute("normal", new Et(p, 3)),
            this.addAttribute("uv", new Et(f, 2))
    }
    function Wi(t, e, i, n) {
        mt.call(this),
            this.type = "LatheGeometry",
            this.parameters = {
                points: t,
                segments: e,
                phiStart: i,
                phiLength: n
            },
            this.fromBufferGeometry(new Xi(t, e, i, n)),
            this.mergeVertices()
    }
    function Xi(t, e, i, n) {
        Pt.call(this),
            this.type = "LatheBufferGeometry",
            this.parameters = {
                points: t,
                segments: e,
                phiStart: i,
                phiLength: n
            },
            e = Math.floor(e) || 12,
            i = i || 0,
            n = n || 2 * Math.PI,
            n = sh.clamp(n, 0, 2 * Math.PI);
        var o, a, h, l = [], c = [], u = [], d = 1 / e, p = new s, f = new r;
        for (a = 0; a <= e; a++) {
            var m = i + a * d * n
                , v = Math.sin(m)
                , g = Math.cos(m);
            for (h = 0; h <= t.length - 1; h++)
                p.x = t[h].x * v,
                    p.y = t[h].y,
                    p.z = t[h].x * g,
                    c.push(p.x, p.y, p.z),
                    f.x = a / e,
                    f.y = h / (t.length - 1),
                    u.push(f.x, f.y)
        }
        for (a = 0; a < e; a++)
            for (h = 0; h < t.length - 1; h++) {
                o = h + a * t.length;
                var _ = o
                    , y = o + t.length
                    , x = o + t.length + 1
                    , b = o + 1;
                l.push(_, y, b),
                    l.push(y, x, b)
            }
        if (this.setIndex(l),
            this.addAttribute("position", new Et(c, 3)),
            this.addAttribute("uv", new Et(u, 2)),
            this.computeVertexNormals(),
            n === 2 * Math.PI) {
            var w = this.attributes.normal.array
                , S = new s
                , E = new s
                , T = new s;
            for (o = e * t.length * 3,
                a = 0,
                h = 0; a < t.length; a++,
                h += 3)
                S.x = w[h + 0],
                    S.y = w[h + 1],
                    S.z = w[h + 2],
                    E.x = w[o + h + 0],
                    E.y = w[o + h + 1],
                    E.z = w[o + h + 2],
                    T.addVectors(S, E).normalize(),
                    w[h + 0] = w[o + h + 0] = T.x,
                    w[h + 1] = w[o + h + 1] = T.y,
                    w[h + 2] = w[o + h + 2] = T.z
        }
    }
    function Yi(t, e) {
        mt.call(this),
            this.type = "ShapeGeometry",
            "object" == typeof e && (console.warn("THREE.ShapeGeometry: Options parameter has been removed."),
                e = e.curveSegments),
            this.parameters = {
                shapes: t,
                curveSegments: e
            },
            this.fromBufferGeometry(new qi(t, e)),
            this.mergeVertices()
    }
    function qi(t, e) {
        function i(t) {
            var i, s, l, c = r.length / 3, u = t.extractPoints(e), d = u.shape, p = u.holes;
            if (!1 === Ah.isClockWise(d))
                for (d = d.reverse(),
                    i = 0,
                    s = p.length; i < s; i++)
                    l = p[i],
                        !0 === Ah.isClockWise(l) && (p[i] = l.reverse());
            var f = Ah.triangulateShape(d, p);
            for (i = 0,
                s = p.length; i < s; i++)
                l = p[i],
                    d = d.concat(l);
            for (i = 0,
                s = d.length; i < s; i++) {
                var m = d[i];
                r.push(m.x, m.y, 0),
                    o.push(0, 0, 1),
                    a.push(m.x, m.y)
            }
            for (i = 0,
                s = f.length; i < s; i++) {
                var v = f[i]
                    , g = v[0] + c
                    , _ = v[1] + c
                    , y = v[2] + c;
                n.push(g, _, y),
                    h += 3
            }
        }
        Pt.call(this),
            this.type = "ShapeBufferGeometry",
            this.parameters = {
                shapes: t,
                curveSegments: e
            },
            e = e || 12;
        var n = []
            , r = []
            , o = []
            , a = []
            , s = 0
            , h = 0;
        if (!1 === Array.isArray(t))
            i(t);
        else
            for (var l = 0; l < t.length; l++)
                i(t[l]),
                    this.addGroup(s, h, l),
                    s += h,
                    h = 0;
        this.setIndex(n),
            this.addAttribute("position", new Et(r, 3)),
            this.addAttribute("normal", new Et(o, 3)),
            this.addAttribute("uv", new Et(a, 2))
    }
    function Zi(t, e) {
        if (e.shapes = [],
            Array.isArray(t))
            for (var i = 0, n = t.length; i < n; i++) {
                var r = t[i];
                e.shapes.push(r.uuid)
            }
        else
            e.shapes.push(t.uuid);
        return e
    }
    function Ji(t, e) {
        Pt.call(this),
            this.type = "EdgesGeometry",
            this.parameters = {
                thresholdAngle: e
            },
            e = void 0 !== e ? e : 1;
        var i, n, r, o, a = [], s = Math.cos(sh.DEG2RAD * e), h = [0, 0], l = {}, c = ["a", "b", "c"];
        t.isBufferGeometry ? (o = new mt,
            o.fromBufferGeometry(t)) : o = t.clone(),
            o.mergeVertices(),
            o.computeFaceNormals();
        for (var u = o.vertices, d = o.faces, p = 0, f = d.length; p < f; p++)
            for (var m = d[p], v = 0; v < 3; v++)
                i = m[c[v]],
                    n = m[c[(v + 1) % 3]],
                    h[0] = Math.min(i, n),
                    h[1] = Math.max(i, n),
                    r = h[0] + "," + h[1],
                    void 0 === l[r] ? l[r] = {
                        index1: h[0],
                        index2: h[1],
                        face1: p,
                        face2: void 0
                    } : l[r].face2 = p;
        for (r in l) {
            var g = l[r];
            if (void 0 === g.face2 || d[g.face1].normal.dot(d[g.face2].normal) <= s) {
                var _ = u[g.index1];
                a.push(_.x, _.y, _.z),
                    _ = u[g.index2],
                    a.push(_.x, _.y, _.z)
            }
        }
        this.addAttribute("position", new Et(a, 3))
    }
    function Ki(t, e, i, n, r, o, a, s) {
        mt.call(this),
            this.type = "CylinderGeometry",
            this.parameters = {
                radiusTop: t,
                radiusBottom: e,
                height: i,
                radialSegments: n,
                heightSegments: r,
                openEnded: o,
                thetaStart: a,
                thetaLength: s
            },
            this.fromBufferGeometry(new Qi(t, e, i, n, r, o, a, s)),
            this.mergeVertices()
    }
    function Qi(t, e, i, n, o, a, h, l) {
        function c(i) {
            var o, a, c, g = new r, x = new s, b = 0, w = !0 === i ? t : e, S = !0 === i ? 1 : -1;
            for (a = v,
                o = 1; o <= n; o++)
                p.push(0, _ * S, 0),
                    f.push(0, S, 0),
                    m.push(.5, .5),
                    v++;
            for (c = v,
                o = 0; o <= n; o++) {
                var E = o / n
                    , T = E * l + h
                    , M = Math.cos(T)
                    , A = Math.sin(T);
                x.x = w * A,
                    x.y = _ * S,
                    x.z = w * M,
                    p.push(x.x, x.y, x.z),
                    f.push(0, S, 0),
                    g.x = .5 * M + .5,
                    g.y = .5 * A * S + .5,
                    m.push(g.x, g.y),
                    v++
            }
            for (o = 0; o < n; o++) {
                var P = a + o
                    , R = c + o;
                !0 === i ? d.push(R, R + 1, P) : d.push(R + 1, R, P),
                    b += 3
            }
            u.addGroup(y, b, !0 === i ? 1 : 2),
                y += b
        }
        Pt.call(this),
            this.type = "CylinderBufferGeometry",
            this.parameters = {
                radiusTop: t,
                radiusBottom: e,
                height: i,
                radialSegments: n,
                heightSegments: o,
                openEnded: a,
                thetaStart: h,
                thetaLength: l
            };
        var u = this;
        t = void 0 !== t ? t : 1,
            e = void 0 !== e ? e : 1,
            i = i || 1,
            n = Math.floor(n) || 8,
            o = Math.floor(o) || 1,
            a = void 0 !== a && a,
            h = void 0 !== h ? h : 0,
            l = void 0 !== l ? l : 2 * Math.PI;
        var d = []
            , p = []
            , f = []
            , m = []
            , v = 0
            , g = []
            , _ = i / 2
            , y = 0;
        !function () {
            var r, a, c = new s, x = new s, b = 0, w = (e - t) / i;
            for (a = 0; a <= o; a++) {
                var S = []
                    , E = a / o
                    , T = E * (e - t) + t;
                for (r = 0; r <= n; r++) {
                    var M = r / n
                        , A = M * l + h
                        , P = Math.sin(A)
                        , R = Math.cos(A);
                    x.x = T * P,
                        x.y = -E * i + _,
                        x.z = T * R,
                        p.push(x.x, x.y, x.z),
                        c.set(P, w, R).normalize(),
                        f.push(c.x, c.y, c.z),
                        m.push(M, 1 - E),
                        S.push(v++)
                }
                g.push(S)
            }
            for (r = 0; r < n; r++)
                for (a = 0; a < o; a++) {
                    var L = g[a][r]
                        , O = g[a + 1][r]
                        , I = g[a + 1][r + 1]
                        , C = g[a][r + 1];
                    d.push(L, O, C),
                        d.push(O, I, C),
                        b += 6
                }
            u.addGroup(y, b, 0),
                y += b
        }(),
            !1 === a && (t > 0 && c(!0),
                e > 0 && c(!1)),
            this.setIndex(d),
            this.addAttribute("position", new Et(p, 3)),
            this.addAttribute("normal", new Et(f, 3)),
            this.addAttribute("uv", new Et(m, 2))
    }
    function $i(t, e, i, n, r, o, a) {
        Ki.call(this, 0, t, e, i, n, r, o, a),
            this.type = "ConeGeometry",
            this.parameters = {
                radius: t,
                height: e,
                radialSegments: i,
                heightSegments: n,
                openEnded: r,
                thetaStart: o,
                thetaLength: a
            }
    }
    function tn(t, e, i, n, r, o, a) {
        Qi.call(this, 0, t, e, i, n, r, o, a),
            this.type = "ConeBufferGeometry",
            this.parameters = {
                radius: t,
                height: e,
                radialSegments: i,
                heightSegments: n,
                openEnded: r,
                thetaStart: o,
                thetaLength: a
            }
    }
    function en(t, e, i, n) {
        mt.call(this),
            this.type = "CircleGeometry",
            this.parameters = {
                radius: t,
                segments: e,
                thetaStart: i,
                thetaLength: n
            },
            this.fromBufferGeometry(new nn(t, e, i, n)),
            this.mergeVertices()
    }
    function nn(t, e, i, n) {
        Pt.call(this),
            this.type = "CircleBufferGeometry",
            this.parameters = {
                radius: t,
                segments: e,
                thetaStart: i,
                thetaLength: n
            },
            t = t || 1,
            e = void 0 !== e ? Math.max(3, e) : 8,
            i = void 0 !== i ? i : 0,
            n = void 0 !== n ? n : 2 * Math.PI;
        var o, a, h = [], l = [], c = [], u = [], d = new s, p = new r;
        for (l.push(0, 0, 0),
            c.push(0, 0, 1),
            u.push(.5, .5),
            a = 0,
            o = 3; a <= e; a++,
            o += 3) {
            var f = i + a / e * n;
            d.x = t * Math.cos(f),
                d.y = t * Math.sin(f),
                l.push(d.x, d.y, d.z),
                c.push(0, 0, 1),
                p.x = (l[o] / t + 1) / 2,
                p.y = (l[o + 1] / t + 1) / 2,
                u.push(p.x, p.y)
        }
        for (o = 1; o <= e; o++)
            h.push(o, o + 1, 0);
        this.setIndex(h),
            this.addAttribute("position", new Et(l, 3)),
            this.addAttribute("normal", new Et(c, 3)),
            this.addAttribute("uv", new Et(u, 2))
    }
    function rn(t) {
        tt.call(this),
            this.type = "ShadowMaterial",
            this.color = new Z(0),
            this.opacity = 1,
            this.lights = !0,
            this.transparent = !0,
            this.setValues(t)
    }
    function on(t) {
        Dt.call(this, t),
            this.type = "RawShaderMaterial"
    }
    function an(t) {
        tt.call(this),
            this.defines = {
                STANDARD: ""
            },
            this.type = "MeshStandardMaterial",
            this.color = new Z(16777215),
            this.roughness = .5,
            this.metalness = .5,
            this.map = null,
            this.lightMap = null,
            this.lightMapIntensity = 1,
            this.aoMap = null,
            this.aoMapIntensity = 1,
            this.emissive = new Z(0),
            this.emissiveIntensity = 1,
            this.emissiveMap = null,
            this.bumpMap = null,
            this.bumpScale = 1,
            this.normalMap = null,
            this.normalScale = new r(1, 1),
            this.displacementMap = null,
            this.displacementScale = 1,
            this.displacementBias = 0,
            this.roughnessMap = null,
            this.metalnessMap = null,
            this.alphaMap = null,
            this.envMap = null,
            this.envMapIntensity = 1,
            this.refractionRatio = .98,
            this.wireframe = !1,
            this.wireframeLinewidth = 1,
            this.wireframeLinecap = "round",
            this.wireframeLinejoin = "round",
            this.skinning = !1,
            this.morphTargets = !1,
            this.morphNormals = !1,
            this.setValues(t)
    }
    function sn(t) {
        an.call(this),
            this.defines = {
                PHYSICAL: ""
            },
            this.type = "MeshPhysicalMaterial",
            this.reflectivity = .5,
            this.clearCoat = 0,
            this.clearCoatRoughness = 0,
            this.setValues(t)
    }
    function hn(t) {
        tt.call(this),
            this.type = "MeshPhongMaterial",
            this.color = new Z(16777215),
            this.specular = new Z(1118481),
            this.shininess = 30,
            this.map = null,
            this.lightMap = null,
            this.lightMapIntensity = 1,
            this.aoMap = null,
            this.aoMapIntensity = 1,
            this.emissive = new Z(0),
            this.emissiveIntensity = 1,
            this.emissiveMap = null,
            this.bumpMap = null,
            this.bumpScale = 1,
            this.normalMap = null,
            this.normalScale = new r(1, 1),
            this.displacementMap = null,
            this.displacementScale = 1,
            this.displacementBias = 0,
            this.specularMap = null,
            this.alphaMap = null,
            this.envMap = null,
            this.combine = za,
            this.reflectivity = 1,
            this.refractionRatio = .98,
            this.wireframe = !1,
            this.wireframeLinewidth = 1,
            this.wireframeLinecap = "round",
            this.wireframeLinejoin = "round",
            this.skinning = !1,
            this.morphTargets = !1,
            this.morphNormals = !1,
            this.setValues(t)
    }
    function ln(t) {
        hn.call(this),
            this.defines = {
                TOON: ""
            },
            this.type = "MeshToonMaterial",
            this.gradientMap = null,
            this.setValues(t)
    }
    function cn(t) {
        tt.call(this),
            this.type = "MeshNormalMaterial",
            this.bumpMap = null,
            this.bumpScale = 1,
            this.normalMap = null,
            this.normalScale = new r(1, 1),
            this.displacementMap = null,
            this.displacementScale = 1,
            this.displacementBias = 0,
            this.wireframe = !1,
            this.wireframeLinewidth = 1,
            this.fog = !1,
            this.lights = !1,
            this.skinning = !1,
            this.morphTargets = !1,
            this.morphNormals = !1,
            this.setValues(t)
    }
    function un(t) {
        tt.call(this),
            this.type = "MeshLambertMaterial",
            this.color = new Z(16777215),
            this.map = null,
            this.lightMap = null,
            this.lightMapIntensity = 1,
            this.aoMap = null,
            this.aoMapIntensity = 1,
            this.emissive = new Z(0),
            this.emissiveIntensity = 1,
            this.emissiveMap = null,
            this.specularMap = null,
            this.alphaMap = null,
            this.envMap = null,
            this.combine = za,
            this.reflectivity = 1,
            this.refractionRatio = .98,
            this.wireframe = !1,
            this.wireframeLinewidth = 1,
            this.wireframeLinecap = "round",
            this.wireframeLinejoin = "round",
            this.skinning = !1,
            this.morphTargets = !1,
            this.morphNormals = !1,
            this.setValues(t)
    }
    function dn(t) {
        De.call(this),
            this.type = "LineDashedMaterial",
            this.scale = 1,
            this.dashSize = 3,
            this.gapSize = 1,
            this.setValues(t)
    }
    function pn(t, e, i) {
        var n = this
            , r = !1
            , o = 0
            , a = 0
            , s = void 0;
        this.onStart = void 0,
            this.onLoad = t,
            this.onProgress = e,
            this.onError = i,
            this.itemStart = function (t) {
                a++,
                    !1 === r && void 0 !== n.onStart && n.onStart(t, o, a),
                    r = !0
            }
            ,
            this.itemEnd = function (t) {
                o++,
                    void 0 !== n.onProgress && n.onProgress(t, o, a),
                    o === a && (r = !1,
                        void 0 !== n.onLoad && n.onLoad())
            }
            ,
            this.itemError = function (t) {
                void 0 !== n.onError && n.onError(t)
            }
            ,
            this.resolveURL = function (t) {
                return s ? s(t) : t
            }
            ,
            this.setURLModifier = function (t) {
                return s = t,
                    this
            }
    }
    function fn(t) {
        this.manager = void 0 !== t ? t : Oh
    }
    function mn(t) {
        this.manager = void 0 !== t ? t : Oh,
            this._parser = null
    }
    function vn(t) {
        this.manager = void 0 !== t ? t : Oh,
            this._parser = null
    }
    function gn(t) {
        this.manager = void 0 !== t ? t : Oh
    }
    function _n(t) {
        this.manager = void 0 !== t ? t : Oh
    }
    function yn(t) {
        this.manager = void 0 !== t ? t : Oh
    }
    function xn() {
        this.type = "Curve",
            this.arcLengthDivisions = 200
    }
    function bn(t, e, i, n, r, o, a, s) {
        xn.call(this),
            this.type = "EllipseCurve",
            this.aX = t || 0,
            this.aY = e || 0,
            this.xRadius = i || 1,
            this.yRadius = n || 1,
            this.aStartAngle = r || 0,
            this.aEndAngle = o || 2 * Math.PI,
            this.aClockwise = a || !1,
            this.aRotation = s || 0
    }
    function wn(t, e, i, n, r, o) {
        bn.call(this, t, e, i, i, n, r, o),
            this.type = "ArcCurve"
    }
    function Sn() {
        function t(t, o, a, s) {
            e = t,
                i = a,
                n = -3 * t + 3 * o - 2 * a - s,
                r = 2 * t - 2 * o + a + s
        }
        var e = 0
            , i = 0
            , n = 0
            , r = 0;
        return {
            initCatmullRom: function (e, i, n, r, o) {
                t(i, n, o * (n - e), o * (r - i))
            },
            initNonuniformCatmullRom: function (e, i, n, r, o, a, s) {
                var h = (i - e) / o - (n - e) / (o + a) + (n - i) / a
                    , l = (n - i) / a - (r - i) / (a + s) + (r - n) / s;
                h *= a,
                    l *= a,
                    t(i, n, h, l)
            },
            calc: function (t) {
                var o = t * t;
                return e + i * t + n * o + r * (o * t)
            }
        }
    }
    function En(t, e, i, n) {
        xn.call(this),
            this.type = "CatmullRomCurve3",
            this.points = t || [],
            this.closed = e || !1,
            this.curveType = i || "centripetal",
            this.tension = n || .5
    }
    function Tn(t, e, i, n, r) {
        var o = .5 * (n - e)
            , a = .5 * (r - i)
            , s = t * t;
        return (2 * i - 2 * n + o + a) * (t * s) + (-3 * i + 3 * n - 2 * o - a) * s + o * t + i
    }
    function Mn(t, e) {
        var i = 1 - t;
        return i * i * e
    }
    function An(t, e) {
        return 2 * (1 - t) * t * e
    }
    function Pn(t, e) {
        return t * t * e
    }
    function Rn(t, e, i, n) {
        return Mn(t, e) + An(t, i) + Pn(t, n)
    }
    function Ln(t, e) {
        var i = 1 - t;
        return i * i * i * e
    }
    function On(t, e) {
        var i = 1 - t;
        return 3 * i * i * t * e
    }
    function In(t, e) {
        return 3 * (1 - t) * t * t * e
    }
    function Cn(t, e) {
        return t * t * t * e
    }
    function Dn(t, e, i, n, r) {
        return Ln(t, e) + On(t, i) + In(t, n) + Cn(t, r)
    }
    function Nn(t, e, i, n) {
        xn.call(this),
            this.type = "CubicBezierCurve",
            this.v0 = t || new r,
            this.v1 = e || new r,
            this.v2 = i || new r,
            this.v3 = n || new r
    }
    function Un(t, e, i, n) {
        xn.call(this),
            this.type = "CubicBezierCurve3",
            this.v0 = t || new s,
            this.v1 = e || new s,
            this.v2 = i || new s,
            this.v3 = n || new s
    }
    function Bn(t, e) {
        xn.call(this),
            this.type = "LineCurve",
            this.v1 = t || new r,
            this.v2 = e || new r
    }
    function Fn(t, e) {
        xn.call(this),
            this.type = "LineCurve3",
            this.v1 = t || new s,
            this.v2 = e || new s
    }
    function zn(t, e, i) {
        xn.call(this),
            this.type = "QuadraticBezierCurve",
            this.v0 = t || new r,
            this.v1 = e || new r,
            this.v2 = i || new r
    }
    function Gn(t, e, i) {
        xn.call(this),
            this.type = "QuadraticBezierCurve3",
            this.v0 = t || new s,
            this.v1 = e || new s,
            this.v2 = i || new s
    }
    function jn(t) {
        xn.call(this),
            this.type = "SplineCurve",
            this.points = t || []
    }
    function kn() {
        xn.call(this),
            this.type = "CurvePath",
            this.curves = [],
            this.autoClose = !1
    }
    function Hn(t) {
        kn.call(this),
            this.type = "Path",
            this.currentPoint = new r,
            t && this.setFromPoints(t)
    }
    function Vn(t) {
        Hn.call(this, t),
            this.uuid = sh.generateUUID(),
            this.type = "Shape",
            this.holes = []
    }
    function Wn(t, e) {
        ut.call(this),
            this.type = "Light",
            this.color = new Z(t),
            this.intensity = void 0 !== e ? e : 1,
            this.receiveShadow = void 0
    }
    function Xn(t, e, i) {
        Wn.call(this, t, i),
            this.type = "HemisphereLight",
            this.castShadow = void 0,
            this.position.copy(ut.DefaultUp),
            this.updateMatrix(),
            this.groundColor = new Z(e)
    }
    function Yn(t) {
        this.camera = t,
            this.bias = 0,
            this.radius = 1,
            this.mapSize = new r(512, 512),
            this.map = null,
            this.matrix = new o
    }
    function qn() {
        Yn.call(this, new ge(50, 1, .5, 500))
    }
    function Zn(t, e, i, n, r, o) {
        Wn.call(this, t, e),
            this.type = "SpotLight",
            this.position.copy(ut.DefaultUp),
            this.updateMatrix(),
            this.target = new ut,
            Object.defineProperty(this, "power", {
                get: function () {
                    return this.intensity * Math.PI
                },
                set: function (t) {
                    this.intensity = t / Math.PI
                }
            }),
            this.distance = void 0 !== i ? i : 0,
            this.angle = void 0 !== n ? n : Math.PI / 3,
            this.penumbra = void 0 !== r ? r : 0,
            this.decay = void 0 !== o ? o : 1,
            this.shadow = new qn
    }
    function Jn(t, e, i, n) {
        Wn.call(this, t, e),
            this.type = "PointLight",
            Object.defineProperty(this, "power", {
                get: function () {
                    return 4 * this.intensity * Math.PI
                },
                set: function (t) {
                    this.intensity = t / (4 * Math.PI)
                }
            }),
            this.distance = void 0 !== i ? i : 0,
            this.decay = void 0 !== n ? n : 1,
            this.shadow = new Yn(new ge(90, 1, .5, 500))
    }
    function Kn() {
        Yn.call(this, new pt(-5, 5, 5, -5, .5, 500))
    }
    function Qn(t, e) {
        Wn.call(this, t, e),
            this.type = "DirectionalLight",
            this.position.copy(ut.DefaultUp),
            this.updateMatrix(),
            this.target = new ut,
            this.shadow = new Kn
    }
    function $n(t, e) {
        Wn.call(this, t, e),
            this.type = "AmbientLight",
            this.castShadow = void 0
    }
    function tr(t, e, i, n) {
        Wn.call(this, t, e),
            this.type = "RectAreaLight",
            this.position.set(0, 1, 0),
            this.updateMatrix(),
            this.width = void 0 !== i ? i : 10,
            this.height = void 0 !== n ? n : 10
    }
    function er(t, e, i, n) {
        ur.call(this, t, e, i, n)
    }
    function ir(t, e, i) {
        ur.call(this, t, e, i)
    }
    function nr(t, e, i, n) {
        this.parameterPositions = t,
            this._cachedIndex = 0,
            this.resultBuffer = void 0 !== n ? n : new e.constructor(i),
            this.sampleValues = e,
            this.valueSize = i
    }
    function rr(t, e, i, n) {
        nr.call(this, t, e, i, n)
    }
    function or(t, e, i, n) {
        ur.call(this, t, e, i, n)
    }
    function ar(t, e, i, n) {
        ur.call(this, t, e, i, n)
    }
    function sr(t, e, i, n) {
        ur.call(this, t, e, i, n)
    }
    function hr(t, e, i, n) {
        nr.call(this, t, e, i, n),
            this._weightPrev = -0,
            this._offsetPrev = -0,
            this._weightNext = -0,
            this._offsetNext = -0
    }
    function lr(t, e, i, n) {
        nr.call(this, t, e, i, n)
    }
    function cr(t, e, i, n) {
        nr.call(this, t, e, i, n)
    }
    function ur(t, e, i, n) {
        if (void 0 === t)
            throw new Error("THREE.KeyframeTrack: track name is undefined");
        if (void 0 === e || 0 === e.length)
            throw new Error("THREE.KeyframeTrack: no keyframes in track named " + t);
        this.name = t,
            this.times = Fh.convertArray(e, this.TimeBufferType),
            this.values = Fh.convertArray(i, this.ValueBufferType),
            this.setInterpolation(n || this.DefaultInterpolation),
            this.validate(),
            this.optimize()
    }
    function dr(t, e, i, n) {
        ur.call(this, t, e, i, n)
    }
    function pr(t, e, i) {
        this.name = t,
            this.tracks = i,
            this.duration = void 0 !== e ? e : -1,
            this.uuid = sh.generateUUID(),
            this.duration < 0 && this.resetDuration(),
            this.optimize()
    }
    function fr(t) {
        this.manager = void 0 !== t ? t : Oh,
            this.textures = {}
    }
    function mr(t) {
        this.manager = void 0 !== t ? t : Oh
    }
    function vr() {
        this.onLoadStart = function () { }
            ,
            this.onLoadProgress = function () { }
            ,
            this.onLoadComplete = function () { }
    }
    function gr(t) {
        "boolean" == typeof t && (console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."),
            t = void 0),
            this.manager = void 0 !== t ? t : Oh,
            this.withCredentials = !1
    }
    function _r(t) {
        this.manager = void 0 !== t ? t : Oh,
            this.texturePath = ""
    }
    function yr(t) {
        "undefined" == typeof createImageBitmap && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),
            "undefined" == typeof fetch && console.warn("THREE.ImageBitmapLoader: fetch() not supported."),
            this.manager = void 0 !== t ? t : Oh,
            this.options = void 0
    }
    function xr() {
        this.type = "ShapePath",
            this.subPaths = [],
            this.currentPath = null
    }
    function br(t) {
        this.type = "Font",
            this.data = t
    }
    function wr(t) {
        this.manager = void 0 !== t ? t : Oh
    }
    function Sr(t) {
        this.manager = void 0 !== t ? t : Oh
    }
    function Er() {
        this.type = "StereoCamera",
            this.aspect = 1,
            this.eyeSep = .064,
            this.cameraL = new ge,
            this.cameraL.layers.enable(1),
            this.cameraL.matrixAutoUpdate = !1,
            this.cameraR = new ge,
            this.cameraR.layers.enable(2),
            this.cameraR.matrixAutoUpdate = !1
    }
    function Tr(t, e, i) {
        ut.call(this),
            this.type = "CubeCamera";
        var n = new ge(90, 1, t, e);
        n.up.set(0, -1, 0),
            n.lookAt(new s(1, 0, 0)),
            this.add(n);
        var r = new ge(90, 1, t, e);
        r.up.set(0, -1, 0),
            r.lookAt(new s(-1, 0, 0)),
            this.add(r);
        var o = new ge(90, 1, t, e);
        o.up.set(0, 0, 1),
            o.lookAt(new s(0, 1, 0)),
            this.add(o);
        var a = new ge(90, 1, t, e);
        a.up.set(0, 0, -1),
            a.lookAt(new s(0, -1, 0)),
            this.add(a);
        var h = new ge(90, 1, t, e);
        h.up.set(0, -1, 0),
            h.lookAt(new s(0, 0, 1)),
            this.add(h);
        var l = new ge(90, 1, t, e);
        l.up.set(0, -1, 0),
            l.lookAt(new s(0, 0, -1)),
            this.add(l);
        var c = {
            format: Ss,
            magFilter: ss,
            minFilter: ss
        };
        this.renderTarget = new d(i, i, c),
            this.renderTarget.texture.name = "CubeCamera",
            this.update = function (t, e) {
                null === this.parent && this.updateMatrixWorld();
                var i = this.renderTarget
                    , s = i.texture.generateMipmaps;
                i.texture.generateMipmaps = !1,
                    i.activeCubeFace = 0,
                    t.render(e, n, i),
                    i.activeCubeFace = 1,
                    t.render(e, r, i),
                    i.activeCubeFace = 2,
                    t.render(e, o, i),
                    i.activeCubeFace = 3,
                    t.render(e, a, i),
                    i.activeCubeFace = 4,
                    t.render(e, h, i),
                    i.texture.generateMipmaps = s,
                    i.activeCubeFace = 5,
                    t.render(e, l, i),
                    t.setRenderTarget(null)
            }
            ,
            this.clear = function (t, e, i, n) {
                for (var r = this.renderTarget, o = 0; o < 6; o++)
                    r.activeCubeFace = o,
                        t.setRenderTarget(r),
                        t.clear(e, i, n);
                t.setRenderTarget(null)
            }
    }
    function Mr() {
        ut.call(this),
            this.type = "AudioListener",
            this.context = Wh.getContext(),
            this.gain = this.context.createGain(),
            this.gain.connect(this.context.destination),
            this.filter = null
    }
    function Ar(t) {
        ut.call(this),
            this.type = "Audio",
            this.context = t.context,
            this.gain = this.context.createGain(),
            this.gain.connect(t.getInput()),
            this.autoplay = !1,
            this.buffer = null,
            this.loop = !1,
            this.startTime = 0,
            this.offset = 0,
            this.playbackRate = 1,
            this.isPlaying = !1,
            this.hasPlaybackControl = !0,
            this.sourceType = "empty",
            this.filters = []
    }
    function Pr(t) {
        Ar.call(this, t),
            this.panner = this.context.createPanner(),
            this.panner.connect(this.gain)
    }
    function Rr(t, e) {
        this.analyser = t.context.createAnalyser(),
            this.analyser.fftSize = void 0 !== e ? e : 2048,
            this.data = new Uint8Array(this.analyser.frequencyBinCount),
            t.getOutput().connect(this.analyser)
    }
    function Lr(t, e, i) {
        this.binding = t,
            this.valueSize = i;
        var n, r = Float64Array;
        switch (e) {
            case "quaternion":
                n = this._slerp;
                break;
            case "string":
            case "bool":
                r = Array,
                    n = this._select;
                break;
            default:
                n = this._lerp
        }
        this.buffer = new r(4 * i),
            this._mixBufferRegion = n,
            this.cumulativeWeight = 0,
            this.useCount = 0,
            this.referenceCount = 0
    }
    function Or(t, e, i) {
        var n = i || Ir.parseTrackName(e);
        this._targetGroup = t,
            this._bindings = t.subscribe_(e, n)
    }
    function Ir(t, e, i) {
        this.path = e,
            this.parsedPath = i || Ir.parseTrackName(e),
            this.node = Ir.findNode(t, this.parsedPath.nodeName) || t,
            this.rootNode = t
    }
    function Cr() {
        this.uuid = sh.generateUUID(),
            this._objects = Array.prototype.slice.call(arguments),
            this.nCachedObjects_ = 0;
        var t = {};
        this._indicesByUUID = t;
        for (var e = 0, i = arguments.length; e !== i; ++e)
            t[arguments[e].uuid] = e;
        this._paths = [],
            this._parsedPaths = [],
            this._bindings = [],
            this._bindingsIndicesByPath = {};
        var n = this;
        this.stats = {
            objects: {
                get total() {
                    return n._objects.length
                },
                get inUse() {
                    return this.total - n.nCachedObjects_
                }
            },
            get bindingsPerObject() {
                return n._bindings.length
            }
        }
    }
    function Dr(t, e, i) {
        this._mixer = t,
            this._clip = e,
            this._localRoot = i || null;
        for (var n = e.tracks, r = n.length, o = new Array(r), a = {
            endingStart: Ws,
            endingEnd: Ws
        }, s = 0; s !== r; ++s) {
            var h = n[s].createInterpolant(null);
            o[s] = h,
                h.settings = a
        }
        this._interpolantSettings = a,
            this._interpolants = o,
            this._propertyBindings = new Array(r),
            this._cacheIndex = null,
            this._byClipCacheIndex = null,
            this._timeScaleInterpolant = null,
            this._weightInterpolant = null,
            this.loop = Gs,
            this._loopCount = -1,
            this._startTime = null,
            this.time = 0,
            this.timeScale = 1,
            this._effectiveTimeScale = 1,
            this.weight = 1,
            this._effectiveWeight = 1,
            this.repetitions = 1 / 0,
            this.paused = !1,
            this.enabled = !0,
            this.clampWhenFinished = !1,
            this.zeroSlopeAtStart = !0,
            this.zeroSlopeAtEnd = !0
    }
    function Nr(t) {
        this._root = t,
            this._initMemoryManager(),
            this._accuIndex = 0,
            this.time = 0,
            this.timeScale = 1
    }
    function Ur(t) {
        "string" == typeof t && (console.warn("THREE.Uniform: Type parameter is no longer needed."),
            t = arguments[1]),
            this.value = t
    }
    function Br() {
        Pt.call(this),
            this.type = "InstancedBufferGeometry",
            this.maxInstancedCount = void 0
    }
    function Fr(t, e, i, n) {
        this.uuid = sh.generateUUID(),
            this.data = t,
            this.itemSize = e,
            this.offset = i,
            this.normalized = !0 === n
    }
    function zr(t, e) {
        this.uuid = sh.generateUUID(),
            this.array = t,
            this.stride = e,
            this.count = void 0 !== t ? t.length / e : 0,
            this.dynamic = !1,
            this.updateRange = {
                offset: 0,
                count: -1
            },
            this.onUploadCallback = function () { }
            ,
            this.version = 0
    }
    function Gr(t, e, i) {
        zr.call(this, t, e),
            this.meshPerAttribute = i || 1
    }
    function jr(t, e, i) {
        vt.call(this, t, e),
            this.meshPerAttribute = i || 1
    }
    function kr(t, e, i, n) {
        this.ray = new Nt(t, e),
            this.near = i || 0,
            this.far = n || 1 / 0,
            this.params = {
                Mesh: {},
                Line: {},
                LOD: {},
                Points: {
                    threshold: 1
                },
                Sprite: {}
            },
            Object.defineProperties(this.params, {
                PointCloud: {
                    get: function () {
                        return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),
                            this.Points
                    }
                }
            })
    }
    function Hr(t, e) {
        return t.distance - e.distance
    }
    function Vr(t, e, i, n) {
        if (!1 !== t.visible && (t.raycast(e, i),
            !0 === n))
            for (var r = t.children, o = 0, a = r.length; o < a; o++)
                Vr(r[o], e, i, !0)
    }
    function Wr(t) {
        this.autoStart = void 0 === t || t,
            this.startTime = 0,
            this.oldTime = 0,
            this.elapsedTime = 0,
            this.running = !1
    }
    function Xr(t, e, i) {
        return this.radius = void 0 !== t ? t : 1,
            this.phi = void 0 !== e ? e : 0,
            this.theta = void 0 !== i ? i : 0,
            this
    }
    function Yr(t, e, i) {
        return this.radius = void 0 !== t ? t : 1,
            this.theta = void 0 !== e ? e : 0,
            this.y = void 0 !== i ? i : 0,
            this
    }
    function qr(t) {
        ut.call(this),
            this.material = t,
            this.render = function () { }
    }
    function Zr(t, e, i, n) {
        this.object = t,
            this.size = void 0 !== e ? e : 1;
        var r = void 0 !== i ? i : 16711680
            , o = void 0 !== n ? n : 1
            , a = 0
            , s = this.object.geometry;
        s && s.isGeometry ? a = 3 * s.faces.length : s && s.isBufferGeometry && (a = s.attributes.normal.count);
        var h = new Pt
            , l = new Et(2 * a * 3, 3);
        h.addAttribute("position", l),
            Ue.call(this, h, new De({
                color: r,
                linewidth: o
            })),
            this.matrixAutoUpdate = !1,
            this.update()
    }
    function Jr(t, e) {
        ut.call(this),
            this.light = t,
            this.light.updateMatrixWorld(),
            this.matrix = t.matrixWorld,
            this.matrixAutoUpdate = !1,
            this.color = e;
        for (var i = new Pt, n = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1], r = 0, o = 1; r < 32; r++,
            o++) {
            var a = r / 32 * Math.PI * 2
                , s = o / 32 * Math.PI * 2;
            n.push(Math.cos(a), Math.sin(a), 1, Math.cos(s), Math.sin(s), 1)
        }
        i.addAttribute("position", new Et(n, 3));
        var h = new De({
            fog: !1
        });
        this.cone = new Ue(i, h),
            this.add(this.cone),
            this.update()
    }
    function Kr(t) {
        var e = [];
        t && t.isBone && e.push(t);
        for (var i = 0; i < t.children.length; i++)
            e.push.apply(e, Kr(t.children[i]));
        return e
    }
    function Qr(t) {
        for (var e = Kr(t), i = new Pt, n = [], r = [], o = new Z(0, 0, 1), a = new Z(0, 1, 0), s = 0; s < e.length; s++) {
            var h = e[s];
            h.parent && h.parent.isBone && (n.push(0, 0, 0),
                n.push(0, 0, 0),
                r.push(o.r, o.g, o.b),
                r.push(a.r, a.g, a.b))
        }
        i.addAttribute("position", new Et(n, 3)),
            i.addAttribute("color", new Et(r, 3));
        var l = new De({
            vertexColors: ha,
            depthTest: !1,
            depthWrite: !1,
            transparent: !0
        });
        Ue.call(this, i, l),
            this.root = t,
            this.bones = e,
            this.matrix = t.matrixWorld,
            this.matrixAutoUpdate = !1
    }
    function $r(t, e, i) {
        this.light = t,
            this.light.updateMatrixWorld(),
            this.color = i;
        var n = new ki(e, 4, 2)
            , r = new Ct({
                wireframe: !0,
                fog: !1
            });
        Ft.call(this, n, r),
            this.matrix = this.light.matrixWorld,
            this.matrixAutoUpdate = !1,
            this.update()
    }
    function to(t, e) {
        ut.call(this),
            this.light = t,
            this.light.updateMatrixWorld(),
            this.matrix = t.matrixWorld,
            this.matrixAutoUpdate = !1,
            this.color = e;
        var i = new De({
            fog: !1
        })
            , n = new Pt;
        n.addAttribute("position", new vt(new Float32Array(15), 3)),
            this.line = new Ne(n, i),
            this.add(this.line),
            this.update()
    }
    function eo(t, e, i) {
        ut.call(this),
            this.light = t,
            this.light.updateMatrixWorld(),
            this.matrix = t.matrixWorld,
            this.matrixAutoUpdate = !1,
            this.color = i;
        var n = new Qe(e);
        n.rotateY(.5 * Math.PI),
            this.material = new Ct({
                wireframe: !0,
                fog: !1
            }),
            void 0 === this.color && (this.material.vertexColors = ha);
        var r = n.getAttribute("position")
            , o = new Float32Array(3 * r.count);
        n.addAttribute("color", new vt(o, 3)),
            this.add(new Ft(n, this.material)),
            this.update()
    }
    function io(t, e, i, n) {
        t = t || 10,
            e = e || 10,
            i = new Z(void 0 !== i ? i : 4473924),
            n = new Z(void 0 !== n ? n : 8947848);
        for (var r = e / 2, o = t / e, a = t / 2, s = [], h = [], l = 0, c = 0, u = -a; l <= e; l++,
            u += o) {
            s.push(-a, 0, u, a, 0, u),
                s.push(u, 0, -a, u, 0, a);
            var d = l === r ? i : n;
            d.toArray(h, c),
                c += 3,
                d.toArray(h, c),
                c += 3,
                d.toArray(h, c),
                c += 3,
                d.toArray(h, c),
                c += 3
        }
        var p = new Pt;
        p.addAttribute("position", new Et(s, 3)),
            p.addAttribute("color", new Et(h, 3));
        var f = new De({
            vertexColors: ha
        });
        Ue.call(this, p, f)
    }
    function no(t, e, i, n, r, o) {
        t = t || 10,
            e = e || 16,
            i = i || 8,
            n = n || 64,
            r = new Z(void 0 !== r ? r : 4473924),
            o = new Z(void 0 !== o ? o : 8947848);
        var a, s, h, l, c, u, d, p = [], f = [];
        for (l = 0; l <= e; l++)
            h = l / e * (2 * Math.PI),
                a = Math.sin(h) * t,
                s = Math.cos(h) * t,
                p.push(0, 0, 0),
                p.push(a, 0, s),
                d = 1 & l ? r : o,
                f.push(d.r, d.g, d.b),
                f.push(d.r, d.g, d.b);
        for (l = 0; l <= i; l++)
            for (d = 1 & l ? r : o,
                u = t - t / i * l,
                c = 0; c < n; c++)
                h = c / n * (2 * Math.PI),
                    a = Math.sin(h) * u,
                    s = Math.cos(h) * u,
                    p.push(a, 0, s),
                    f.push(d.r, d.g, d.b),
                    h = (c + 1) / n * (2 * Math.PI),
                    a = Math.sin(h) * u,
                    s = Math.cos(h) * u,
                    p.push(a, 0, s),
                    f.push(d.r, d.g, d.b);
        var m = new Pt;
        m.addAttribute("position", new Et(p, 3)),
            m.addAttribute("color", new Et(f, 3));
        var v = new De({
            vertexColors: ha
        });
        Ue.call(this, m, v)
    }
    function ro(t, e, i, n) {
        this.object = t,
            this.size = void 0 !== e ? e : 1;
        var r = void 0 !== i ? i : 16776960
            , o = void 0 !== n ? n : 1
            , a = 0
            , s = this.object.geometry;
        s && s.isGeometry ? a = s.faces.length : console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");
        var h = new Pt
            , l = new Et(2 * a * 3, 3);
        h.addAttribute("position", l),
            Ue.call(this, h, new De({
                color: r,
                linewidth: o
            })),
            this.matrixAutoUpdate = !1,
            this.update()
    }
    function oo(t, e, i) {
        ut.call(this),
            this.light = t,
            this.light.updateMatrixWorld(),
            this.matrix = t.matrixWorld,
            this.matrixAutoUpdate = !1,
            this.color = i,
            void 0 === e && (e = 1);
        var n = new Pt;
        n.addAttribute("position", new Et([-e, e, 0, e, e, 0, e, -e, 0, -e, -e, 0, -e, e, 0], 3));
        var r = new De({
            fog: !1
        });
        this.lightPlane = new Ne(n, r),
            this.add(this.lightPlane),
            n = new Pt,
            n.addAttribute("position", new Et([0, 0, 0, 0, 0, 1], 3)),
            this.targetLine = new Ne(n, r),
            this.add(this.targetLine),
            this.update()
    }
    function ao(t) {
        function e(t, e, n) {
            i(t, n),
                i(e, n)
        }
        function i(t, e) {
            o.push(0, 0, 0),
                a.push(e.r, e.g, e.b),
                void 0 === s[t] && (s[t] = []),
                s[t].push(o.length / 3 - 1)
        }
        var n = new Pt
            , r = new De({
                color: 16777215,
                vertexColors: sa
            })
            , o = []
            , a = []
            , s = {}
            , h = new Z(16755200)
            , l = new Z(16711680)
            , c = new Z(43775)
            , u = new Z(16777215)
            , d = new Z(3355443);
        e("n1", "n2", h),
            e("n2", "n4", h),
            e("n4", "n3", h),
            e("n3", "n1", h),
            e("f1", "f2", h),
            e("f2", "f4", h),
            e("f4", "f3", h),
            e("f3", "f1", h),
            e("n1", "f1", h),
            e("n2", "f2", h),
            e("n3", "f3", h),
            e("n4", "f4", h),
            e("p", "n1", l),
            e("p", "n2", l),
            e("p", "n3", l),
            e("p", "n4", l),
            e("u1", "u2", c),
            e("u2", "u3", c),
            e("u3", "u1", c),
            e("c", "t", u),
            e("p", "c", d),
            e("cn1", "cn2", d),
            e("cn3", "cn4", d),
            e("cf1", "cf2", d),
            e("cf3", "cf4", d),
            n.addAttribute("position", new Et(o, 3)),
            n.addAttribute("color", new Et(a, 3)),
            Ue.call(this, n, r),
            this.camera = t,
            this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(),
            this.matrix = t.matrixWorld,
            this.matrixAutoUpdate = !1,
            this.pointMap = s,
            this.update()
    }
    function so(t, e) {
        this.object = t,
            void 0 === e && (e = 16776960);
        var i = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7])
            , n = new Float32Array(24)
            , r = new Pt;
        r.setIndex(new vt(i, 1)),
            r.addAttribute("position", new vt(n, 3)),
            Ue.call(this, r, new De({
                color: e
            })),
            this.matrixAutoUpdate = !1,
            this.update()
    }
    function ho(t, e) {
        this.type = "Box3Helper",
            this.box = t;
        var i = void 0 !== e ? e : 16776960
            , n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7])
            , r = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1]
            , o = new Pt;
        o.setIndex(new vt(n, 1)),
            o.addAttribute("position", new Et(r, 3)),
            Ue.call(this, o, new De({
                color: i
            })),
            this.geometry.computeBoundingSphere()
    }
    function lo(t, e, i) {
        this.type = "PlaneHelper",
            this.plane = t,
            this.size = void 0 === e ? 1 : e;
        var n = void 0 !== i ? i : 16776960
            , r = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0]
            , o = new Pt;
        o.addAttribute("position", new Et(r, 3)),
            o.computeBoundingSphere(),
            Ne.call(this, o, new De({
                color: n
            }));
        var a = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1]
            , s = new Pt;
        s.addAttribute("position", new Et(a, 3)),
            s.computeBoundingSphere(),
            this.add(new Ft(s, new Ct({
                color: n,
                opacity: .2,
                transparent: !0,
                depthWrite: !1
            })))
    }
    function co(t, e, i, n, r, o) {
        ut.call(this),
            void 0 === n && (n = 16776960),
            void 0 === i && (i = 1),
            void 0 === r && (r = .2 * i),
            void 0 === o && (o = .2 * r),
            void 0 === Xh && (Xh = new Pt,
                Xh.addAttribute("position", new Et([0, 0, 0, 0, 1, 0], 3)),
                Yh = new Qi(0, .5, 1, 5, 1),
                Yh.translate(0, -.5, 0)),
            this.position.copy(e),
            this.line = new Ne(Xh, new De({
                color: n
            })),
            this.line.matrixAutoUpdate = !1,
            this.add(this.line),
            this.cone = new Ft(Yh, new Ct({
                color: n
            })),
            this.cone.matrixAutoUpdate = !1,
            this.add(this.cone),
            this.setDirection(t),
            this.setLength(i, r, o)
    }
    function uo(t) {
        t = t || 1;
        var e = [0, 0, 0, t, 0, 0, 0, 0, 0, 0, t, 0, 0, 0, 0, 0, 0, t]
            , i = [1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1]
            , n = new Pt;
        n.addAttribute("position", new Et(e, 3)),
            n.addAttribute("color", new Et(i, 3));
        var r = new De({
            vertexColors: ha
        });
        Ue.call(this, n, r)
    }
    function po(t, e, i, n, r, o, a) {
        return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."),
            new ft(t, e, i, r, o, a)
    }
    function fo(t) {
        return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),
            t
    }
    function mo(t) {
        return void 0 === t && (t = []),
            console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),
            t.isMultiMaterial = !0,
            t.materials = t,
            t.clone = function () {
                return t.slice()
            }
            ,
            t
    }
    function vo(t, e) {
        return console.warn("THREE.PointCloud has been renamed to THREE.Points."),
            new ze(t, e)
    }
    function go(t) {
        return console.warn("THREE.Particle has been renamed to THREE.Sprite."),
            new Re(t)
    }
    function _o(t, e) {
        return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),
            new ze(t, e)
    }
    function yo(t) {
        return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),
            new Fe(t)
    }
    function xo(t) {
        return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),
            new Fe(t)
    }
    function bo(t) {
        return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),
            new Fe(t)
    }
    function wo(t, e, i) {
        return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),
            new s(t, e, i)
    }
    function So(t, e) {
        return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead."),
            new vt(t, e).setDynamic(!0)
    }
    function Eo(t, e) {
        return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),
            new gt(t, e)
    }
    function To(t, e) {
        return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),
            new _t(t, e)
    }
    function Mo(t, e) {
        return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),
            new yt(t, e)
    }
    function Ao(t, e) {
        return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),
            new xt(t, e)
    }
    function Po(t, e) {
        return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),
            new bt(t, e)
    }
    function Ro(t, e) {
        return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),
            new wt(t, e)
    }
    function Lo(t, e) {
        return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),
            new St(t, e)
    }
    function Oo(t, e) {
        return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),
            new Et(t, e)
    }
    function Io(t, e) {
        return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),
            new Tt(t, e)
    }
    function Co(t) {
        console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),
            En.call(this, t),
            this.type = "catmullrom",
            this.closed = !0
    }
    function Do(t) {
        console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),
            En.call(this, t),
            this.type = "catmullrom"
    }
    function No(t) {
        console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),
            En.call(this, t),
            this.type = "catmullrom"
    }
    function Uo(t) {
        return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."),
            new uo(t)
    }
    function Bo(t, e) {
        return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),
            new so(t, e)
    }
    function Fo(t, e) {
        return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),
            new Ue(new Ji(t.geometry), new De({
                color: void 0 !== e ? e : 16777215
            }))
    }
    function zo(t, e) {
        return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),
            new Ue(new Ve(t.geometry), new De({
                color: void 0 !== e ? e : 16777215
            }))
    }
    function Go(t) {
        return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),
            new fn(t)
    }
    function jo(t) {
        return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),
            new vn(t)
    }
    function ko() {
        console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js."),
            this.projectVector = function (t, e) {
                console.warn("THREE.Projector: .projectVector() is now vector.project()."),
                    t.project(e)
            }
            ,
            this.unprojectVector = function (t, e) {
                console.warn("THREE.Projector: .unprojectVector() is now vector.unproject()."),
                    t.unproject(e)
            }
            ,
            this.pickingRay = function () {
                console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")
            }
    }
    function Ho() {
        console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js"),
            this.domElement = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"),
            this.clear = function () { }
            ,
            this.render = function () { }
            ,
            this.setClearColor = function () { }
            ,
            this.setSize = function () { }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
        i.d(e, "WebGLRenderTargetCube", function () {
            return d
        }),
        i.d(e, "WebGLRenderTarget", function () {
            return u
        }),
        i.d(e, "WebGLRenderer", function () {
            return Se
        }),
        i.d(e, "ShaderLib", function () {
            return xh
        }),
        i.d(e, "UniformsLib", function () {
            return gh
        }),
        i.d(e, "UniformsUtils", function () {
            return _h
        }),
        i.d(e, "ShaderChunk", function () {
            return yh
        }),
        i.d(e, "FogExp2", function () {
            return Ee
        }),
        i.d(e, "Fog", function () {
            return Te
        }),
        i.d(e, "Scene", function () {
            return Me
        }),
        i.d(e, "LensFlare", function () {
            return Ae
        }),
        i.d(e, "Sprite", function () {
            return Re
        }),
        i.d(e, "LOD", function () {
            return Le
        }),
        i.d(e, "SkinnedMesh", function () {
            return Ce
        }),
        i.d(e, "Skeleton", function () {
            return Oe
        }),
        i.d(e, "Bone", function () {
            return Ie
        }),
        i.d(e, "Mesh", function () {
            return Ft
        }),
        i.d(e, "LineSegments", function () {
            return Ue
        }),
        i.d(e, "LineLoop", function () {
            return Be
        }),
        i.d(e, "Line", function () {
            return Ne
        }),
        i.d(e, "Points", function () {
            return ze
        }),
        i.d(e, "Group", function () {
            return Ge
        }),
        i.d(e, "VideoTexture", function () {
            return je
        }),
        i.d(e, "DataTexture", function () {
            return p
        }),
        i.d(e, "CompressedTexture", function () {
            return ke
        }),
        i.d(e, "CubeTexture", function () {
            return f
        }),
        i.d(e, "CanvasTexture", function () {
            return Q
        }),
        i.d(e, "DepthTexture", function () {
            return He
        }),
        i.d(e, "Texture", function () {
            return l
        }),
        i.d(e, "CompressedTextureLoader", function () {
            return mn
        }),
        i.d(e, "DataTextureLoader", function () {
            return vn
        }),
        i.d(e, "CubeTextureLoader", function () {
            return _n
        }),
        i.d(e, "TextureLoader", function () {
            return yn
        }),
        i.d(e, "ObjectLoader", function () {
            return _r
        }),
        i.d(e, "MaterialLoader", function () {
            return fr
        }),
        i.d(e, "BufferGeometryLoader", function () {
            return mr
        }),
        i.d(e, "DefaultLoadingManager", function () {
            return Oh
        }),
        i.d(e, "LoadingManager", function () {
            return pn
        }),
        i.d(e, "JSONLoader", function () {
            return gr
        }),
        i.d(e, "ImageLoader", function () {
            return gn
        }),
        i.d(e, "ImageBitmapLoader", function () {
            return yr
        }),
        i.d(e, "FontLoader", function () {
            return wr
        }),
        i.d(e, "FileLoader", function () {
            return fn
        }),
        i.d(e, "Loader", function () {
            return vr
        }),
        i.d(e, "LoaderUtils", function () {
            return Gh
        }),
        i.d(e, "Cache", function () {
            return Lh
        }),
        i.d(e, "AudioLoader", function () {
            return Sr
        }),
        i.d(e, "SpotLightShadow", function () {
            return qn
        }),
        i.d(e, "SpotLight", function () {
            return Zn
        }),
        i.d(e, "PointLight", function () {
            return Jn
        }),
        i.d(e, "RectAreaLight", function () {
            return tr
        }),
        i.d(e, "HemisphereLight", function () {
            return Xn
        }),
        i.d(e, "DirectionalLightShadow", function () {
            return Kn
        }),
        i.d(e, "DirectionalLight", function () {
            return Qn
        }),
        i.d(e, "AmbientLight", function () {
            return $n
        }),
        i.d(e, "LightShadow", function () {
            return Yn
        }),
        i.d(e, "Light", function () {
            return Wn
        }),
        i.d(e, "StereoCamera", function () {
            return Er
        }),
        i.d(e, "PerspectiveCamera", function () {
            return ge
        }),
        i.d(e, "OrthographicCamera", function () {
            return pt
        }),
        i.d(e, "CubeCamera", function () {
            return Tr
        }),
        i.d(e, "ArrayCamera", function () {
            return _e
        }),
        i.d(e, "Camera", function () {
            return dt
        }),
        i.d(e, "AudioListener", function () {
            return Mr
        }),
        i.d(e, "PositionalAudio", function () {
            return Pr
        }),
        i.d(e, "AudioContext", function () {
            return Wh
        }),
        i.d(e, "AudioAnalyser", function () {
            return Rr
        }),
        i.d(e, "Audio", function () {
            return Ar
        }),
        i.d(e, "VectorKeyframeTrack", function () {
            return dr
        }),
        i.d(e, "StringKeyframeTrack", function () {
            return er
        }),
        i.d(e, "QuaternionKeyframeTrack", function () {
            return or
        }),
        i.d(e, "NumberKeyframeTrack", function () {
            return sr
        }),
        i.d(e, "ColorKeyframeTrack", function () {
            return ar
        }),
        i.d(e, "BooleanKeyframeTrack", function () {
            return ir
        }),
        i.d(e, "PropertyMixer", function () {
            return Lr
        }),
        i.d(e, "PropertyBinding", function () {
            return Ir
        }),
        i.d(e, "KeyframeTrack", function () {
            return ur
        }),
        i.d(e, "AnimationUtils", function () {
            return Fh
        }),
        i.d(e, "AnimationObjectGroup", function () {
            return Cr
        }),
        i.d(e, "AnimationMixer", function () {
            return Nr
        }),
        i.d(e, "AnimationClip", function () {
            return pr
        }),
        i.d(e, "Uniform", function () {
            return Ur
        }),
        i.d(e, "InstancedBufferGeometry", function () {
            return Br
        }),
        i.d(e, "BufferGeometry", function () {
            return Pt
        }),
        i.d(e, "Geometry", function () {
            return mt
        }),
        i.d(e, "InterleavedBufferAttribute", function () {
            return Fr
        }),
        i.d(e, "InstancedInterleavedBuffer", function () {
            return Gr
        }),
        i.d(e, "InterleavedBuffer", function () {
            return zr
        }),
        i.d(e, "InstancedBufferAttribute", function () {
            return jr
        }),
        i.d(e, "Face3", function () {
            return ft
        }),
        i.d(e, "Object3D", function () {
            return ut
        }),
        i.d(e, "Raycaster", function () {
            return kr
        }),
        i.d(e, "Layers", function () {
            return ct
        }),
        i.d(e, "EventDispatcher", function () {
            return n
        }),
        i.d(e, "Clock", function () {
            return Wr
        }),
        i.d(e, "QuaternionLinearInterpolant", function () {
            return rr
        }),
        i.d(e, "LinearInterpolant", function () {
            return lr
        }),
        i.d(e, "DiscreteInterpolant", function () {
            return cr
        }),
        i.d(e, "CubicInterpolant", function () {
            return hr
        }),
        i.d(e, "Interpolant", function () {
            return nr
        }),
        i.d(e, "Triangle", function () {
            return Bt
        }),
        i.d(e, "Math", function () {
            return sh
        }),
        i.d(e, "Spherical", function () {
            return Xr
        }),
        i.d(e, "Cylindrical", function () {
            return Yr
        }),
        i.d(e, "Plane", function () {
            return ot
        }),
        i.d(e, "Frustum", function () {
            return at
        }),
        i.d(e, "Sphere", function () {
            return rt
        }),
        i.d(e, "Ray", function () {
            return Nt
        }),
        i.d(e, "Matrix4", function () {
            return o
        }),
        i.d(e, "Matrix3", function () {
            return h
        }),
        i.d(e, "Box3", function () {
            return nt
        }),
        i.d(e, "Box2", function () {
            return J
        }),
        i.d(e, "Line3", function () {
            return Ut
        }),
        i.d(e, "Euler", function () {
            return lt
        }),
        i.d(e, "Vector4", function () {
            return c
        }),
        i.d(e, "Vector3", function () {
            return s
        }),
        i.d(e, "Vector2", function () {
            return r
        }),
        i.d(e, "Quaternion", function () {
            return a
        }),
        i.d(e, "Color", function () {
            return Z
        }),
        i.d(e, "ImmediateRenderObject", function () {
            return qr
        }),
        i.d(e, "VertexNormalsHelper", function () {
            return Zr
        }),
        i.d(e, "SpotLightHelper", function () {
            return Jr
        }),
        i.d(e, "SkeletonHelper", function () {
            return Qr
        }),
        i.d(e, "PointLightHelper", function () {
            return $r
        }),
        i.d(e, "RectAreaLightHelper", function () {
            return to
        }),
        i.d(e, "HemisphereLightHelper", function () {
            return eo
        }),
        i.d(e, "GridHelper", function () {
            return io
        }),
        i.d(e, "PolarGridHelper", function () {
            return no
        }),
        i.d(e, "FaceNormalsHelper", function () {
            return ro
        }),
        i.d(e, "DirectionalLightHelper", function () {
            return oo
        }),
        i.d(e, "CameraHelper", function () {
            return ao
        }),
        i.d(e, "BoxHelper", function () {
            return so
        }),
        i.d(e, "Box3Helper", function () {
            return ho
        }),
        i.d(e, "PlaneHelper", function () {
            return lo
        }),
        i.d(e, "ArrowHelper", function () {
            return co
        }),
        i.d(e, "AxesHelper", function () {
            return uo
        }),
        i.d(e, "Shape", function () {
            return Vn
        }),
        i.d(e, "Path", function () {
            return Hn
        }),
        i.d(e, "ShapePath", function () {
            return xr
        }),
        i.d(e, "Font", function () {
            return br
        }),
        i.d(e, "CurvePath", function () {
            return kn
        }),
        i.d(e, "Curve", function () {
            return xn
        }),
        i.d(e, "ShapeUtils", function () {
            return Ah
        }),
        i.d(e, "SceneUtils", function () {
            return qh
        }),
        i.d(e, "WebGLUtils", function () {
            return we
        }),
        i.d(e, "WireframeGeometry", function () {
            return Ve
        }),
        i.d(e, "ParametricGeometry", function () {
            return We
        }),
        i.d(e, "ParametricBufferGeometry", function () {
            return Xe
        }),
        i.d(e, "TetrahedronGeometry", function () {
            return Ze
        }),
        i.d(e, "TetrahedronBufferGeometry", function () {
            return Je
        }),
        i.d(e, "OctahedronGeometry", function () {
            return Ke
        }),
        i.d(e, "OctahedronBufferGeometry", function () {
            return Qe
        }),
        i.d(e, "IcosahedronGeometry", function () {
            return $e
        }),
        i.d(e, "IcosahedronBufferGeometry", function () {
            return ti
        }),
        i.d(e, "DodecahedronGeometry", function () {
            return ei
        }),
        i.d(e, "DodecahedronBufferGeometry", function () {
            return ii
        }),
        i.d(e, "PolyhedronGeometry", function () {
            return Ye
        }),
        i.d(e, "PolyhedronBufferGeometry", function () {
            return qe
        }),
        i.d(e, "TubeGeometry", function () {
            return ni
        }),
        i.d(e, "TubeBufferGeometry", function () {
            return ri
        }),
        i.d(e, "TorusKnotGeometry", function () {
            return oi
        }),
        i.d(e, "TorusKnotBufferGeometry", function () {
            return ai
        }),
        i.d(e, "TorusGeometry", function () {
            return si
        }),
        i.d(e, "TorusBufferGeometry", function () {
            return hi
        }),
        i.d(e, "TextGeometry", function () {
            return zi
        }),
        i.d(e, "TextBufferGeometry", function () {
            return Gi
        }),
        i.d(e, "SphereGeometry", function () {
            return ji
        }),
        i.d(e, "SphereBufferGeometry", function () {
            return ki
        }),
        i.d(e, "RingGeometry", function () {
            return Hi
        }),
        i.d(e, "RingBufferGeometry", function () {
            return Vi
        }),
        i.d(e, "PlaneGeometry", function () {
            return Ot
        }),
        i.d(e, "PlaneBufferGeometry", function () {
            return It
        }),
        i.d(e, "LatheGeometry", function () {
            return Wi
        }),
        i.d(e, "LatheBufferGeometry", function () {
            return Xi
        }),
        i.d(e, "ShapeGeometry", function () {
            return Yi
        }),
        i.d(e, "ShapeBufferGeometry", function () {
            return qi
        }),
        i.d(e, "ExtrudeGeometry", function () {
            return Bi
        }),
        i.d(e, "ExtrudeBufferGeometry", function () {
            return Fi
        }),
        i.d(e, "EdgesGeometry", function () {
            return Ji
        }),
        i.d(e, "ConeGeometry", function () {
            return $i
        }),
        i.d(e, "ConeBufferGeometry", function () {
            return tn
        }),
        i.d(e, "CylinderGeometry", function () {
            return Ki
        }),
        i.d(e, "CylinderBufferGeometry", function () {
            return Qi
        }),
        i.d(e, "CircleGeometry", function () {
            return en
        }),
        i.d(e, "CircleBufferGeometry", function () {
            return nn
        }),
        i.d(e, "BoxGeometry", function () {
            return Rt
        }),
        i.d(e, "BoxBufferGeometry", function () {
            return Lt
        }),
        i.d(e, "ShadowMaterial", function () {
            return rn
        }),
        i.d(e, "SpriteMaterial", function () {
            return Pe
        }),
        i.d(e, "RawShaderMaterial", function () {
            return on
        }),
        i.d(e, "ShaderMaterial", function () {
            return Dt
        }),
        i.d(e, "PointsMaterial", function () {
            return Fe
        }),
        i.d(e, "MeshPhysicalMaterial", function () {
            return sn
        }),
        i.d(e, "MeshStandardMaterial", function () {
            return an
        }),
        i.d(e, "MeshPhongMaterial", function () {
            return hn
        }),
        i.d(e, "MeshToonMaterial", function () {
            return ln
        }),
        i.d(e, "MeshNormalMaterial", function () {
            return cn
        }),
        i.d(e, "MeshLambertMaterial", function () {
            return un
        }),
        i.d(e, "MeshDepthMaterial", function () {
            return et
        });
    i.d(e, "MeshDistanceMaterial", function () {
        return it
    }),
        i.d(e, "MeshBasicMaterial", function () {
            return Ct
        }),
        i.d(e, "LineDashedMaterial", function () {
            return dn
        }),
        i.d(e, "LineBasicMaterial", function () {
            return De
        }),
        i.d(e, "Material", function () {
            return tt
        }),
        i.d(e, "Float64BufferAttribute", function () {
            return Tt
        }),
        i.d(e, "Float32BufferAttribute", function () {
            return Et
        }),
        i.d(e, "Uint32BufferAttribute", function () {
            return St
        }),
        i.d(e, "Int32BufferAttribute", function () {
            return wt
        }),
        i.d(e, "Uint16BufferAttribute", function () {
            return bt
        }),
        i.d(e, "Int16BufferAttribute", function () {
            return xt
        }),
        i.d(e, "Uint8ClampedBufferAttribute", function () {
            return yt
        }),
        i.d(e, "Uint8BufferAttribute", function () {
            return _t
        }),
        i.d(e, "Int8BufferAttribute", function () {
            return gt
        }),
        i.d(e, "BufferAttribute", function () {
            return vt
        }),
        i.d(e, "ArcCurve", function () {
            return wn
        }),
        i.d(e, "CatmullRomCurve3", function () {
            return En
        }),
        i.d(e, "CubicBezierCurve", function () {
            return Nn
        }),
        i.d(e, "CubicBezierCurve3", function () {
            return Un
        }),
        i.d(e, "EllipseCurve", function () {
            return bn
        }),
        i.d(e, "LineCurve", function () {
            return Bn
        }),
        i.d(e, "LineCurve3", function () {
            return Fn
        }),
        i.d(e, "QuadraticBezierCurve", function () {
            return zn
        }),
        i.d(e, "QuadraticBezierCurve3", function () {
            return Gn
        }),
        i.d(e, "SplineCurve", function () {
            return jn
        }),
        i.d(e, "REVISION", function () {
            return Vo
        }),
        i.d(e, "MOUSE", function () {
            return Wo
        }),
        i.d(e, "CullFaceNone", function () {
            return Xo
        }),
        i.d(e, "CullFaceBack", function () {
            return Yo
        }),
        i.d(e, "CullFaceFront", function () {
            return qo
        }),
        i.d(e, "CullFaceFrontBack", function () {
            return Zo
        }),
        i.d(e, "FrontFaceDirectionCW", function () {
            return Jo
        }),
        i.d(e, "FrontFaceDirectionCCW", function () {
            return Ko
        }),
        i.d(e, "BasicShadowMap", function () {
            return Qo
        }),
        i.d(e, "PCFShadowMap", function () {
            return $o
        }),
        i.d(e, "PCFSoftShadowMap", function () {
            return ta
        }),
        i.d(e, "FrontSide", function () {
            return ea
        }),
        i.d(e, "BackSide", function () {
            return ia
        }),
        i.d(e, "DoubleSide", function () {
            return na
        }),
        i.d(e, "FlatShading", function () {
            return ra
        }),
        i.d(e, "SmoothShading", function () {
            return oa
        }),
        i.d(e, "NoColors", function () {
            return aa
        }),
        i.d(e, "FaceColors", function () {
            return sa
        }),
        i.d(e, "VertexColors", function () {
            return ha
        }),
        i.d(e, "NoBlending", function () {
            return la
        }),
        i.d(e, "NormalBlending", function () {
            return ca
        }),
        i.d(e, "AdditiveBlending", function () {
            return ua
        }),
        i.d(e, "SubtractiveBlending", function () {
            return da
        }),
        i.d(e, "MultiplyBlending", function () {
            return pa
        }),
        i.d(e, "CustomBlending", function () {
            return fa
        }),
        i.d(e, "AddEquation", function () {
            return ma
        }),
        i.d(e, "SubtractEquation", function () {
            return va
        }),
        i.d(e, "ReverseSubtractEquation", function () {
            return ga
        }),
        i.d(e, "MinEquation", function () {
            return _a
        }),
        i.d(e, "MaxEquation", function () {
            return ya
        }),
        i.d(e, "ZeroFactor", function () {
            return xa
        }),
        i.d(e, "OneFactor", function () {
            return ba
        }),
        i.d(e, "SrcColorFactor", function () {
            return wa
        }),
        i.d(e, "OneMinusSrcColorFactor", function () {
            return Sa
        }),
        i.d(e, "SrcAlphaFactor", function () {
            return Ea
        }),
        i.d(e, "OneMinusSrcAlphaFactor", function () {
            return Ta
        }),
        i.d(e, "DstAlphaFactor", function () {
            return Ma
        }),
        i.d(e, "OneMinusDstAlphaFactor", function () {
            return Aa
        }),
        i.d(e, "DstColorFactor", function () {
            return Pa
        }),
        i.d(e, "OneMinusDstColorFactor", function () {
            return Ra
        }),
        i.d(e, "SrcAlphaSaturateFactor", function () {
            return La
        }),
        i.d(e, "NeverDepth", function () {
            return Oa
        }),
        i.d(e, "AlwaysDepth", function () {
            return Ia
        }),
        i.d(e, "LessDepth", function () {
            return Ca
        }),
        i.d(e, "LessEqualDepth", function () {
            return Da
        }),
        i.d(e, "EqualDepth", function () {
            return Na
        }),
        i.d(e, "GreaterEqualDepth", function () {
            return Ua
        }),
        i.d(e, "GreaterDepth", function () {
            return Ba
        }),
        i.d(e, "NotEqualDepth", function () {
            return Fa
        }),
        i.d(e, "MultiplyOperation", function () {
            return za
        }),
        i.d(e, "MixOperation", function () {
            return Ga
        }),
        i.d(e, "AddOperation", function () {
            return ja
        }),
        i.d(e, "NoToneMapping", function () {
            return ka
        }),
        i.d(e, "LinearToneMapping", function () {
            return Ha
        }),
        i.d(e, "ReinhardToneMapping", function () {
            return Va
        }),
        i.d(e, "Uncharted2ToneMapping", function () {
            return Wa
        }),
        i.d(e, "CineonToneMapping", function () {
            return Xa
        }),
        i.d(e, "UVMapping", function () {
            return Ya
        }),
        i.d(e, "CubeReflectionMapping", function () {
            return qa
        }),
        i.d(e, "CubeRefractionMapping", function () {
            return Za
        }),
        i.d(e, "EquirectangularReflectionMapping", function () {
            return Ja
        }),
        i.d(e, "EquirectangularRefractionMapping", function () {
            return Ka
        }),
        i.d(e, "SphericalReflectionMapping", function () {
            return Qa
        }),
        i.d(e, "CubeUVReflectionMapping", function () {
            return $a
        }),
        i.d(e, "CubeUVRefractionMapping", function () {
            return ts
        }),
        i.d(e, "RepeatWrapping", function () {
            return es
        }),
        i.d(e, "ClampToEdgeWrapping", function () {
            return is
        }),
        i.d(e, "MirroredRepeatWrapping", function () {
            return ns
        }),
        i.d(e, "NearestFilter", function () {
            return rs
        }),
        i.d(e, "NearestMipMapNearestFilter", function () {
            return os
        }),
        i.d(e, "NearestMipMapLinearFilter", function () {
            return as
        }),
        i.d(e, "LinearFilter", function () {
            return ss
        }),
        i.d(e, "LinearMipMapNearestFilter", function () {
            return hs
        }),
        i.d(e, "LinearMipMapLinearFilter", function () {
            return ls
        }),
        i.d(e, "UnsignedByteType", function () {
            return cs
        }),
        i.d(e, "ByteType", function () {
            return us
        }),
        i.d(e, "ShortType", function () {
            return ds
        }),
        i.d(e, "UnsignedShortType", function () {
            return ps
        }),
        i.d(e, "IntType", function () {
            return fs
        }),
        i.d(e, "UnsignedIntType", function () {
            return ms
        }),
        i.d(e, "FloatType", function () {
            return vs
        }),
        i.d(e, "HalfFloatType", function () {
            return gs
        }),
        i.d(e, "UnsignedShort4444Type", function () {
            return _s
        }),
        i.d(e, "UnsignedShort5551Type", function () {
            return ys
        }),
        i.d(e, "UnsignedShort565Type", function () {
            return xs
        }),
        i.d(e, "UnsignedInt248Type", function () {
            return bs
        }),
        i.d(e, "AlphaFormat", function () {
            return ws
        }),
        i.d(e, "RGBFormat", function () {
            return Ss
        }),
        i.d(e, "RGBAFormat", function () {
            return Es
        }),
        i.d(e, "LuminanceFormat", function () {
            return Ts
        }),
        i.d(e, "LuminanceAlphaFormat", function () {
            return Ms
        }),
        i.d(e, "RGBEFormat", function () {
            return As
        }),
        i.d(e, "DepthFormat", function () {
            return Ps
        }),
        i.d(e, "DepthStencilFormat", function () {
            return Rs
        }),
        i.d(e, "RGB_S3TC_DXT1_Format", function () {
            return Ls
        }),
        i.d(e, "RGBA_S3TC_DXT1_Format", function () {
            return Os
        }),
        i.d(e, "RGBA_S3TC_DXT3_Format", function () {
            return Is
        }),
        i.d(e, "RGBA_S3TC_DXT5_Format", function () {
            return Cs
        }),
        i.d(e, "RGB_PVRTC_4BPPV1_Format", function () {
            return Ds
        }),
        i.d(e, "RGB_PVRTC_2BPPV1_Format", function () {
            return Ns
        }),
        i.d(e, "RGBA_PVRTC_4BPPV1_Format", function () {
            return Us
        }),
        i.d(e, "RGBA_PVRTC_2BPPV1_Format", function () {
            return Bs
        }),
        i.d(e, "RGB_ETC1_Format", function () {
            return Fs
        }),
        i.d(e, "LoopOnce", function () {
            return zs
        }),
        i.d(e, "LoopRepeat", function () {
            return Gs
        }),
        i.d(e, "LoopPingPong", function () {
            return js
        }),
        i.d(e, "InterpolateDiscrete", function () {
            return ks
        }),
        i.d(e, "InterpolateLinear", function () {
            return Hs
        }),
        i.d(e, "InterpolateSmooth", function () {
            return Vs
        }),
        i.d(e, "ZeroCurvatureEnding", function () {
            return Ws
        }),
        i.d(e, "ZeroSlopeEnding", function () {
            return Xs
        }),
        i.d(e, "WrapAroundEnding", function () {
            return Ys
        }),
        i.d(e, "TrianglesDrawMode", function () {
            return qs
        }),
        i.d(e, "TriangleStripDrawMode", function () {
            return Zs
        }),
        i.d(e, "TriangleFanDrawMode", function () {
            return Js
        }),
        i.d(e, "LinearEncoding", function () {
            return Ks
        }),
        i.d(e, "sRGBEncoding", function () {
            return Qs
        }),
        i.d(e, "GammaEncoding", function () {
            return $s
        }),
        i.d(e, "RGBEEncoding", function () {
            return th
        }),
        i.d(e, "LogLuvEncoding", function () {
            return eh
        }),
        i.d(e, "RGBM7Encoding", function () {
            return ih
        }),
        i.d(e, "RGBM16Encoding", function () {
            return nh
        }),
        i.d(e, "RGBDEncoding", function () {
            return rh
        }),
        i.d(e, "BasicDepthPacking", function () {
            return oh
        }),
        i.d(e, "RGBADepthPacking", function () {
            return ah
        }),
        i.d(e, "CubeGeometry", function () {
            return Rt
        }),
        i.d(e, "Face4", function () {
            return po
        }),
        i.d(e, "LineStrip", function () {
            return Zh
        }),
        i.d(e, "LinePieces", function () {
            return Jh
        }),
        i.d(e, "MeshFaceMaterial", function () {
            return fo
        }),
        i.d(e, "MultiMaterial", function () {
            return mo
        }),
        i.d(e, "PointCloud", function () {
            return vo
        }),
        i.d(e, "Particle", function () {
            return go
        }),
        i.d(e, "ParticleSystem", function () {
            return _o
        }),
        i.d(e, "PointCloudMaterial", function () {
            return yo
        }),
        i.d(e, "ParticleBasicMaterial", function () {
            return xo
        }),
        i.d(e, "ParticleSystemMaterial", function () {
            return bo
        }),
        i.d(e, "Vertex", function () {
            return wo
        }),
        i.d(e, "DynamicBufferAttribute", function () {
            return So
        }),
        i.d(e, "Int8Attribute", function () {
            return Eo
        }),
        i.d(e, "Uint8Attribute", function () {
            return To
        }),
        i.d(e, "Uint8ClampedAttribute", function () {
            return Mo
        }),
        i.d(e, "Int16Attribute", function () {
            return Ao
        }),
        i.d(e, "Uint16Attribute", function () {
            return Po
        }),
        i.d(e, "Int32Attribute", function () {
            return Ro
        }),
        i.d(e, "Uint32Attribute", function () {
            return Lo
        }),
        i.d(e, "Float32Attribute", function () {
            return Oo
        }),
        i.d(e, "Float64Attribute", function () {
            return Io
        }),
        i.d(e, "ClosedSplineCurve3", function () {
            return Co
        }),
        i.d(e, "SplineCurve3", function () {
            return Do
        }),
        i.d(e, "Spline", function () {
            return No
        }),
        i.d(e, "AxisHelper", function () {
            return Uo
        }),
        i.d(e, "BoundingBoxHelper", function () {
            return Bo
        }),
        i.d(e, "EdgesHelper", function () {
            return Fo
        }),
        i.d(e, "WireframeHelper", function () {
            return zo
        }),
        i.d(e, "XHRLoader", function () {
            return Go
        }),
        i.d(e, "BinaryTextureLoader", function () {
            return jo
        }),
        i.d(e, "GeometryUtils", function () {
            return Kh
        }),
        i.d(e, "ImageUtils", function () {
            return Qh
        }),
        i.d(e, "Projector", function () {
            return ko
        }),
        i.d(e, "CanvasRenderer", function () {
            return Ho
        }),
        void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52)),
        void 0 === Number.isInteger && (Number.isInteger = function (t) {
            return "number" == typeof t && isFinite(t) && Math.floor(t) === t
        }
        ),
        void 0 === Math.sign && (Math.sign = function (t) {
            return t < 0 ? -1 : t > 0 ? 1 : +t
        }
        ),
        "name" in Function.prototype == !1 && Object.defineProperty(Function.prototype, "name", {
            get: function () {
                return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]
            }
        }),
        void 0 === Object.assign && function () {
            Object.assign = function (t) {
                if (void 0 === t || null === t)
                    throw new TypeError("Cannot convert undefined or null to object");
                for (var e = Object(t), i = 1; i < arguments.length; i++) {
                    var n = arguments[i];
                    if (void 0 !== n && null !== n)
                        for (var r in n)
                            Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r])
                }
                return e
            }
        }(),
        Object.assign(n.prototype, {
            addEventListener: function (t, e) {
                void 0 === this._listeners && (this._listeners = {});
                var i = this._listeners;
                void 0 === i[t] && (i[t] = []),
                    -1 === i[t].indexOf(e) && i[t].push(e)
            },
            hasEventListener: function (t, e) {
                if (void 0 === this._listeners)
                    return !1;
                var i = this._listeners;
                return void 0 !== i[t] && -1 !== i[t].indexOf(e)
            },
            removeEventListener: function (t, e) {
                if (void 0 !== this._listeners) {
                    var i = this._listeners
                        , n = i[t];
                    if (void 0 !== n) {
                        var r = n.indexOf(e);
                        -1 !== r && n.splice(r, 1)
                    }
                }
            },
            dispatchEvent: function (t) {
                if (void 0 !== this._listeners) {
                    var e = this._listeners
                        , i = e[t.type];
                    if (void 0 !== i) {
                        t.target = this;
                        for (var n = i.slice(0), r = 0, o = n.length; r < o; r++)
                            n[r].call(this, t)
                    }
                }
            }
        });
    var Vo = "89"
        , Wo = {
            LEFT: 0,
            MIDDLE: 1,
            RIGHT: 2
        }
        , Xo = 0
        , Yo = 1
        , qo = 2
        , Zo = 3
        , Jo = 0
        , Ko = 1
        , Qo = 0
        , $o = 1
        , ta = 2
        , ea = 0
        , ia = 1
        , na = 2
        , ra = 1
        , oa = 2
        , aa = 0
        , sa = 1
        , ha = 2
        , la = 0
        , ca = 1
        , ua = 2
        , da = 3
        , pa = 4
        , fa = 5
        , ma = 100
        , va = 101
        , ga = 102
        , _a = 103
        , ya = 104
        , xa = 200
        , ba = 201
        , wa = 202
        , Sa = 203
        , Ea = 204
        , Ta = 205
        , Ma = 206
        , Aa = 207
        , Pa = 208
        , Ra = 209
        , La = 210
        , Oa = 0
        , Ia = 1
        , Ca = 2
        , Da = 3
        , Na = 4
        , Ua = 5
        , Ba = 6
        , Fa = 7
        , za = 0
        , Ga = 1
        , ja = 2
        , ka = 0
        , Ha = 1
        , Va = 2
        , Wa = 3
        , Xa = 4
        , Ya = 300
        , qa = 301
        , Za = 302
        , Ja = 303
        , Ka = 304
        , Qa = 305
        , $a = 306
        , ts = 307
        , es = 1e3
        , is = 1001
        , ns = 1002
        , rs = 1003
        , os = 1004
        , as = 1005
        , ss = 1006
        , hs = 1007
        , ls = 1008
        , cs = 1009
        , us = 1010
        , ds = 1011
        , ps = 1012
        , fs = 1013
        , ms = 1014
        , vs = 1015
        , gs = 1016
        , _s = 1017
        , ys = 1018
        , xs = 1019
        , bs = 1020
        , ws = 1021
        , Ss = 1022
        , Es = 1023
        , Ts = 1024
        , Ms = 1025
        , As = Es
        , Ps = 1026
        , Rs = 1027
        , Ls = 2001
        , Os = 2002
        , Is = 2003
        , Cs = 2004
        , Ds = 2100
        , Ns = 2101
        , Us = 2102
        , Bs = 2103
        , Fs = 2151
        , zs = 2200
        , Gs = 2201
        , js = 2202
        , ks = 2300
        , Hs = 2301
        , Vs = 2302
        , Ws = 2400
        , Xs = 2401
        , Ys = 2402
        , qs = 0
        , Zs = 1
        , Js = 2
        , Ks = 3e3
        , Qs = 3001
        , $s = 3007
        , th = 3002
        , eh = 3003
        , ih = 3004
        , nh = 3005
        , rh = 3006
        , oh = 3200
        , ah = 3201
        , sh = {
            DEG2RAD: Math.PI / 180,
            RAD2DEG: 180 / Math.PI,
            generateUUID: function () {
                for (var t = [], e = 0; e < 256; e++)
                    t[e] = (e < 16 ? "0" : "") + e.toString(16).toUpperCase();
                return function () {
                    var e = 4294967295 * Math.random() | 0
                        , i = 4294967295 * Math.random() | 0
                        , n = 4294967295 * Math.random() | 0
                        , r = 4294967295 * Math.random() | 0;
                    return t[255 & e] + t[e >> 8 & 255] + t[e >> 16 & 255] + t[e >> 24 & 255] + "-" + t[255 & i] + t[i >> 8 & 255] + "-" + t[i >> 16 & 15 | 64] + t[i >> 24 & 255] + "-" + t[63 & n | 128] + t[n >> 8 & 255] + "-" + t[n >> 16 & 255] + t[n >> 24 & 255] + t[255 & r] + t[r >> 8 & 255] + t[r >> 16 & 255] + t[r >> 24 & 255]
                }
            }(),
            clamp: function (t, e, i) {
                return Math.max(e, Math.min(i, t))
            },
            euclideanModulo: function (t, e) {
                return (t % e + e) % e
            },
            mapLinear: function (t, e, i, n, r) {
                return n + (t - e) * (r - n) / (i - e)
            },
            lerp: function (t, e, i) {
                return (1 - i) * t + i * e
            },
            smoothstep: function (t, e, i) {
                return t <= e ? 0 : t >= i ? 1 : (t = (t - e) / (i - e)) * t * (3 - 2 * t)
            },
            smootherstep: function (t, e, i) {
                return t <= e ? 0 : t >= i ? 1 : (t = (t - e) / (i - e)) * t * t * (t * (6 * t - 15) + 10)
            },
            randInt: function (t, e) {
                return t + Math.floor(Math.random() * (e - t + 1))
            },
            randFloat: function (t, e) {
                return t + Math.random() * (e - t)
            },
            randFloatSpread: function (t) {
                return t * (.5 - Math.random())
            },
            degToRad: function (t) {
                return t * sh.DEG2RAD
            },
            radToDeg: function (t) {
                return t * sh.RAD2DEG
            },
            isPowerOfTwo: function (t) {
                return 0 == (t & t - 1) && 0 !== t
            },
            ceilPowerOfTwo: function (t) {
                return Math.pow(2, Math.ceil(Math.log(t) / Math.LN2))
            },
            floorPowerOfTwo: function (t) {
                return Math.pow(2, Math.floor(Math.log(t) / Math.LN2))
            }
        };
    Object.defineProperties(r.prototype, {
        width: {
            get: function () {
                return this.x
            },
            set: function (t) {
                this.x = t
            }
        },
        height: {
            get: function () {
                return this.y
            },
            set: function (t) {
                this.y = t
            }
        }
    }),
        Object.assign(r.prototype, {
            isVector2: !0,
            set: function (t, e) {
                return this.x = t,
                    this.y = e,
                    this
            },
            setScalar: function (t) {
                return this.x = t,
                    this.y = t,
                    this
            },
            setX: function (t) {
                return this.x = t,
                    this
            },
            setY: function (t) {
                return this.y = t,
                    this
            },
            setComponent: function (t, e) {
                switch (t) {
                    case 0:
                        this.x = e;
                        break;
                    case 1:
                        this.y = e;
                        break;
                    default:
                        throw new Error("index is out of range: " + t)
                }
                return this
            },
            getComponent: function (t) {
                switch (t) {
                    case 0:
                        return this.x;
                    case 1:
                        return this.y;
                    default:
                        throw new Error("index is out of range: " + t)
                }
            },
            clone: function () {
                return new this.constructor(this.x, this.y)
            },
            copy: function (t) {
                return this.x = t.x,
                    this.y = t.y,
                    this
            },
            add: function (t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
                    this.addVectors(t, e)) : (this.x += t.x,
                        this.y += t.y,
                        this)
            },
            addScalar: function (t) {
                return this.x += t,
                    this.y += t,
                    this
            },
            addVectors: function (t, e) {
                return this.x = t.x + e.x,
                    this.y = t.y + e.y,
                    this
            },
            addScaledVector: function (t, e) {
                return this.x += t.x * e,
                    this.y += t.y * e,
                    this
            },
            sub: function (t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
                    this.subVectors(t, e)) : (this.x -= t.x,
                        this.y -= t.y,
                        this)
            },
            subScalar: function (t) {
                return this.x -= t,
                    this.y -= t,
                    this
            },
            subVectors: function (t, e) {
                return this.x = t.x - e.x,
                    this.y = t.y - e.y,
                    this
            },
            multiply: function (t) {
                return this.x *= t.x,
                    this.y *= t.y,
                    this
            },
            multiplyScalar: function (t) {
                return this.x *= t,
                    this.y *= t,
                    this
            },
            divide: function (t) {
                return this.x /= t.x,
                    this.y /= t.y,
                    this
            },
            divideScalar: function (t) {
                return this.multiplyScalar(1 / t)
            },
            applyMatrix3: function (t) {
                var e = this.x
                    , i = this.y
                    , n = t.elements;
                return this.x = n[0] * e + n[3] * i + n[6],
                    this.y = n[1] * e + n[4] * i + n[7],
                    this
            },
            min: function (t) {
                return this.x = Math.min(this.x, t.x),
                    this.y = Math.min(this.y, t.y),
                    this
            },
            max: function (t) {
                return this.x = Math.max(this.x, t.x),
                    this.y = Math.max(this.y, t.y),
                    this
            },
            clamp: function (t, e) {
                return this.x = Math.max(t.x, Math.min(e.x, this.x)),
                    this.y = Math.max(t.y, Math.min(e.y, this.y)),
                    this
            },
            clampScalar: function () {
                var t = new r
                    , e = new r;
                return function (i, n) {
                    return t.set(i, i),
                        e.set(n, n),
                        this.clamp(t, e)
                }
            }(),
            clampLength: function (t, e) {
                var i = this.length();
                return this.divideScalar(i || 1).multiplyScalar(Math.max(t, Math.min(e, i)))
            },
            floor: function () {
                return this.x = Math.floor(this.x),
                    this.y = Math.floor(this.y),
                    this
            },
            ceil: function () {
                return this.x = Math.ceil(this.x),
                    this.y = Math.ceil(this.y),
                    this
            },
            round: function () {
                return this.x = Math.round(this.x),
                    this.y = Math.round(this.y),
                    this
            },
            roundToZero: function () {
                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
                    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
                    this
            },
            negate: function () {
                return this.x = -this.x,
                    this.y = -this.y,
                    this
            },
            dot: function (t) {
                return this.x * t.x + this.y * t.y
            },
            lengthSq: function () {
                return this.x * this.x + this.y * this.y
            },
            length: function () {
                return Math.sqrt(this.x * this.x + this.y * this.y)
            },
            manhattanLength: function () {
                return Math.abs(this.x) + Math.abs(this.y)
            },
            normalize: function () {
                return this.divideScalar(this.length() || 1)
            },
            angle: function () {
                var t = Math.atan2(this.y, this.x);
                return t < 0 && (t += 2 * Math.PI),
                    t
            },
            distanceTo: function (t) {
                return Math.sqrt(this.distanceToSquared(t))
            },
            distanceToSquared: function (t) {
                var e = this.x - t.x
                    , i = this.y - t.y;
                return e * e + i * i
            },
            manhattanDistanceTo: function (t) {
                return Math.abs(this.x - t.x) + Math.abs(this.y - t.y)
            },
            setLength: function (t) {
                return this.normalize().multiplyScalar(t)
            },
            lerp: function (t, e) {
                return this.x += (t.x - this.x) * e,
                    this.y += (t.y - this.y) * e,
                    this
            },
            lerpVectors: function (t, e, i) {
                return this.subVectors(e, t).multiplyScalar(i).add(t)
            },
            equals: function (t) {
                return t.x === this.x && t.y === this.y
            },
            fromArray: function (t, e) {
                return void 0 === e && (e = 0),
                    this.x = t[e],
                    this.y = t[e + 1],
                    this
            },
            toArray: function (t, e) {
                return void 0 === t && (t = []),
                    void 0 === e && (e = 0),
                    t[e] = this.x,
                    t[e + 1] = this.y,
                    t
            },
            fromBufferAttribute: function (t, e, i) {
                return void 0 !== i && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),
                    this.x = t.getX(e),
                    this.y = t.getY(e),
                    this
            },
            rotateAround: function (t, e) {
                var i = Math.cos(e)
                    , n = Math.sin(e)
                    , r = this.x - t.x
                    , o = this.y - t.y;
                return this.x = r * i - o * n + t.x,
                    this.y = r * n + o * i + t.y,
                    this
            }
        }),
        Object.assign(o.prototype, {
            isMatrix4: !0,
            set: function (t, e, i, n, r, o, a, s, h, l, c, u, d, p, f, m) {
                var v = this.elements;
                return v[0] = t,
                    v[4] = e,
                    v[8] = i,
                    v[12] = n,
                    v[1] = r,
                    v[5] = o,
                    v[9] = a,
                    v[13] = s,
                    v[2] = h,
                    v[6] = l,
                    v[10] = c,
                    v[14] = u,
                    v[3] = d,
                    v[7] = p,
                    v[11] = f,
                    v[15] = m,
                    this
            },
            identity: function () {
                return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                    this
            },
            clone: function () {
                return (new o).fromArray(this.elements)
            },
            copy: function (t) {
                var e = this.elements
                    , i = t.elements;
                return e[0] = i[0],
                    e[1] = i[1],
                    e[2] = i[2],
                    e[3] = i[3],
                    e[4] = i[4],
                    e[5] = i[5],
                    e[6] = i[6],
                    e[7] = i[7],
                    e[8] = i[8],
                    e[9] = i[9],
                    e[10] = i[10],
                    e[11] = i[11],
                    e[12] = i[12],
                    e[13] = i[13],
                    e[14] = i[14],
                    e[15] = i[15],
                    this
            },
            copyPosition: function (t) {
                var e = this.elements
                    , i = t.elements;
                return e[12] = i[12],
                    e[13] = i[13],
                    e[14] = i[14],
                    this
            },
            extractBasis: function (t, e, i) {
                return t.setFromMatrixColumn(this, 0),
                    e.setFromMatrixColumn(this, 1),
                    i.setFromMatrixColumn(this, 2),
                    this
            },
            makeBasis: function (t, e, i) {
                return this.set(t.x, e.x, i.x, 0, t.y, e.y, i.y, 0, t.z, e.z, i.z, 0, 0, 0, 0, 1),
                    this
            },
            extractRotation: function () {
                var t = new s;
                return function (e) {
                    var i = this.elements
                        , n = e.elements
                        , r = 1 / t.setFromMatrixColumn(e, 0).length()
                        , o = 1 / t.setFromMatrixColumn(e, 1).length()
                        , a = 1 / t.setFromMatrixColumn(e, 2).length();
                    return i[0] = n[0] * r,
                        i[1] = n[1] * r,
                        i[2] = n[2] * r,
                        i[4] = n[4] * o,
                        i[5] = n[5] * o,
                        i[6] = n[6] * o,
                        i[8] = n[8] * a,
                        i[9] = n[9] * a,
                        i[10] = n[10] * a,
                        this
                }
            }(),
            makeRotationFromEuler: function (t) {
                t && t.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
                var e = this.elements
                    , i = t.x
                    , n = t.y
                    , r = t.z
                    , o = Math.cos(i)
                    , a = Math.sin(i)
                    , s = Math.cos(n)
                    , h = Math.sin(n)
                    , l = Math.cos(r)
                    , c = Math.sin(r);
                if ("XYZ" === t.order) {
                    var u = o * l
                        , d = o * c
                        , p = a * l
                        , f = a * c;
                    e[0] = s * l,
                        e[4] = -s * c,
                        e[8] = h,
                        e[1] = d + p * h,
                        e[5] = u - f * h,
                        e[9] = -a * s,
                        e[2] = f - u * h,
                        e[6] = p + d * h,
                        e[10] = o * s
                } else if ("YXZ" === t.order) {
                    var m = s * l
                        , v = s * c
                        , g = h * l
                        , _ = h * c;
                    e[0] = m + _ * a,
                        e[4] = g * a - v,
                        e[8] = o * h,
                        e[1] = o * c,
                        e[5] = o * l,
                        e[9] = -a,
                        e[2] = v * a - g,
                        e[6] = _ + m * a,
                        e[10] = o * s
                } else if ("ZXY" === t.order) {
                    var m = s * l
                        , v = s * c
                        , g = h * l
                        , _ = h * c;
                    e[0] = m - _ * a,
                        e[4] = -o * c,
                        e[8] = g + v * a,
                        e[1] = v + g * a,
                        e[5] = o * l,
                        e[9] = _ - m * a,
                        e[2] = -o * h,
                        e[6] = a,
                        e[10] = o * s
                } else if ("ZYX" === t.order) {
                    var u = o * l
                        , d = o * c
                        , p = a * l
                        , f = a * c;
                    e[0] = s * l,
                        e[4] = p * h - d,
                        e[8] = u * h + f,
                        e[1] = s * c,
                        e[5] = f * h + u,
                        e[9] = d * h - p,
                        e[2] = -h,
                        e[6] = a * s,
                        e[10] = o * s
                } else if ("YZX" === t.order) {
                    var y = o * s
                        , x = o * h
                        , b = a * s
                        , w = a * h;
                    e[0] = s * l,
                        e[4] = w - y * c,
                        e[8] = b * c + x,
                        e[1] = c,
                        e[5] = o * l,
                        e[9] = -a * l,
                        e[2] = -h * l,
                        e[6] = x * c + b,
                        e[10] = y - w * c
                } else if ("XZY" === t.order) {
                    var y = o * s
                        , x = o * h
                        , b = a * s
                        , w = a * h;
                    e[0] = s * l,
                        e[4] = -c,
                        e[8] = h * l,
                        e[1] = y * c + w,
                        e[5] = o * l,
                        e[9] = x * c - b,
                        e[2] = b * c - x,
                        e[6] = a * l,
                        e[10] = w * c + y
                }
                return e[3] = 0,
                    e[7] = 0,
                    e[11] = 0,
                    e[12] = 0,
                    e[13] = 0,
                    e[14] = 0,
                    e[15] = 1,
                    this
            },
            makeRotationFromQuaternion: function (t) {
                var e = this.elements
                    , i = t._x
                    , n = t._y
                    , r = t._z
                    , o = t._w
                    , a = i + i
                    , s = n + n
                    , h = r + r
                    , l = i * a
                    , c = i * s
                    , u = i * h
                    , d = n * s
                    , p = n * h
                    , f = r * h
                    , m = o * a
                    , v = o * s
                    , g = o * h;
                return e[0] = 1 - (d + f),
                    e[4] = c - g,
                    e[8] = u + v,
                    e[1] = c + g,
                    e[5] = 1 - (l + f),
                    e[9] = p - m,
                    e[2] = u - v,
                    e[6] = p + m,
                    e[10] = 1 - (l + d),
                    e[3] = 0,
                    e[7] = 0,
                    e[11] = 0,
                    e[12] = 0,
                    e[13] = 0,
                    e[14] = 0,
                    e[15] = 1,
                    this
            },
            lookAt: function () {
                var t = new s
                    , e = new s
                    , i = new s;
                return function (n, r, o) {
                    var a = this.elements;
                    return i.subVectors(n, r),
                        0 === i.lengthSq() && (i.z = 1),
                        i.normalize(),
                        t.crossVectors(o, i),
                        0 === t.lengthSq() && (1 === Math.abs(o.z) ? i.x += 1e-4 : i.z += 1e-4,
                            i.normalize(),
                            t.crossVectors(o, i)),
                        t.normalize(),
                        e.crossVectors(i, t),
                        a[0] = t.x,
                        a[4] = e.x,
                        a[8] = i.x,
                        a[1] = t.y,
                        a[5] = e.y,
                        a[9] = i.y,
                        a[2] = t.z,
                        a[6] = e.z,
                        a[10] = i.z,
                        this
                }
            }(),
            multiply: function (t, e) {
                return void 0 !== e ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),
                    this.multiplyMatrices(t, e)) : this.multiplyMatrices(this, t)
            },
            premultiply: function (t) {
                return this.multiplyMatrices(t, this)
            },
            multiplyMatrices: function (t, e) {
                var i = t.elements
                    , n = e.elements
                    , r = this.elements
                    , o = i[0]
                    , a = i[4]
                    , s = i[8]
                    , h = i[12]
                    , l = i[1]
                    , c = i[5]
                    , u = i[9]
                    , d = i[13]
                    , p = i[2]
                    , f = i[6]
                    , m = i[10]
                    , v = i[14]
                    , g = i[3]
                    , _ = i[7]
                    , y = i[11]
                    , x = i[15]
                    , b = n[0]
                    , w = n[4]
                    , S = n[8]
                    , E = n[12]
                    , T = n[1]
                    , M = n[5]
                    , A = n[9]
                    , P = n[13]
                    , R = n[2]
                    , L = n[6]
                    , O = n[10]
                    , I = n[14]
                    , C = n[3]
                    , D = n[7]
                    , N = n[11]
                    , U = n[15];
                return r[0] = o * b + a * T + s * R + h * C,
                    r[4] = o * w + a * M + s * L + h * D,
                    r[8] = o * S + a * A + s * O + h * N,
                    r[12] = o * E + a * P + s * I + h * U,
                    r[1] = l * b + c * T + u * R + d * C,
                    r[5] = l * w + c * M + u * L + d * D,
                    r[9] = l * S + c * A + u * O + d * N,
                    r[13] = l * E + c * P + u * I + d * U,
                    r[2] = p * b + f * T + m * R + v * C,
                    r[6] = p * w + f * M + m * L + v * D,
                    r[10] = p * S + f * A + m * O + v * N,
                    r[14] = p * E + f * P + m * I + v * U,
                    r[3] = g * b + _ * T + y * R + x * C,
                    r[7] = g * w + _ * M + y * L + x * D,
                    r[11] = g * S + _ * A + y * O + x * N,
                    r[15] = g * E + _ * P + y * I + x * U,
                    this
            },
            multiplyScalar: function (t) {
                var e = this.elements;
                return e[0] *= t,
                    e[4] *= t,
                    e[8] *= t,
                    e[12] *= t,
                    e[1] *= t,
                    e[5] *= t,
                    e[9] *= t,
                    e[13] *= t,
                    e[2] *= t,
                    e[6] *= t,
                    e[10] *= t,
                    e[14] *= t,
                    e[3] *= t,
                    e[7] *= t,
                    e[11] *= t,
                    e[15] *= t,
                    this
            },
            applyToBufferAttribute: function () {
                var t = new s;
                return function (e) {
                    for (var i = 0, n = e.count; i < n; i++)
                        t.x = e.getX(i),
                            t.y = e.getY(i),
                            t.z = e.getZ(i),
                            t.applyMatrix4(this),
                            e.setXYZ(i, t.x, t.y, t.z);
                    return e
                }
            }(),
            determinant: function () {
                var t = this.elements
                    , e = t[0]
                    , i = t[4]
                    , n = t[8]
                    , r = t[12]
                    , o = t[1]
                    , a = t[5]
                    , s = t[9]
                    , h = t[13]
                    , l = t[2]
                    , c = t[6]
                    , u = t[10]
                    , d = t[14];
                return t[3] * (+r * s * c - n * h * c - r * a * u + i * h * u + n * a * d - i * s * d) + t[7] * (+e * s * d - e * h * u + r * o * u - n * o * d + n * h * l - r * s * l) + t[11] * (+e * h * c - e * a * d - r * o * c + i * o * d + r * a * l - i * h * l) + t[15] * (-n * a * l - e * s * c + e * a * u + n * o * c - i * o * u + i * s * l)
            },
            transpose: function () {
                var t, e = this.elements;
                return t = e[1],
                    e[1] = e[4],
                    e[4] = t,
                    t = e[2],
                    e[2] = e[8],
                    e[8] = t,
                    t = e[6],
                    e[6] = e[9],
                    e[9] = t,
                    t = e[3],
                    e[3] = e[12],
                    e[12] = t,
                    t = e[7],
                    e[7] = e[13],
                    e[13] = t,
                    t = e[11],
                    e[11] = e[14],
                    e[14] = t,
                    this
            },
            setPosition: function (t) {
                var e = this.elements;
                return e[12] = t.x,
                    e[13] = t.y,
                    e[14] = t.z,
                    this
            },
            getInverse: function (t, e) {
                var i = this.elements
                    , n = t.elements
                    , r = n[0]
                    , o = n[1]
                    , a = n[2]
                    , s = n[3]
                    , h = n[4]
                    , l = n[5]
                    , c = n[6]
                    , u = n[7]
                    , d = n[8]
                    , p = n[9]
                    , f = n[10]
                    , m = n[11]
                    , v = n[12]
                    , g = n[13]
                    , _ = n[14]
                    , y = n[15]
                    , x = p * _ * u - g * f * u + g * c * m - l * _ * m - p * c * y + l * f * y
                    , b = v * f * u - d * _ * u - v * c * m + h * _ * m + d * c * y - h * f * y
                    , w = d * g * u - v * p * u + v * l * m - h * g * m - d * l * y + h * p * y
                    , S = v * p * c - d * g * c - v * l * f + h * g * f + d * l * _ - h * p * _
                    , E = r * x + o * b + a * w + s * S;
                if (0 === E) {
                    var T = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";
                    if (!0 === e)
                        throw new Error(T);
                    return console.warn(T),
                        this.identity()
                }
                var M = 1 / E;
                return i[0] = x * M,
                    i[1] = (g * f * s - p * _ * s - g * a * m + o * _ * m + p * a * y - o * f * y) * M,
                    i[2] = (l * _ * s - g * c * s + g * a * u - o * _ * u - l * a * y + o * c * y) * M,
                    i[3] = (p * c * s - l * f * s - p * a * u + o * f * u + l * a * m - o * c * m) * M,
                    i[4] = b * M,
                    i[5] = (d * _ * s - v * f * s + v * a * m - r * _ * m - d * a * y + r * f * y) * M,
                    i[6] = (v * c * s - h * _ * s - v * a * u + r * _ * u + h * a * y - r * c * y) * M,
                    i[7] = (h * f * s - d * c * s + d * a * u - r * f * u - h * a * m + r * c * m) * M,
                    i[8] = w * M,
                    i[9] = (v * p * s - d * g * s - v * o * m + r * g * m + d * o * y - r * p * y) * M,
                    i[10] = (h * g * s - v * l * s + v * o * u - r * g * u - h * o * y + r * l * y) * M,
                    i[11] = (d * l * s - h * p * s - d * o * u + r * p * u + h * o * m - r * l * m) * M,
                    i[12] = S * M,
                    i[13] = (d * g * a - v * p * a + v * o * f - r * g * f - d * o * _ + r * p * _) * M,
                    i[14] = (v * l * a - h * g * a - v * o * c + r * g * c + h * o * _ - r * l * _) * M,
                    i[15] = (h * p * a - d * l * a + d * o * c - r * p * c - h * o * f + r * l * f) * M,
                    this
            },
            scale: function (t) {
                var e = this.elements
                    , i = t.x
                    , n = t.y
                    , r = t.z;
                return e[0] *= i,
                    e[4] *= n,
                    e[8] *= r,
                    e[1] *= i,
                    e[5] *= n,
                    e[9] *= r,
                    e[2] *= i,
                    e[6] *= n,
                    e[10] *= r,
                    e[3] *= i,
                    e[7] *= n,
                    e[11] *= r,
                    this
            },
            getMaxScaleOnAxis: function () {
                var t = this.elements
                    , e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2]
                    , i = t[4] * t[4] + t[5] * t[5] + t[6] * t[6]
                    , n = t[8] * t[8] + t[9] * t[9] + t[10] * t[10];
                return Math.sqrt(Math.max(e, i, n))
            },
            makeTranslation: function (t, e, i) {
                return this.set(1, 0, 0, t, 0, 1, 0, e, 0, 0, 1, i, 0, 0, 0, 1),
                    this
            },
            makeRotationX: function (t) {
                var e = Math.cos(t)
                    , i = Math.sin(t);
                return this.set(1, 0, 0, 0, 0, e, -i, 0, 0, i, e, 0, 0, 0, 0, 1),
                    this
            },
            makeRotationY: function (t) {
                var e = Math.cos(t)
                    , i = Math.sin(t);
                return this.set(e, 0, i, 0, 0, 1, 0, 0, -i, 0, e, 0, 0, 0, 0, 1),
                    this
            },
            makeRotationZ: function (t) {
                var e = Math.cos(t)
                    , i = Math.sin(t);
                return this.set(e, -i, 0, 0, i, e, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                    this
            },
            makeRotationAxis: function (t, e) {
                var i = Math.cos(e)
                    , n = Math.sin(e)
                    , r = 1 - i
                    , o = t.x
                    , a = t.y
                    , s = t.z
                    , h = r * o
                    , l = r * a;
                return this.set(h * o + i, h * a - n * s, h * s + n * a, 0, h * a + n * s, l * a + i, l * s - n * o, 0, h * s - n * a, l * s + n * o, r * s * s + i, 0, 0, 0, 0, 1),
                    this
            },
            makeScale: function (t, e, i) {
                return this.set(t, 0, 0, 0, 0, e, 0, 0, 0, 0, i, 0, 0, 0, 0, 1),
                    this
            },
            makeShear: function (t, e, i) {
                return this.set(1, e, i, 0, t, 1, i, 0, t, e, 1, 0, 0, 0, 0, 1),
                    this
            },
            compose: function (t, e, i) {
                return this.makeRotationFromQuaternion(e),
                    this.scale(i),
                    this.setPosition(t),
                    this
            },
            decompose: function () {
                var t = new s
                    , e = new o;
                return function (i, n, r) {
                    var o = this.elements
                        , a = t.set(o[0], o[1], o[2]).length()
                        , s = t.set(o[4], o[5], o[6]).length()
                        , h = t.set(o[8], o[9], o[10]).length();
                    this.determinant() < 0 && (a = -a),
                        i.x = o[12],
                        i.y = o[13],
                        i.z = o[14],
                        e.copy(this);
                    var l = 1 / a
                        , c = 1 / s
                        , u = 1 / h;
                    return e.elements[0] *= l,
                        e.elements[1] *= l,
                        e.elements[2] *= l,
                        e.elements[4] *= c,
                        e.elements[5] *= c,
                        e.elements[6] *= c,
                        e.elements[8] *= u,
                        e.elements[9] *= u,
                        e.elements[10] *= u,
                        n.setFromRotationMatrix(e),
                        r.x = a,
                        r.y = s,
                        r.z = h,
                        this
                }
            }(),
            makePerspective: function (t, e, i, n, r, o) {
                void 0 === o && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
                var a = this.elements
                    , s = 2 * r / (e - t)
                    , h = 2 * r / (i - n)
                    , l = (e + t) / (e - t)
                    , c = (i + n) / (i - n)
                    , u = -(o + r) / (o - r)
                    , d = -2 * o * r / (o - r);
                return a[0] = s,
                    a[4] = 0,
                    a[8] = l,
                    a[12] = 0,
                    a[1] = 0,
                    a[5] = h,
                    a[9] = c,
                    a[13] = 0,
                    a[2] = 0,
                    a[6] = 0,
                    a[10] = u,
                    a[14] = d,
                    a[3] = 0,
                    a[7] = 0,
                    a[11] = -1,
                    a[15] = 0,
                    this
            },
            makeOrthographic: function (t, e, i, n, r, o) {
                var a = this.elements
                    , s = 1 / (e - t)
                    , h = 1 / (i - n)
                    , l = 1 / (o - r)
                    , c = (e + t) * s
                    , u = (i + n) * h
                    , d = (o + r) * l;
                return a[0] = 2 * s,
                    a[4] = 0,
                    a[8] = 0,
                    a[12] = -c,
                    a[1] = 0,
                    a[5] = 2 * h,
                    a[9] = 0,
                    a[13] = -u,
                    a[2] = 0,
                    a[6] = 0,
                    a[10] = -2 * l,
                    a[14] = -d,
                    a[3] = 0,
                    a[7] = 0,
                    a[11] = 0,
                    a[15] = 1,
                    this
            },
            equals: function (t) {
                for (var e = this.elements, i = t.elements, n = 0; n < 16; n++)
                    if (e[n] !== i[n])
                        return !1;
                return !0
            },
            fromArray: function (t, e) {
                void 0 === e && (e = 0);
                for (var i = 0; i < 16; i++)
                    this.elements[i] = t[i + e];
                return this
            },
            toArray: function (t, e) {
                void 0 === t && (t = []),
                    void 0 === e && (e = 0);
                var i = this.elements;
                return t[e] = i[0],
                    t[e + 1] = i[1],
                    t[e + 2] = i[2],
                    t[e + 3] = i[3],
                    t[e + 4] = i[4],
                    t[e + 5] = i[5],
                    t[e + 6] = i[6],
                    t[e + 7] = i[7],
                    t[e + 8] = i[8],
                    t[e + 9] = i[9],
                    t[e + 10] = i[10],
                    t[e + 11] = i[11],
                    t[e + 12] = i[12],
                    t[e + 13] = i[13],
                    t[e + 14] = i[14],
                    t[e + 15] = i[15],
                    t
            }
        }),
        Object.assign(a, {
            slerp: function (t, e, i, n) {
                return i.copy(t).slerp(e, n)
            },
            slerpFlat: function (t, e, i, n, r, o, a) {
                var s = i[n + 0]
                    , h = i[n + 1]
                    , l = i[n + 2]
                    , c = i[n + 3]
                    , u = r[o + 0]
                    , d = r[o + 1]
                    , p = r[o + 2]
                    , f = r[o + 3];
                if (c !== f || s !== u || h !== d || l !== p) {
                    var m = 1 - a
                        , v = s * u + h * d + l * p + c * f
                        , g = v >= 0 ? 1 : -1
                        , _ = 1 - v * v;
                    if (_ > Number.EPSILON) {
                        var y = Math.sqrt(_)
                            , x = Math.atan2(y, v * g);
                        m = Math.sin(m * x) / y,
                            a = Math.sin(a * x) / y
                    }
                    var b = a * g;
                    if (s = s * m + u * b,
                        h = h * m + d * b,
                        l = l * m + p * b,
                        c = c * m + f * b,
                        m === 1 - a) {
                        var w = 1 / Math.sqrt(s * s + h * h + l * l + c * c);
                        s *= w,
                            h *= w,
                            l *= w,
                            c *= w
                    }
                }
                t[e] = s,
                    t[e + 1] = h,
                    t[e + 2] = l,
                    t[e + 3] = c
            }
        }),
        Object.defineProperties(a.prototype, {
            x: {
                get: function () {
                    return this._x
                },
                set: function (t) {
                    this._x = t,
                        this.onChangeCallback()
                }
            },
            y: {
                get: function () {
                    return this._y
                },
                set: function (t) {
                    this._y = t,
                        this.onChangeCallback()
                }
            },
            z: {
                get: function () {
                    return this._z
                },
                set: function (t) {
                    this._z = t,
                        this.onChangeCallback()
                }
            },
            w: {
                get: function () {
                    return this._w
                },
                set: function (t) {
                    this._w = t,
                        this.onChangeCallback()
                }
            }
        }),
        Object.assign(a.prototype, {
            set: function (t, e, i, n) {
                return this._x = t,
                    this._y = e,
                    this._z = i,
                    this._w = n,
                    this.onChangeCallback(),
                    this
            },
            clone: function () {
                return new this.constructor(this._x, this._y, this._z, this._w)
            },
            copy: function (t) {
                return this._x = t.x,
                    this._y = t.y,
                    this._z = t.z,
                    this._w = t.w,
                    this.onChangeCallback(),
                    this
            },
            setFromEuler: function (t, e) {
                if (!t || !t.isEuler)
                    throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
                var i = t._x
                    , n = t._y
                    , r = t._z
                    , o = t.order
                    , a = Math.cos
                    , s = Math.sin
                    , h = a(i / 2)
                    , l = a(n / 2)
                    , c = a(r / 2)
                    , u = s(i / 2)
                    , d = s(n / 2)
                    , p = s(r / 2);
                return "XYZ" === o ? (this._x = u * l * c + h * d * p,
                    this._y = h * d * c - u * l * p,
                    this._z = h * l * p + u * d * c,
                    this._w = h * l * c - u * d * p) : "YXZ" === o ? (this._x = u * l * c + h * d * p,
                        this._y = h * d * c - u * l * p,
                        this._z = h * l * p - u * d * c,
                        this._w = h * l * c + u * d * p) : "ZXY" === o ? (this._x = u * l * c - h * d * p,
                            this._y = h * d * c + u * l * p,
                            this._z = h * l * p + u * d * c,
                            this._w = h * l * c - u * d * p) : "ZYX" === o ? (this._x = u * l * c - h * d * p,
                                this._y = h * d * c + u * l * p,
                                this._z = h * l * p - u * d * c,
                                this._w = h * l * c + u * d * p) : "YZX" === o ? (this._x = u * l * c + h * d * p,
                                    this._y = h * d * c + u * l * p,
                                    this._z = h * l * p - u * d * c,
                                    this._w = h * l * c - u * d * p) : "XZY" === o && (this._x = u * l * c - h * d * p,
                                        this._y = h * d * c - u * l * p,
                                        this._z = h * l * p + u * d * c,
                                        this._w = h * l * c + u * d * p),
                    !1 !== e && this.onChangeCallback(),
                    this
            },
            setFromAxisAngle: function (t, e) {
                var i = e / 2
                    , n = Math.sin(i);
                return this._x = t.x * n,
                    this._y = t.y * n,
                    this._z = t.z * n,
                    this._w = Math.cos(i),
                    this.onChangeCallback(),
                    this
            },
            setFromRotationMatrix: function (t) {
                var e, i = t.elements, n = i[0], r = i[4], o = i[8], a = i[1], s = i[5], h = i[9], l = i[2], c = i[6], u = i[10], d = n + s + u;
                return d > 0 ? (e = .5 / Math.sqrt(d + 1),
                    this._w = .25 / e,
                    this._x = (c - h) * e,
                    this._y = (o - l) * e,
                    this._z = (a - r) * e) : n > s && n > u ? (e = 2 * Math.sqrt(1 + n - s - u),
                        this._w = (c - h) / e,
                        this._x = .25 * e,
                        this._y = (r + a) / e,
                        this._z = (o + l) / e) : s > u ? (e = 2 * Math.sqrt(1 + s - n - u),
                            this._w = (o - l) / e,
                            this._x = (r + a) / e,
                            this._y = .25 * e,
                            this._z = (h + c) / e) : (e = 2 * Math.sqrt(1 + u - n - s),
                                this._w = (a - r) / e,
                                this._x = (o + l) / e,
                                this._y = (h + c) / e,
                                this._z = .25 * e),
                    this.onChangeCallback(),
                    this
            },
            setFromUnitVectors: function () {
                var t, e = new s;
                return function (i, n) {
                    return void 0 === e && (e = new s),
                        t = i.dot(n) + 1,
                        t < 1e-6 ? (t = 0,
                            Math.abs(i.x) > Math.abs(i.z) ? e.set(-i.y, i.x, 0) : e.set(0, -i.z, i.y)) : e.crossVectors(i, n),
                        this._x = e.x,
                        this._y = e.y,
                        this._z = e.z,
                        this._w = t,
                        this.normalize()
                }
            }(),
            inverse: function () {
                return this.conjugate().normalize()
            },
            conjugate: function () {
                return this._x *= -1,
                    this._y *= -1,
                    this._z *= -1,
                    this.onChangeCallback(),
                    this
            },
            dot: function (t) {
                return this._x * t._x + this._y * t._y + this._z * t._z + this._w * t._w
            },
            lengthSq: function () {
                return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w
            },
            length: function () {
                return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w)
            },
            normalize: function () {
                var t = this.length();
                return 0 === t ? (this._x = 0,
                    this._y = 0,
                    this._z = 0,
                    this._w = 1) : (t = 1 / t,
                        this._x = this._x * t,
                        this._y = this._y * t,
                        this._z = this._z * t,
                        this._w = this._w * t),
                    this.onChangeCallback(),
                    this
            },
            multiply: function (t, e) {
                return void 0 !== e ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),
                    this.multiplyQuaternions(t, e)) : this.multiplyQuaternions(this, t)
            },
            premultiply: function (t) {
                return this.multiplyQuaternions(t, this)
            },
            multiplyQuaternions: function (t, e) {
                var i = t._x
                    , n = t._y
                    , r = t._z
                    , o = t._w
                    , a = e._x
                    , s = e._y
                    , h = e._z
                    , l = e._w;
                return this._x = i * l + o * a + n * h - r * s,
                    this._y = n * l + o * s + r * a - i * h,
                    this._z = r * l + o * h + i * s - n * a,
                    this._w = o * l - i * a - n * s - r * h,
                    this.onChangeCallback(),
                    this
            },
            slerp: function (t, e) {
                if (0 === e)
                    return this;
                if (1 === e)
                    return this.copy(t);
                var i = this._x
                    , n = this._y
                    , r = this._z
                    , o = this._w
                    , a = o * t._w + i * t._x + n * t._y + r * t._z;
                if (a < 0 ? (this._w = -t._w,
                    this._x = -t._x,
                    this._y = -t._y,
                    this._z = -t._z,
                    a = -a) : this.copy(t),
                    a >= 1)
                    return this._w = o,
                        this._x = i,
                        this._y = n,
                        this._z = r,
                        this;
                var s = Math.sqrt(1 - a * a);
                if (Math.abs(s) < .001)
                    return this._w = .5 * (o + this._w),
                        this._x = .5 * (i + this._x),
                        this._y = .5 * (n + this._y),
                        this._z = .5 * (r + this._z),
                        this;
                var h = Math.atan2(s, a)
                    , l = Math.sin((1 - e) * h) / s
                    , c = Math.sin(e * h) / s;
                return this._w = o * l + this._w * c,
                    this._x = i * l + this._x * c,
                    this._y = n * l + this._y * c,
                    this._z = r * l + this._z * c,
                    this.onChangeCallback(),
                    this
            },
            equals: function (t) {
                return t._x === this._x && t._y === this._y && t._z === this._z && t._w === this._w
            },
            fromArray: function (t, e) {
                return void 0 === e && (e = 0),
                    this._x = t[e],
                    this._y = t[e + 1],
                    this._z = t[e + 2],
                    this._w = t[e + 3],
                    this.onChangeCallback(),
                    this
            },
            toArray: function (t, e) {
                return void 0 === t && (t = []),
                    void 0 === e && (e = 0),
                    t[e] = this._x,
                    t[e + 1] = this._y,
                    t[e + 2] = this._z,
                    t[e + 3] = this._w,
                    t
            },
            onChange: function (t) {
                return this.onChangeCallback = t,
                    this
            },
            onChangeCallback: function () { }
        }),
        Object.assign(s.prototype, {
            isVector3: !0,
            set: function (t, e, i) {
                return this.x = t,
                    this.y = e,
                    this.z = i,
                    this
            },
            setScalar: function (t) {
                return this.x = t,
                    this.y = t,
                    this.z = t,
                    this
            },
            setX: function (t) {
                return this.x = t,
                    this
            },
            setY: function (t) {
                return this.y = t,
                    this
            },
            setZ: function (t) {
                return this.z = t,
                    this
            },
            setComponent: function (t, e) {
                switch (t) {
                    case 0:
                        this.x = e;
                        break;
                    case 1:
                        this.y = e;
                        break;
                    case 2:
                        this.z = e;
                        break;
                    default:
                        throw new Error("index is out of range: " + t)
                }
                return this
            },
            getComponent: function (t) {
                switch (t) {
                    case 0:
                        return this.x;
                    case 1:
                        return this.y;
                    case 2:
                        return this.z;
                    default:
                        throw new Error("index is out of range: " + t)
                }
            },
            clone: function () {
                return new this.constructor(this.x, this.y, this.z)
            },
            copy: function (t) {
                return this.x = t.x,
                    this.y = t.y,
                    this.z = t.z,
                    this
            },
            add: function (t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
                    this.addVectors(t, e)) : (this.x += t.x,
                        this.y += t.y,
                        this.z += t.z,
                        this)
            },
            addScalar: function (t) {
                return this.x += t,
                    this.y += t,
                    this.z += t,
                    this
            },
            addVectors: function (t, e) {
                return this.x = t.x + e.x,
                    this.y = t.y + e.y,
                    this.z = t.z + e.z,
                    this
            },
            addScaledVector: function (t, e) {
                return this.x += t.x * e,
                    this.y += t.y * e,
                    this.z += t.z * e,
                    this
            },
            sub: function (t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
                    this.subVectors(t, e)) : (this.x -= t.x,
                        this.y -= t.y,
                        this.z -= t.z,
                        this)
            },
            subScalar: function (t) {
                return this.x -= t,
                    this.y -= t,
                    this.z -= t,
                    this
            },
            subVectors: function (t, e) {
                return this.x = t.x - e.x,
                    this.y = t.y - e.y,
                    this.z = t.z - e.z,
                    this
            },
            multiply: function (t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),
                    this.multiplyVectors(t, e)) : (this.x *= t.x,
                        this.y *= t.y,
                        this.z *= t.z,
                        this)
            },
            multiplyScalar: function (t) {
                return this.x *= t,
                    this.y *= t,
                    this.z *= t,
                    this
            },
            multiplyVectors: function (t, e) {
                return this.x = t.x * e.x,
                    this.y = t.y * e.y,
                    this.z = t.z * e.z,
                    this
            },
            applyEuler: function () {
                var t = new a;
                return function (e) {
                    return e && e.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),
                        this.applyQuaternion(t.setFromEuler(e))
                }
            }(),
            applyAxisAngle: function () {
                var t = new a;
                return function (e, i) {
                    return this.applyQuaternion(t.setFromAxisAngle(e, i))
                }
            }(),
            applyMatrix3: function (t) {
                var e = this.x
                    , i = this.y
                    , n = this.z
                    , r = t.elements;
                return this.x = r[0] * e + r[3] * i + r[6] * n,
                    this.y = r[1] * e + r[4] * i + r[7] * n,
                    this.z = r[2] * e + r[5] * i + r[8] * n,
                    this
            },
            applyMatrix4: function (t) {
                var e = this.x
                    , i = this.y
                    , n = this.z
                    , r = t.elements
                    , o = 1 / (r[3] * e + r[7] * i + r[11] * n + r[15]);
                return this.x = (r[0] * e + r[4] * i + r[8] * n + r[12]) * o,
                    this.y = (r[1] * e + r[5] * i + r[9] * n + r[13]) * o,
                    this.z = (r[2] * e + r[6] * i + r[10] * n + r[14]) * o,
                    this
            },
            applyQuaternion: function (t) {
                var e = this.x
                    , i = this.y
                    , n = this.z
                    , r = t.x
                    , o = t.y
                    , a = t.z
                    , s = t.w
                    , h = s * e + o * n - a * i
                    , l = s * i + a * e - r * n
                    , c = s * n + r * i - o * e
                    , u = -r * e - o * i - a * n;
                return this.x = h * s + u * -r + l * -a - c * -o,
                    this.y = l * s + u * -o + c * -r - h * -a,
                    this.z = c * s + u * -a + h * -o - l * -r,
                    this
            },
            project: function () {
                var t = new o;
                return function (e) {
                    return t.multiplyMatrices(e.projectionMatrix, t.getInverse(e.matrixWorld)),
                        this.applyMatrix4(t)
                }
            }(),
            unproject: function () {
                var t = new o;
                return function (e) {
                    return t.multiplyMatrices(e.matrixWorld, t.getInverse(e.projectionMatrix)),
                        this.applyMatrix4(t)
                }
            }(),
            transformDirection: function (t) {
                var e = this.x
                    , i = this.y
                    , n = this.z
                    , r = t.elements;
                return this.x = r[0] * e + r[4] * i + r[8] * n,
                    this.y = r[1] * e + r[5] * i + r[9] * n,
                    this.z = r[2] * e + r[6] * i + r[10] * n,
                    this.normalize()
            },
            divide: function (t) {
                return this.x /= t.x,
                    this.y /= t.y,
                    this.z /= t.z,
                    this
            },
            divideScalar: function (t) {
                return this.multiplyScalar(1 / t)
            },
            min: function (t) {
                return this.x = Math.min(this.x, t.x),
                    this.y = Math.min(this.y, t.y),
                    this.z = Math.min(this.z, t.z),
                    this
            },
            max: function (t) {
                return this.x = Math.max(this.x, t.x),
                    this.y = Math.max(this.y, t.y),
                    this.z = Math.max(this.z, t.z),
                    this
            },
            clamp: function (t, e) {
                return this.x = Math.max(t.x, Math.min(e.x, this.x)),
                    this.y = Math.max(t.y, Math.min(e.y, this.y)),
                    this.z = Math.max(t.z, Math.min(e.z, this.z)),
                    this
            },
            clampScalar: function () {
                var t = new s
                    , e = new s;
                return function (i, n) {
                    return t.set(i, i, i),
                        e.set(n, n, n),
                        this.clamp(t, e)
                }
            }(),
            clampLength: function (t, e) {
                var i = this.length();
                return this.divideScalar(i || 1).multiplyScalar(Math.max(t, Math.min(e, i)))
            },
            floor: function () {
                return this.x = Math.floor(this.x),
                    this.y = Math.floor(this.y),
                    this.z = Math.floor(this.z),
                    this
            },
            ceil: function () {
                return this.x = Math.ceil(this.x),
                    this.y = Math.ceil(this.y),
                    this.z = Math.ceil(this.z),
                    this
            },
            round: function () {
                return this.x = Math.round(this.x),
                    this.y = Math.round(this.y),
                    this.z = Math.round(this.z),
                    this
            },
            roundToZero: function () {
                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
                    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
                    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z),
                    this
            },
            negate: function () {
                return this.x = -this.x,
                    this.y = -this.y,
                    this.z = -this.z,
                    this
            },
            dot: function (t) {
                return this.x * t.x + this.y * t.y + this.z * t.z
            },
            lengthSq: function () {
                return this.x * this.x + this.y * this.y + this.z * this.z
            },
            length: function () {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
            },
            manhattanLength: function () {
                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)
            },
            normalize: function () {
                return this.divideScalar(this.length() || 1)
            },
            setLength: function (t) {
                return this.normalize().multiplyScalar(t)
            },
            lerp: function (t, e) {
                return this.x += (t.x - this.x) * e,
                    this.y += (t.y - this.y) * e,
                    this.z += (t.z - this.z) * e,
                    this
            },
            lerpVectors: function (t, e, i) {
                return this.subVectors(e, t).multiplyScalar(i).add(t)
            },
            cross: function (t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),
                    this.crossVectors(t, e)) : this.crossVectors(this, t)
            },
            crossVectors: function (t, e) {
                var i = t.x
                    , n = t.y
                    , r = t.z
                    , o = e.x
                    , a = e.y
                    , s = e.z;
                return this.x = n * s - r * a,
                    this.y = r * o - i * s,
                    this.z = i * a - n * o,
                    this
            },
            projectOnVector: function (t) {
                var e = t.dot(this) / t.lengthSq();
                return this.copy(t).multiplyScalar(e)
            },
            projectOnPlane: function () {
                var t = new s;
                return function (e) {
                    return t.copy(this).projectOnVector(e),
                        this.sub(t)
                }
            }(),
            reflect: function () {
                var t = new s;
                return function (e) {
                    return this.sub(t.copy(e).multiplyScalar(2 * this.dot(e)))
                }
            }(),
            angleTo: function (t) {
                var e = this.dot(t) / Math.sqrt(this.lengthSq() * t.lengthSq());
                return Math.acos(sh.clamp(e, -1, 1))
            },
            distanceTo: function (t) {
                return Math.sqrt(this.distanceToSquared(t))
            },
            distanceToSquared: function (t) {
                var e = this.x - t.x
                    , i = this.y - t.y
                    , n = this.z - t.z;
                return e * e + i * i + n * n
            },
            manhattanDistanceTo: function (t) {
                return Math.abs(this.x - t.x) + Math.abs(this.y - t.y) + Math.abs(this.z - t.z)
            },
            setFromSpherical: function (t) {
                var e = Math.sin(t.phi) * t.radius;
                return this.x = e * Math.sin(t.theta),
                    this.y = Math.cos(t.phi) * t.radius,
                    this.z = e * Math.cos(t.theta),
                    this
            },
            setFromCylindrical: function (t) {
                return this.x = t.radius * Math.sin(t.theta),
                    this.y = t.y,
                    this.z = t.radius * Math.cos(t.theta),
                    this
            },
            setFromMatrixPosition: function (t) {
                var e = t.elements;
                return this.x = e[12],
                    this.y = e[13],
                    this.z = e[14],
                    this
            },
            setFromMatrixScale: function (t) {
                var e = this.setFromMatrixColumn(t, 0).length()
                    , i = this.setFromMatrixColumn(t, 1).length()
                    , n = this.setFromMatrixColumn(t, 2).length();
                return this.x = e,
                    this.y = i,
                    this.z = n,
                    this
            },
            setFromMatrixColumn: function (t, e) {
                return this.fromArray(t.elements, 4 * e)
            },
            equals: function (t) {
                return t.x === this.x && t.y === this.y && t.z === this.z
            },
            fromArray: function (t, e) {
                return void 0 === e && (e = 0),
                    this.x = t[e],
                    this.y = t[e + 1],
                    this.z = t[e + 2],
                    this
            },
            toArray: function (t, e) {
                return void 0 === t && (t = []),
                    void 0 === e && (e = 0),
                    t[e] = this.x,
                    t[e + 1] = this.y,
                    t[e + 2] = this.z,
                    t
            },
            fromBufferAttribute: function (t, e, i) {
                return void 0 !== i && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),
                    this.x = t.getX(e),
                    this.y = t.getY(e),
                    this.z = t.getZ(e),
                    this
            }
        }),
        Object.assign(h.prototype, {
            isMatrix3: !0,
            set: function (t, e, i, n, r, o, a, s, h) {
                var l = this.elements;
                return l[0] = t,
                    l[1] = n,
                    l[2] = a,
                    l[3] = e,
                    l[4] = r,
                    l[5] = s,
                    l[6] = i,
                    l[7] = o,
                    l[8] = h,
                    this
            },
            identity: function () {
                return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1),
                    this
            },
            clone: function () {
                return (new this.constructor).fromArray(this.elements)
            },
            copy: function (t) {
                var e = this.elements
                    , i = t.elements;
                return e[0] = i[0],
                    e[1] = i[1],
                    e[2] = i[2],
                    e[3] = i[3],
                    e[4] = i[4],
                    e[5] = i[5],
                    e[6] = i[6],
                    e[7] = i[7],
                    e[8] = i[8],
                    this
            },
            setFromMatrix4: function (t) {
                var e = t.elements;
                return this.set(e[0], e[4], e[8], e[1], e[5], e[9], e[2], e[6], e[10]),
                    this
            },
            applyToBufferAttribute: function () {
                var t = new s;
                return function (e) {
                    for (var i = 0, n = e.count; i < n; i++)
                        t.x = e.getX(i),
                            t.y = e.getY(i),
                            t.z = e.getZ(i),
                            t.applyMatrix3(this),
                            e.setXYZ(i, t.x, t.y, t.z);
                    return e
                }
            }(),
            multiply: function (t) {
                return this.multiplyMatrices(this, t)
            },
            premultiply: function (t) {
                return this.multiplyMatrices(t, this)
            },
            multiplyMatrices: function (t, e) {
                var i = t.elements
                    , n = e.elements
                    , r = this.elements
                    , o = i[0]
                    , a = i[3]
                    , s = i[6]
                    , h = i[1]
                    , l = i[4]
                    , c = i[7]
                    , u = i[2]
                    , d = i[5]
                    , p = i[8]
                    , f = n[0]
                    , m = n[3]
                    , v = n[6]
                    , g = n[1]
                    , _ = n[4]
                    , y = n[7]
                    , x = n[2]
                    , b = n[5]
                    , w = n[8];
                return r[0] = o * f + a * g + s * x,
                    r[3] = o * m + a * _ + s * b,
                    r[6] = o * v + a * y + s * w,
                    r[1] = h * f + l * g + c * x,
                    r[4] = h * m + l * _ + c * b,
                    r[7] = h * v + l * y + c * w,
                    r[2] = u * f + d * g + p * x,
                    r[5] = u * m + d * _ + p * b,
                    r[8] = u * v + d * y + p * w,
                    this
            },
            multiplyScalar: function (t) {
                var e = this.elements;
                return e[0] *= t,
                    e[3] *= t,
                    e[6] *= t,
                    e[1] *= t,
                    e[4] *= t,
                    e[7] *= t,
                    e[2] *= t,
                    e[5] *= t,
                    e[8] *= t,
                    this
            },
            determinant: function () {
                var t = this.elements
                    , e = t[0]
                    , i = t[1]
                    , n = t[2]
                    , r = t[3]
                    , o = t[4]
                    , a = t[5]
                    , s = t[6]
                    , h = t[7]
                    , l = t[8];
                return e * o * l - e * a * h - i * r * l + i * a * s + n * r * h - n * o * s
            },
            getInverse: function (t, e) {
                t && t.isMatrix4 && console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");
                var i = t.elements
                    , n = this.elements
                    , r = i[0]
                    , o = i[1]
                    , a = i[2]
                    , s = i[3]
                    , h = i[4]
                    , l = i[5]
                    , c = i[6]
                    , u = i[7]
                    , d = i[8]
                    , p = d * h - l * u
                    , f = l * c - d * s
                    , m = u * s - h * c
                    , v = r * p + o * f + a * m;
                if (0 === v) {
                    var g = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";
                    if (!0 === e)
                        throw new Error(g);
                    return console.warn(g),
                        this.identity()
                }
                var _ = 1 / v;
                return n[0] = p * _,
                    n[1] = (a * u - d * o) * _,
                    n[2] = (l * o - a * h) * _,
                    n[3] = f * _,
                    n[4] = (d * r - a * c) * _,
                    n[5] = (a * s - l * r) * _,
                    n[6] = m * _,
                    n[7] = (o * c - u * r) * _,
                    n[8] = (h * r - o * s) * _,
                    this
            },
            transpose: function () {
                var t, e = this.elements;
                return t = e[1],
                    e[1] = e[3],
                    e[3] = t,
                    t = e[2],
                    e[2] = e[6],
                    e[6] = t,
                    t = e[5],
                    e[5] = e[7],
                    e[7] = t,
                    this
            },
            getNormalMatrix: function (t) {
                return this.setFromMatrix4(t).getInverse(this).transpose()
            },
            transposeIntoArray: function (t) {
                var e = this.elements;
                return t[0] = e[0],
                    t[1] = e[3],
                    t[2] = e[6],
                    t[3] = e[1],
                    t[4] = e[4],
                    t[5] = e[7],
                    t[6] = e[2],
                    t[7] = e[5],
                    t[8] = e[8],
                    this
            },
            setUvTransform: function (t, e, i, n, r, o, a) {
                var s = Math.cos(r)
                    , h = Math.sin(r);
                this.set(i * s, i * h, -i * (s * o + h * a) + o + t, -n * h, n * s, -n * (-h * o + s * a) + a + e, 0, 0, 1)
            },
            scale: function (t, e) {
                var i = this.elements;
                return i[0] *= t,
                    i[3] *= t,
                    i[6] *= t,
                    i[1] *= e,
                    i[4] *= e,
                    i[7] *= e,
                    this
            },
            rotate: function (t) {
                var e = Math.cos(t)
                    , i = Math.sin(t)
                    , n = this.elements
                    , r = n[0]
                    , o = n[3]
                    , a = n[6]
                    , s = n[1]
                    , h = n[4]
                    , l = n[7];
                return n[0] = e * r + i * s,
                    n[3] = e * o + i * h,
                    n[6] = e * a + i * l,
                    n[1] = -i * r + e * s,
                    n[4] = -i * o + e * h,
                    n[7] = -i * a + e * l,
                    this
            },
            translate: function (t, e) {
                var i = this.elements;
                return i[0] += t * i[2],
                    i[3] += t * i[5],
                    i[6] += t * i[8],
                    i[1] += e * i[2],
                    i[4] += e * i[5],
                    i[7] += e * i[8],
                    this
            },
            equals: function (t) {
                for (var e = this.elements, i = t.elements, n = 0; n < 9; n++)
                    if (e[n] !== i[n])
                        return !1;
                return !0
            },
            fromArray: function (t, e) {
                void 0 === e && (e = 0);
                for (var i = 0; i < 9; i++)
                    this.elements[i] = t[i + e];
                return this
            },
            toArray: function (t, e) {
                void 0 === t && (t = []),
                    void 0 === e && (e = 0);
                var i = this.elements;
                return t[e] = i[0],
                    t[e + 1] = i[1],
                    t[e + 2] = i[2],
                    t[e + 3] = i[3],
                    t[e + 4] = i[4],
                    t[e + 5] = i[5],
                    t[e + 6] = i[6],
                    t[e + 7] = i[7],
                    t[e + 8] = i[8],
                    t
            }
        });
    var hh = 0;
    l.DEFAULT_IMAGE = void 0,
        l.DEFAULT_MAPPING = Ya,
        l.prototype = Object.assign(Object.create(n.prototype), {
            constructor: l,
            isTexture: !0,
            clone: function () {
                return (new this.constructor).copy(this)
            },
            copy: function (t) {
                return this.name = t.name,
                    this.image = t.image,
                    this.mipmaps = t.mipmaps.slice(0),
                    this.mapping = t.mapping,
                    this.wrapS = t.wrapS,
                    this.wrapT = t.wrapT,
                    this.magFilter = t.magFilter,
                    this.minFilter = t.minFilter,
                    this.anisotropy = t.anisotropy,
                    this.format = t.format,
                    this.type = t.type,
                    this.offset.copy(t.offset),
                    this.repeat.copy(t.repeat),
                    this.center.copy(t.center),
                    this.rotation = t.rotation,
                    this.matrixAutoUpdate = t.matrixAutoUpdate,
                    this.matrix.copy(t.matrix),
                    this.generateMipmaps = t.generateMipmaps,
                    this.premultiplyAlpha = t.premultiplyAlpha,
                    this.flipY = t.flipY,
                    this.unpackAlignment = t.unpackAlignment,
                    this.encoding = t.encoding,
                    this
            },
            toJSON: function (t) {
                var e = void 0 === t || "string" == typeof t;
                if (!e && void 0 !== t.textures[this.uuid])
                    return t.textures[this.uuid];
                var i = {
                    metadata: {
                        version: 4.5,
                        type: "Texture",
                        generator: "Texture.toJSON"
                    },
                    uuid: this.uuid,
                    name: this.name,
                    mapping: this.mapping,
                    repeat: [this.repeat.x, this.repeat.y],
                    offset: [this.offset.x, this.offset.y],
                    center: [this.center.x, this.center.y],
                    rotation: this.rotation,
                    wrap: [this.wrapS, this.wrapT],
                    minFilter: this.minFilter,
                    magFilter: this.magFilter,
                    anisotropy: this.anisotropy,
                    flipY: this.flipY
                };
                if (void 0 !== this.image) {
                    var n = this.image;
                    void 0 === n.uuid && (n.uuid = sh.generateUUID()),
                        e || void 0 !== t.images[n.uuid] || (t.images[n.uuid] = {
                            uuid: n.uuid,
                            url: function (t) {
                                var e;
                                if (t instanceof HTMLCanvasElement)
                                    e = t;
                                else {
                                    e = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"),
                                        e.width = t.width,
                                        e.height = t.height;
                                    var i = e.getContext("2d");
                                    t instanceof ImageData ? i.putImageData(t, 0, 0) : i.drawImage(t, 0, 0, t.width, t.height)
                                }
                                return e.width > 2048 || e.height > 2048 ? e.toDataURL("image/jpeg", .6) : e.toDataURL("image/png")
                            }(n)
                        }),
                        i.image = n.uuid
                }
                return e || (t.textures[this.uuid] = i),
                    i
            },
            dispose: function () {
                this.dispatchEvent({
                    type: "dispose"
                })
            },
            transformUv: function (t) {
                if (this.mapping === Ya) {
                    if (t.applyMatrix3(this.matrix),
                        t.x < 0 || t.x > 1)
                        switch (this.wrapS) {
                            case es:
                                t.x = t.x - Math.floor(t.x);
                                break;
                            case is:
                                t.x = t.x < 0 ? 0 : 1;
                                break;
                            case ns:
                                1 === Math.abs(Math.floor(t.x) % 2) ? t.x = Math.ceil(t.x) - t.x : t.x = t.x - Math.floor(t.x)
                        }
                    if (t.y < 0 || t.y > 1)
                        switch (this.wrapT) {
                            case es:
                                t.y = t.y - Math.floor(t.y);
                                break;
                            case is:
                                t.y = t.y < 0 ? 0 : 1;
                                break;
                            case ns:
                                1 === Math.abs(Math.floor(t.y) % 2) ? t.y = Math.ceil(t.y) - t.y : t.y = t.y - Math.floor(t.y)
                        }
                    this.flipY && (t.y = 1 - t.y)
                }
            }
        }),
        Object.defineProperty(l.prototype, "needsUpdate", {
            set: function (t) {
                !0 === t && this.version++
            }
        }),
        Object.assign(c.prototype, {
            isVector4: !0,
            set: function (t, e, i, n) {
                return this.x = t,
                    this.y = e,
                    this.z = i,
                    this.w = n,
                    this
            },
            setScalar: function (t) {
                return this.x = t,
                    this.y = t,
                    this.z = t,
                    this.w = t,
                    this
            },
            setX: function (t) {
                return this.x = t,
                    this
            },
            setY: function (t) {
                return this.y = t,
                    this
            },
            setZ: function (t) {
                return this.z = t,
                    this
            },
            setW: function (t) {
                return this.w = t,
                    this
            },
            setComponent: function (t, e) {
                switch (t) {
                    case 0:
                        this.x = e;
                        break;
                    case 1:
                        this.y = e;
                        break;
                    case 2:
                        this.z = e;
                        break;
                    case 3:
                        this.w = e;
                        break;
                    default:
                        throw new Error("index is out of range: " + t)
                }
                return this
            },
            getComponent: function (t) {
                switch (t) {
                    case 0:
                        return this.x;
                    case 1:
                        return this.y;
                    case 2:
                        return this.z;
                    case 3:
                        return this.w;
                    default:
                        throw new Error("index is out of range: " + t)
                }
            },
            clone: function () {
                return new this.constructor(this.x, this.y, this.z, this.w)
            },
            copy: function (t) {
                return this.x = t.x,
                    this.y = t.y,
                    this.z = t.z,
                    this.w = void 0 !== t.w ? t.w : 1,
                    this
            },
            add: function (t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
                    this.addVectors(t, e)) : (this.x += t.x,
                        this.y += t.y,
                        this.z += t.z,
                        this.w += t.w,
                        this)
            },
            addScalar: function (t) {
                return this.x += t,
                    this.y += t,
                    this.z += t,
                    this.w += t,
                    this
            },
            addVectors: function (t, e) {
                return this.x = t.x + e.x,
                    this.y = t.y + e.y,
                    this.z = t.z + e.z,
                    this.w = t.w + e.w,
                    this
            },
            addScaledVector: function (t, e) {
                return this.x += t.x * e,
                    this.y += t.y * e,
                    this.z += t.z * e,
                    this.w += t.w * e,
                    this
            },
            sub: function (t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
                    this.subVectors(t, e)) : (this.x -= t.x,
                        this.y -= t.y,
                        this.z -= t.z,
                        this.w -= t.w,
                        this)
            },
            subScalar: function (t) {
                return this.x -= t,
                    this.y -= t,
                    this.z -= t,
                    this.w -= t,
                    this
            },
            subVectors: function (t, e) {
                return this.x = t.x - e.x,
                    this.y = t.y - e.y,
                    this.z = t.z - e.z,
                    this.w = t.w - e.w,
                    this
            },
            multiplyScalar: function (t) {
                return this.x *= t,
                    this.y *= t,
                    this.z *= t,
                    this.w *= t,
                    this
            },
            applyMatrix4: function (t) {
                var e = this.x
                    , i = this.y
                    , n = this.z
                    , r = this.w
                    , o = t.elements;
                return this.x = o[0] * e + o[4] * i + o[8] * n + o[12] * r,
                    this.y = o[1] * e + o[5] * i + o[9] * n + o[13] * r,
                    this.z = o[2] * e + o[6] * i + o[10] * n + o[14] * r,
                    this.w = o[3] * e + o[7] * i + o[11] * n + o[15] * r,
                    this
            },
            divideScalar: function (t) {
                return this.multiplyScalar(1 / t)
            },
            setAxisAngleFromQuaternion: function (t) {
                this.w = 2 * Math.acos(t.w);
                var e = Math.sqrt(1 - t.w * t.w);
                return e < 1e-4 ? (this.x = 1,
                    this.y = 0,
                    this.z = 0) : (this.x = t.x / e,
                        this.y = t.y / e,
                        this.z = t.z / e),
                    this
            },
            setAxisAngleFromRotationMatrix: function (t) {
                var e, i, n, r, o = t.elements, a = o[0], s = o[4], h = o[8], l = o[1], c = o[5], u = o[9], d = o[2], p = o[6], f = o[10];
                if (Math.abs(s - l) < .01 && Math.abs(h - d) < .01 && Math.abs(u - p) < .01) {
                    if (Math.abs(s + l) < .1 && Math.abs(h + d) < .1 && Math.abs(u + p) < .1 && Math.abs(a + c + f - 3) < .1)
                        return this.set(1, 0, 0, 0),
                            this;
                    e = Math.PI;
                    var m = (a + 1) / 2
                        , v = (c + 1) / 2
                        , g = (f + 1) / 2
                        , _ = (s + l) / 4
                        , y = (h + d) / 4
                        , x = (u + p) / 4;
                    return m > v && m > g ? m < .01 ? (i = 0,
                        n = .707106781,
                        r = .707106781) : (i = Math.sqrt(m),
                            n = _ / i,
                            r = y / i) : v > g ? v < .01 ? (i = .707106781,
                                n = 0,
                                r = .707106781) : (n = Math.sqrt(v),
                                    i = _ / n,
                                    r = x / n) : g < .01 ? (i = .707106781,
                                        n = .707106781,
                                        r = 0) : (r = Math.sqrt(g),
                                            i = y / r,
                                            n = x / r),
                        this.set(i, n, r, e),
                        this
                }
                var b = Math.sqrt((p - u) * (p - u) + (h - d) * (h - d) + (l - s) * (l - s));
                return Math.abs(b) < .001 && (b = 1),
                    this.x = (p - u) / b,
                    this.y = (h - d) / b,
                    this.z = (l - s) / b,
                    this.w = Math.acos((a + c + f - 1) / 2),
                    this
            },
            min: function (t) {
                return this.x = Math.min(this.x, t.x),
                    this.y = Math.min(this.y, t.y),
                    this.z = Math.min(this.z, t.z),
                    this.w = Math.min(this.w, t.w),
                    this
            },
            max: function (t) {
                return this.x = Math.max(this.x, t.x),
                    this.y = Math.max(this.y, t.y),
                    this.z = Math.max(this.z, t.z),
                    this.w = Math.max(this.w, t.w),
                    this
            },
            clamp: function (t, e) {
                return this.x = Math.max(t.x, Math.min(e.x, this.x)),
                    this.y = Math.max(t.y, Math.min(e.y, this.y)),
                    this.z = Math.max(t.z, Math.min(e.z, this.z)),
                    this.w = Math.max(t.w, Math.min(e.w, this.w)),
                    this
            },
            clampScalar: function () {
                var t, e;
                return function (i, n) {
                    return void 0 === t && (t = new c,
                        e = new c),
                        t.set(i, i, i, i),
                        e.set(n, n, n, n),
                        this.clamp(t, e)
                }
            }(),
            clampLength: function (t, e) {
                var i = this.length();
                return this.divideScalar(i || 1).multiplyScalar(Math.max(t, Math.min(e, i)))
            },
            floor: function () {
                return this.x = Math.floor(this.x),
                    this.y = Math.floor(this.y),
                    this.z = Math.floor(this.z),
                    this.w = Math.floor(this.w),
                    this
            },
            ceil: function () {
                return this.x = Math.ceil(this.x),
                    this.y = Math.ceil(this.y),
                    this.z = Math.ceil(this.z),
                    this.w = Math.ceil(this.w),
                    this
            },
            round: function () {
                return this.x = Math.round(this.x),
                    this.y = Math.round(this.y),
                    this.z = Math.round(this.z),
                    this.w = Math.round(this.w),
                    this
            },
            roundToZero: function () {
                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
                    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
                    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z),
                    this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w),
                    this
            },
            negate: function () {
                return this.x = -this.x,
                    this.y = -this.y,
                    this.z = -this.z,
                    this.w = -this.w,
                    this
            },
            dot: function (t) {
                return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w
            },
            lengthSq: function () {
                return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
            },
            length: function () {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)
            },
            manhattanLength: function () {
                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w)
            },
            normalize: function () {
                return this.divideScalar(this.length() || 1)
            },
            setLength: function (t) {
                return this.normalize().multiplyScalar(t)
            },
            lerp: function (t, e) {
                return this.x += (t.x - this.x) * e,
                    this.y += (t.y - this.y) * e,
                    this.z += (t.z - this.z) * e,
                    this.w += (t.w - this.w) * e,
                    this
            },
            lerpVectors: function (t, e, i) {
                return this.subVectors(e, t).multiplyScalar(i).add(t)
            },
            equals: function (t) {
                return t.x === this.x && t.y === this.y && t.z === this.z && t.w === this.w
            },
            fromArray: function (t, e) {
                return void 0 === e && (e = 0),
                    this.x = t[e],
                    this.y = t[e + 1],
                    this.z = t[e + 2],
                    this.w = t[e + 3],
                    this
            },
            toArray: function (t, e) {
                return void 0 === t && (t = []),
                    void 0 === e && (e = 0),
                    t[e] = this.x,
                    t[e + 1] = this.y,
                    t[e + 2] = this.z,
                    t[e + 3] = this.w,
                    t
            },
            fromBufferAttribute: function (t, e, i) {
                return void 0 !== i && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),
                    this.x = t.getX(e),
                    this.y = t.getY(e),
                    this.z = t.getZ(e),
                    this.w = t.getW(e),
                    this
            }
        }),
        u.prototype = Object.assign(Object.create(n.prototype), {
            constructor: u,
            isWebGLRenderTarget: !0,
            setSize: function (t, e) {
                this.width === t && this.height === e || (this.width = t,
                    this.height = e,
                    this.dispose()),
                    this.viewport.set(0, 0, t, e),
                    this.scissor.set(0, 0, t, e)
            },
            clone: function () {
                return (new this.constructor).copy(this)
            },
            copy: function (t) {
                return this.width = t.width,
                    this.height = t.height,
                    this.viewport.copy(t.viewport),
                    this.texture = t.texture.clone(),
                    this.depthBuffer = t.depthBuffer,
                    this.stencilBuffer = t.stencilBuffer,
                    this.depthTexture = t.depthTexture,
                    this
            },
            dispose: function () {
                this.dispatchEvent({
                    type: "dispose"
                })
            }
        }),
        d.prototype = Object.create(u.prototype),
        d.prototype.constructor = d,
        d.prototype.isWebGLRenderTargetCube = !0,
        p.prototype = Object.create(l.prototype),
        p.prototype.constructor = p,
        p.prototype.isDataTexture = !0,
        f.prototype = Object.create(l.prototype),
        f.prototype.constructor = f,
        f.prototype.isCubeTexture = !0,
        Object.defineProperty(f.prototype, "images", {
            get: function () {
                return this.image
            },
            set: function (t) {
                this.image = t
            }
        });
    var lh = new l
        , ch = new f
        , uh = []
        , dh = []
        , ph = new Float32Array(16)
        , fh = new Float32Array(9);
    W.prototype.setValue = function (t, e) {
        for (var i = this.seq, n = 0, r = i.length; n !== r; ++n) {
            var o = i[n];
            o.setValue(t, e[o.id])
        }
    }
        ;
    var mh = /([\w\d_]+)(\])?(\[|\.)?/g;
    q.prototype.setValue = function (t, e, i) {
        var n = this.map[e];
        void 0 !== n && n.setValue(t, i, this.renderer)
    }
        ,
        q.prototype.setOptional = function (t, e, i) {
            var n = e[i];
            void 0 !== n && this.setValue(t, i, n)
        }
        ,
        q.upload = function (t, e, i, n) {
            for (var r = 0, o = e.length; r !== o; ++r) {
                var a = e[r]
                    , s = i[a.id];
                !1 !== s.needsUpdate && a.setValue(t, s.value, n)
            }
        }
        ,
        q.seqWithValue = function (t, e) {
            for (var i = [], n = 0, r = t.length; n !== r; ++n) {
                var o = t[n];
                o.id in e && i.push(o)
            }
            return i
        }
        ;
    var vh = {
        aliceblue: 15792383,
        antiquewhite: 16444375,
        aqua: 65535,
        aquamarine: 8388564,
        azure: 15794175,
        beige: 16119260,
        bisque: 16770244,
        black: 0,
        blanchedalmond: 16772045,
        blue: 255,
        blueviolet: 9055202,
        brown: 10824234,
        burlywood: 14596231,
        cadetblue: 6266528,
        chartreuse: 8388352,
        chocolate: 13789470,
        coral: 16744272,
        cornflowerblue: 6591981,
        cornsilk: 16775388,
        crimson: 14423100,
        cyan: 65535,
        darkblue: 139,
        darkcyan: 35723,
        darkgoldenrod: 12092939,
        darkgray: 11119017,
        darkgreen: 25600,
        darkgrey: 11119017,
        darkkhaki: 12433259,
        darkmagenta: 9109643,
        darkolivegreen: 5597999,
        darkorange: 16747520,
        darkorchid: 10040012,
        darkred: 9109504,
        darksalmon: 15308410,
        darkseagreen: 9419919,
        darkslateblue: 4734347,
        darkslategray: 3100495,
        darkslategrey: 3100495,
        darkturquoise: 52945,
        darkviolet: 9699539,
        deeppink: 16716947,
        deepskyblue: 49151,
        dimgray: 6908265,
        dimgrey: 6908265,
        dodgerblue: 2003199,
        firebrick: 11674146,
        floralwhite: 16775920,
        forestgreen: 2263842,
        fuchsia: 16711935,
        gainsboro: 14474460,
        ghostwhite: 16316671,
        gold: 16766720,
        goldenrod: 14329120,
        gray: 8421504,
        green: 32768,
        greenyellow: 11403055,
        grey: 8421504,
        honeydew: 15794160,
        hotpink: 16738740,
        indianred: 13458524,
        indigo: 4915330,
        ivory: 16777200,
        khaki: 15787660,
        lavender: 15132410,
        lavenderblush: 16773365,
        lawngreen: 8190976,
        lemonchiffon: 16775885,
        lightblue: 11393254,
        lightcoral: 15761536,
        lightcyan: 14745599,
        lightgoldenrodyellow: 16448210,
        lightgray: 13882323,
        lightgreen: 9498256,
        lightgrey: 13882323,
        lightpink: 16758465,
        lightsalmon: 16752762,
        lightseagreen: 2142890,
        lightskyblue: 8900346,
        lightslategray: 7833753,
        lightslategrey: 7833753,
        lightsteelblue: 11584734,
        lightyellow: 16777184,
        lime: 65280,
        limegreen: 3329330,
        linen: 16445670,
        magenta: 16711935,
        maroon: 8388608,
        mediumaquamarine: 6737322,
        mediumblue: 205,
        mediumorchid: 12211667,
        mediumpurple: 9662683,
        mediumseagreen: 3978097,
        mediumslateblue: 8087790,
        mediumspringgreen: 64154,
        mediumturquoise: 4772300,
        mediumvioletred: 13047173,
        midnightblue: 1644912,
        mintcream: 16121850,
        mistyrose: 16770273,
        moccasin: 16770229,
        navajowhite: 16768685,
        navy: 128,
        oldlace: 16643558,
        olive: 8421376,
        olivedrab: 7048739,
        orange: 16753920,
        orangered: 16729344,
        orchid: 14315734,
        palegoldenrod: 15657130,
        palegreen: 10025880,
        paleturquoise: 11529966,
        palevioletred: 14381203,
        papayawhip: 16773077,
        peachpuff: 16767673,
        peru: 13468991,
        pink: 16761035,
        plum: 14524637,
        powderblue: 11591910,
        purple: 8388736,
        rebeccapurple: 6697881,
        red: 16711680,
        rosybrown: 12357519,
        royalblue: 4286945,
        saddlebrown: 9127187,
        salmon: 16416882,
        sandybrown: 16032864,
        seagreen: 3050327,
        seashell: 16774638,
        sienna: 10506797,
        silver: 12632256,
        skyblue: 8900331,
        slateblue: 6970061,
        slategray: 7372944,
        slategrey: 7372944,
        snow: 16775930,
        springgreen: 65407,
        steelblue: 4620980,
        tan: 13808780,
        teal: 32896,
        thistle: 14204888,
        tomato: 16737095,
        turquoise: 4251856,
        violet: 15631086,
        wheat: 16113331,
        white: 16777215,
        whitesmoke: 16119285,
        yellow: 16776960,
        yellowgreen: 10145074
    };
    Object.assign(Z.prototype, {
        isColor: !0,
        r: 1,
        g: 1,
        b: 1,
        set: function (t) {
            return t && t.isColor ? this.copy(t) : "number" == typeof t ? this.setHex(t) : "string" == typeof t && this.setStyle(t),
                this
        },
        setScalar: function (t) {
            return this.r = t,
                this.g = t,
                this.b = t,
                this
        },
        setHex: function (t) {
            return t = Math.floor(t),
                this.r = (t >> 16 & 255) / 255,
                this.g = (t >> 8 & 255) / 255,
                this.b = (255 & t) / 255,
                this
        },
        setRGB: function (t, e, i) {
            return this.r = t,
                this.g = e,
                this.b = i,
                this
        },
        setHSL: function () {
            function t(t, e, i) {
                return i < 0 && (i += 1),
                    i > 1 && (i -= 1),
                    i < 1 / 6 ? t + 6 * (e - t) * i : i < .5 ? e : i < 2 / 3 ? t + 6 * (e - t) * (2 / 3 - i) : t
            }
            return function (e, i, n) {
                if (e = sh.euclideanModulo(e, 1),
                    i = sh.clamp(i, 0, 1),
                    n = sh.clamp(n, 0, 1),
                    0 === i)
                    this.r = this.g = this.b = n;
                else {
                    var r = n <= .5 ? n * (1 + i) : n + i - n * i
                        , o = 2 * n - r;
                    this.r = t(o, r, e + 1 / 3),
                        this.g = t(o, r, e),
                        this.b = t(o, r, e - 1 / 3)
                }
                return this
            }
        }(),
        setStyle: function (t) {
            function e(e) {
                void 0 !== e && parseFloat(e) < 1 && console.warn("THREE.Color: Alpha component of " + t + " will be ignored.")
            }
            var i;
            if (i = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(t)) {
                var n, r = i[1], o = i[2];
                switch (r) {
                    case "rgb":
                    case "rgba":
                        if (n = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o))
                            return this.r = Math.min(255, parseInt(n[1], 10)) / 255,
                                this.g = Math.min(255, parseInt(n[2], 10)) / 255,
                                this.b = Math.min(255, parseInt(n[3], 10)) / 255,
                                e(n[5]),
                                this;
                        if (n = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o))
                            return this.r = Math.min(100, parseInt(n[1], 10)) / 100,
                                this.g = Math.min(100, parseInt(n[2], 10)) / 100,
                                this.b = Math.min(100, parseInt(n[3], 10)) / 100,
                                e(n[5]),
                                this;
                        break;
                    case "hsl":
                    case "hsla":
                        if (n = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o)) {
                            var a = parseFloat(n[1]) / 360
                                , s = parseInt(n[2], 10) / 100
                                , h = parseInt(n[3], 10) / 100;
                            return e(n[5]),
                                this.setHSL(a, s, h)
                        }
                }
            } else if (i = /^\#([A-Fa-f0-9]+)$/.exec(t)) {
                var l = i[1]
                    , c = l.length;
                if (3 === c)
                    return this.r = parseInt(l.charAt(0) + l.charAt(0), 16) / 255,
                        this.g = parseInt(l.charAt(1) + l.charAt(1), 16) / 255,
                        this.b = parseInt(l.charAt(2) + l.charAt(2), 16) / 255,
                        this;
                if (6 === c)
                    return this.r = parseInt(l.charAt(0) + l.charAt(1), 16) / 255,
                        this.g = parseInt(l.charAt(2) + l.charAt(3), 16) / 255,
                        this.b = parseInt(l.charAt(4) + l.charAt(5), 16) / 255,
                        this
            }
            if (t && t.length > 0) {
                var l = vh[t];
                void 0 !== l ? this.setHex(l) : console.warn("THREE.Color: Unknown color " + t)
            }
            return this
        },
        clone: function () {
            return new this.constructor(this.r, this.g, this.b)
        },
        copy: function (t) {
            return this.r = t.r,
                this.g = t.g,
                this.b = t.b,
                this
        },
        copyGammaToLinear: function (t, e) {
            return void 0 === e && (e = 2),
                this.r = Math.pow(t.r, e),
                this.g = Math.pow(t.g, e),
                this.b = Math.pow(t.b, e),
                this
        },
        copyLinearToGamma: function (t, e) {
            void 0 === e && (e = 2);
            var i = e > 0 ? 1 / e : 1;
            return this.r = Math.pow(t.r, i),
                this.g = Math.pow(t.g, i),
                this.b = Math.pow(t.b, i),
                this
        },
        convertGammaToLinear: function () {
            var t = this.r
                , e = this.g
                , i = this.b;
            return this.r = t * t,
                this.g = e * e,
                this.b = i * i,
                this
        },
        convertLinearToGamma: function () {
            return this.r = Math.sqrt(this.r),
                this.g = Math.sqrt(this.g),
                this.b = Math.sqrt(this.b),
                this
        },
        getHex: function () {
            return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0
        },
        getHexString: function () {
            return ("000000" + this.getHex().toString(16)).slice(-6)
        },
        getHSL: function (t) {
            var e, i, n = t || {
                h: 0,
                s: 0,
                l: 0
            }, r = this.r, o = this.g, a = this.b, s = Math.max(r, o, a), h = Math.min(r, o, a), l = (h + s) / 2;
            if (h === s)
                e = 0,
                    i = 0;
            else {
                var c = s - h;
                switch (i = l <= .5 ? c / (s + h) : c / (2 - s - h),
                s) {
                    case r:
                        e = (o - a) / c + (o < a ? 6 : 0);
                        break;
                    case o:
                        e = (a - r) / c + 2;
                        break;
                    case a:
                        e = (r - o) / c + 4
                }
                e /= 6
            }
            return n.h = e,
                n.s = i,
                n.l = l,
                n
        },
        getStyle: function () {
            return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")"
        },
        offsetHSL: function (t, e, i) {
            var n = this.getHSL();
            return n.h += t,
                n.s += e,
                n.l += i,
                this.setHSL(n.h, n.s, n.l),
                this
        },
        add: function (t) {
            return this.r += t.r,
                this.g += t.g,
                this.b += t.b,
                this
        },
        addColors: function (t, e) {
            return this.r = t.r + e.r,
                this.g = t.g + e.g,
                this.b = t.b + e.b,
                this
        },
        addScalar: function (t) {
            return this.r += t,
                this.g += t,
                this.b += t,
                this
        },
        sub: function (t) {
            return this.r = Math.max(0, this.r - t.r),
                this.g = Math.max(0, this.g - t.g),
                this.b = Math.max(0, this.b - t.b),
                this
        },
        multiply: function (t) {
            return this.r *= t.r,
                this.g *= t.g,
                this.b *= t.b,
                this
        },
        multiplyScalar: function (t) {
            return this.r *= t,
                this.g *= t,
                this.b *= t,
                this
        },
        lerp: function (t, e) {
            return this.r += (t.r - this.r) * e,
                this.g += (t.g - this.g) * e,
                this.b += (t.b - this.b) * e,
                this
        },
        equals: function (t) {
            return t.r === this.r && t.g === this.g && t.b === this.b
        },
        fromArray: function (t, e) {
            return void 0 === e && (e = 0),
                this.r = t[e],
                this.g = t[e + 1],
                this.b = t[e + 2],
                this
        },
        toArray: function (t, e) {
            return void 0 === t && (t = []),
                void 0 === e && (e = 0),
                t[e] = this.r,
                t[e + 1] = this.g,
                t[e + 2] = this.b,
                t
        },
        toJSON: function () {
            return this.getHex()
        }
    });
    var gh = {
        common: {
            diffuse: {
                value: new Z(15658734)
            },
            opacity: {
                value: 1
            },
            map: {
                value: null
            },
            uvTransform: {
                value: new h
            },
            alphaMap: {
                value: null
            }
        },
        specularmap: {
            specularMap: {
                value: null
            }
        },
        envmap: {
            envMap: {
                value: null
            },
            flipEnvMap: {
                value: -1
            },
            reflectivity: {
                value: 1
            },
            refractionRatio: {
                value: .98
            }
        },
        aomap: {
            aoMap: {
                value: null
            },
            aoMapIntensity: {
                value: 1
            }
        },
        lightmap: {
            lightMap: {
                value: null
            },
            lightMapIntensity: {
                value: 1
            }
        },
        emissivemap: {
            emissiveMap: {
                value: null
            }
        },
        bumpmap: {
            bumpMap: {
                value: null
            },
            bumpScale: {
                value: 1
            }
        },
        normalmap: {
            normalMap: {
                value: null
            },
            normalScale: {
                value: new r(1, 1)
            }
        },
        displacementmap: {
            displacementMap: {
                value: null
            },
            displacementScale: {
                value: 1
            },
            displacementBias: {
                value: 0
            }
        },
        roughnessmap: {
            roughnessMap: {
                value: null
            }
        },
        metalnessmap: {
            metalnessMap: {
                value: null
            }
        },
        gradientmap: {
            gradientMap: {
                value: null
            }
        },
        fog: {
            fogDensity: {
                value: 25e-5
            },
            fogNear: {
                value: 1
            },
            fogFar: {
                value: 2e3
            },
            fogColor: {
                value: new Z(16777215)
            }
        },
        lights: {
            ambientLightColor: {
                value: []
            },
            directionalLights: {
                value: [],
                properties: {
                    direction: {},
                    color: {},
                    shadow: {},
                    shadowBias: {},
                    shadowRadius: {},
                    shadowMapSize: {}
                }
            },
            directionalShadowMap: {
                value: []
            },
            directionalShadowMatrix: {
                value: []
            },
            spotLights: {
                value: [],
                properties: {
                    color: {},
                    position: {},
                    direction: {},
                    distance: {},
                    coneCos: {},
                    penumbraCos: {},
                    decay: {},
                    shadow: {},
                    shadowBias: {},
                    shadowRadius: {},
                    shadowMapSize: {}
                }
            },
            spotShadowMap: {
                value: []
            },
            spotShadowMatrix: {
                value: []
            },
            pointLights: {
                value: [],
                properties: {
                    color: {},
                    position: {},
                    decay: {},
                    distance: {},
                    shadow: {},
                    shadowBias: {},
                    shadowRadius: {},
                    shadowMapSize: {},
                    shadowCameraNear: {},
                    shadowCameraFar: {}
                }
            },
            pointShadowMap: {
                value: []
            },
            pointShadowMatrix: {
                value: []
            },
            hemisphereLights: {
                value: [],
                properties: {
                    direction: {},
                    skyColor: {},
                    groundColor: {}
                }
            },
            rectAreaLights: {
                value: [],
                properties: {
                    color: {},
                    position: {},
                    width: {},
                    height: {}
                }
            }
        },
        points: {
            diffuse: {
                value: new Z(15658734)
            },
            opacity: {
                value: 1
            },
            size: {
                value: 1
            },
            scale: {
                value: 1
            },
            map: {
                value: null
            },
            uvTransform: {
                value: new h
            }
        }
    }
        , _h = {
            merge: function (t) {
                for (var e = {}, i = 0; i < t.length; i++) {
                    var n = this.clone(t[i]);
                    for (var r in n)
                        e[r] = n[r]
                }
                return e
            },
            clone: function (t) {
                var e = {};
                for (var i in t) {
                    e[i] = {};
                    for (var n in t[i]) {
                        var r = t[i][n];
                        r && (r.isColor || r.isMatrix3 || r.isMatrix4 || r.isVector2 || r.isVector3 || r.isVector4 || r.isTexture) ? e[i][n] = r.clone() : Array.isArray(r) ? e[i][n] = r.slice() : e[i][n] = r
                    }
                }
                return e
            }
        }
        , yh = {
            alphamap_fragment: "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n",
            alphamap_pars_fragment: "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n",
            alphatest_fragment: "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n",
            aomap_fragment: "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n",
            aomap_pars_fragment: "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",
            begin_vertex: "\nvec3 transformed = vec3( position );\n",
            beginnormal_vertex: "\nvec3 objectNormal = vec3( normal );\n",
            bsdfs: "float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat theta = acos( dot( N, V ) );\n\tvec2 uv = vec2(\n\t\tsqrt( saturate( roughness ) ),\n\t\tsaturate( theta / ( 0.5 * PI ) ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\n\tfloat b = 3.45068 + (4.18814 + y) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\n\treturn result;\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n",
            bumpmap_pars_fragment: "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n",
            clipping_planes_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n",
            clipping_planes_pars_fragment: "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n",
            clipping_planes_pars_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n",
            clipping_planes_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n",
            color_fragment: "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",
            color_pars_fragment: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n",
            color_pars_vertex: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",
            color_vertex: "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",
            common: "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\n",
            cube_uv_reflection_fragment: "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n",
            defaultnormal_vertex: "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n",
            displacementmap_pars_vertex: "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n",
            displacementmap_vertex: "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n",
            emissivemap_fragment: "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n",
            emissivemap_pars_fragment: "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n",
            encodings_fragment: "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n",
            encodings_pars_fragment: "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n",
            envmap_fragment: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n",
            envmap_pars_fragment: "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n",
            envmap_pars_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n",
            envmap_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n",
            fog_vertex: "\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif",
            fog_pars_vertex: "#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n",
            fog_fragment: "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n",
            fog_pars_fragment: "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n",
            gradientmap_pars_fragment: "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n",
            lightmap_fragment: "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n",
            lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",
            lights_lambert_vertex: "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n",
            lights_pars: "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltcMat;\tuniform sampler2D ltcMag;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n",
            lights_phong_fragment: "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",
            lights_phong_pars_fragment: "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n",
            lights_physical_fragment: "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n",
            lights_physical_pars_fragment: "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tfloat norm = texture2D( ltcMag, uv ).a;\n\t\tvec4 t = texture2D( ltcMat, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3(   1,   0, t.y ),\n\t\t\tvec3(   0, t.z,   0 ),\n\t\t\tvec3( t.w,   0, t.x )\n\t\t);\n\t\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n",
            lights_template: "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n",
            logdepthbuf_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",
            logdepthbuf_pars_fragment: "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n",
            logdepthbuf_pars_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif",
            logdepthbuf_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif\n",
            map_fragment: "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n",
            map_pars_fragment: "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n",
            map_particle_fragment: "#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n",
            map_particle_pars_fragment: "#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif\n",
            metalnessmap_fragment: "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n",
            metalnessmap_pars_fragment: "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",
            morphnormal_vertex: "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n",
            morphtarget_pars_vertex: "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",
            morphtarget_vertex: "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n",
            normal_fragment: "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n",
            normalmap_pars_fragment: "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n",
            packing: "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",
            premultiplied_alpha_fragment: "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n",
            project_vertex: "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n",
            dithering_fragment: "#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n",
            dithering_pars_fragment: "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n",
            roughnessmap_fragment: "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n",
            roughnessmap_pars_fragment: "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",
            shadowmap_pars_fragment: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n",
            shadowmap_pars_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n",
            shadowmap_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n",
            shadowmask_pars_fragment: "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n",
            skinbase_vertex: "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",
            skinning_pars_vertex: "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n",
            skinning_vertex: "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n",
            skinnormal_vertex: "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n",
            specularmap_fragment: "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",
            specularmap_pars_fragment: "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",
            tonemapping_fragment: "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n",
            tonemapping_pars_fragment: "#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n",
            uv_pars_fragment: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif",
            uv_pars_vertex: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\n",
            uv_vertex: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",
            uv2_pars_fragment: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",
            uv2_pars_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",
            uv2_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",
            worldpos_vertex: "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n",
            cube_frag: "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n",
            cube_vert: "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n",
            depth_frag: "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n",
            depth_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n",
            distanceRGBA_frag: "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n",
            distanceRGBA_vert: "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n",
            equirect_frag: "uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n",
            equirect_vert: "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n",
            linedashed_frag: "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
            linedashed_vert: "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n",
            meshbasic_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
            meshbasic_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n",
            meshlambert_frag: "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
            meshlambert_vert: "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
            meshphong_frag: "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
            meshphong_vert: "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
            meshphysical_frag: "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
            meshphysical_vert: "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
            normal_frag: "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n",
            normal_vert: "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n",
            points_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
            points_vert: "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
            shadow_frag: "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}\n",
            shadow_vert: "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n"
        }
        , xh = {
            basic: {
                uniforms: _h.merge([gh.common, gh.specularmap, gh.envmap, gh.aomap, gh.lightmap, gh.fog]),
                vertexShader: yh.meshbasic_vert,
                fragmentShader: yh.meshbasic_frag
            },
            lambert: {
                uniforms: _h.merge([gh.common, gh.specularmap, gh.envmap, gh.aomap, gh.lightmap, gh.emissivemap, gh.fog, gh.lights, {
                    emissive: {
                        value: new Z(0)
                    }
                }]),
                vertexShader: yh.meshlambert_vert,
                fragmentShader: yh.meshlambert_frag
            },
            phong: {
                uniforms: _h.merge([gh.common, gh.specularmap, gh.envmap, gh.aomap, gh.lightmap, gh.emissivemap, gh.bumpmap, gh.normalmap, gh.displacementmap, gh.gradientmap, gh.fog, gh.lights, {
                    emissive: {
                        value: new Z(0)
                    },
                    specular: {
                        value: new Z(1118481)
                    },
                    shininess: {
                        value: 30
                    }
                }]),
                vertexShader: yh.meshphong_vert,
                fragmentShader: yh.meshphong_frag
            },
            standard: {
                uniforms: _h.merge([gh.common, gh.envmap, gh.aomap, gh.lightmap, gh.emissivemap, gh.bumpmap, gh.normalmap, gh.displacementmap, gh.roughnessmap, gh.metalnessmap, gh.fog, gh.lights, {
                    emissive: {
                        value: new Z(0)
                    },
                    roughness: {
                        value: .5
                    },
                    metalness: {
                        value: .5
                    },
                    envMapIntensity: {
                        value: 1
                    }
                }]),
                vertexShader: yh.meshphysical_vert,
                fragmentShader: yh.meshphysical_frag
            },
            points: {
                uniforms: _h.merge([gh.points, gh.fog]),
                vertexShader: yh.points_vert,
                fragmentShader: yh.points_frag
            },
            dashed: {
                uniforms: _h.merge([gh.common, gh.fog, {
                    scale: {
                        value: 1
                    },
                    dashSize: {
                        value: 1
                    },
                    totalSize: {
                        value: 2
                    }
                }]),
                vertexShader: yh.linedashed_vert,
                fragmentShader: yh.linedashed_frag
            },
            depth: {
                uniforms: _h.merge([gh.common, gh.displacementmap]),
                vertexShader: yh.depth_vert,
                fragmentShader: yh.depth_frag
            },
            normal: {
                uniforms: _h.merge([gh.common, gh.bumpmap, gh.normalmap, gh.displacementmap, {
                    opacity: {
                        value: 1
                    }
                }]),
                vertexShader: yh.normal_vert,
                fragmentShader: yh.normal_frag
            },
            cube: {
                uniforms: {
                    tCube: {
                        value: null
                    },
                    tFlip: {
                        value: -1
                    },
                    opacity: {
                        value: 1
                    }
                },
                vertexShader: yh.cube_vert,
                fragmentShader: yh.cube_frag
            },
            equirect: {
                uniforms: {
                    tEquirect: {
                        value: null
                    }
                },
                vertexShader: yh.equirect_vert,
                fragmentShader: yh.equirect_frag
            },
            distanceRGBA: {
                uniforms: _h.merge([gh.common, gh.displacementmap, {
                    referencePosition: {
                        value: new s
                    },
                    nearDistance: {
                        value: 1
                    },
                    farDistance: {
                        value: 1e3
                    }
                }]),
                vertexShader: yh.distanceRGBA_vert,
                fragmentShader: yh.distanceRGBA_frag
            },
            shadow: {
                uniforms: _h.merge([gh.lights, gh.fog, {
                    color: {
                        value: new Z(0)
                    },
                    opacity: {
                        value: 1
                    }
                }]),
                vertexShader: yh.shadow_vert,
                fragmentShader: yh.shadow_frag
            }
        };
    xh.physical = {
        uniforms: _h.merge([xh.standard.uniforms, {
            clearCoat: {
                value: 0
            },
            clearCoatRoughness: {
                value: 0
            }
        }]),
        vertexShader: yh.meshphysical_vert,
        fragmentShader: yh.meshphysical_frag
    },
        Object.assign(J.prototype, {
            set: function (t, e) {
                return this.min.copy(t),
                    this.max.copy(e),
                    this
            },
            setFromPoints: function (t) {
                this.makeEmpty();
                for (var e = 0, i = t.length; e < i; e++)
                    this.expandByPoint(t[e]);
                return this
            },
            setFromCenterAndSize: function () {
                var t = new r;
                return function (e, i) {
                    var n = t.copy(i).multiplyScalar(.5);
                    return this.min.copy(e).sub(n),
                        this.max.copy(e).add(n),
                        this
                }
            }(),
            clone: function () {
                return (new this.constructor).copy(this)
            },
            copy: function (t) {
                return this.min.copy(t.min),
                    this.max.copy(t.max),
                    this
            },
            makeEmpty: function () {
                return this.min.x = this.min.y = 1 / 0,
                    this.max.x = this.max.y = -1 / 0,
                    this
            },
            isEmpty: function () {
                return this.max.x < this.min.x || this.max.y < this.min.y
            },
            getCenter: function (t) {
                var e = t || new r;
                return this.isEmpty() ? e.set(0, 0) : e.addVectors(this.min, this.max).multiplyScalar(.5)
            },
            getSize: function (t) {
                var e = t || new r;
                return this.isEmpty() ? e.set(0, 0) : e.subVectors(this.max, this.min)
            },
            expandByPoint: function (t) {
                return this.min.min(t),
                    this.max.max(t),
                    this
            },
            expandByVector: function (t) {
                return this.min.sub(t),
                    this.max.add(t),
                    this
            },
            expandByScalar: function (t) {
                return this.min.addScalar(-t),
                    this.max.addScalar(t),
                    this
            },
            containsPoint: function (t) {
                return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y)
            },
            containsBox: function (t) {
                return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y
            },
            getParameter: function (t, e) {
                return (e || new r).set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y))
            },
            intersectsBox: function (t) {
                return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y)
            },
            clampPoint: function (t, e) {
                return (e || new r).copy(t).clamp(this.min, this.max)
            },
            distanceToPoint: function () {
                var t = new r;
                return function (e) {
                    return t.copy(e).clamp(this.min, this.max).sub(e).length()
                }
            }(),
            intersect: function (t) {
                return this.min.max(t.min),
                    this.max.min(t.max),
                    this
            },
            union: function (t) {
                return this.min.min(t.min),
                    this.max.max(t.max),
                    this
            },
            translate: function (t) {
                return this.min.add(t),
                    this.max.add(t),
                    this
            },
            equals: function (t) {
                return t.min.equals(this.min) && t.max.equals(this.max)
            }
        }),
        Q.prototype = Object.create(l.prototype),
        Q.prototype.constructor = Q;
    var bh = 0;
    tt.prototype = Object.assign(Object.create(n.prototype), {
        constructor: tt,
        isMaterial: !0,
        onBeforeCompile: function () { },
        setValues: function (t) {
            if (void 0 !== t)
                for (var e in t) {
                    var i = t[e];
                    if (void 0 !== i)
                        if ("shading" !== e) {
                            var n = this[e];
                            void 0 !== n ? n && n.isColor ? n.set(i) : n && n.isVector3 && i && i.isVector3 ? n.copy(i) : this[e] = "overdraw" === e ? Number(i) : i : console.warn("THREE." + this.type + ": '" + e + "' is not a property of this material.")
                        } else
                            console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."),
                                this.flatShading = i === ra;
                    else
                        console.warn("THREE.Material: '" + e + "' parameter is undefined.")
                }
        },
        toJSON: function (t) {
            function e(t) {
                var e = [];
                for (var i in t) {
                    var n = t[i];
                    delete n.metadata,
                        e.push(n)
                }
                return e
            }
            var i = void 0 === t || "string" == typeof t;
            i && (t = {
                textures: {},
                images: {}
            });
            var n = {
                metadata: {
                    version: 4.5,
                    type: "Material",
                    generator: "Material.toJSON"
                }
            };
            if (n.uuid = this.uuid,
                n.type = this.type,
                "" !== this.name && (n.name = this.name),
                this.color && this.color.isColor && (n.color = this.color.getHex()),
                void 0 !== this.roughness && (n.roughness = this.roughness),
                void 0 !== this.metalness && (n.metalness = this.metalness),
                this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()),
                1 !== this.emissiveIntensity && (n.emissiveIntensity = this.emissiveIntensity),
                this.specular && this.specular.isColor && (n.specular = this.specular.getHex()),
                void 0 !== this.shininess && (n.shininess = this.shininess),
                void 0 !== this.clearCoat && (n.clearCoat = this.clearCoat),
                void 0 !== this.clearCoatRoughness && (n.clearCoatRoughness = this.clearCoatRoughness),
                this.map && this.map.isTexture && (n.map = this.map.toJSON(t).uuid),
                this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(t).uuid),
                this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(t).uuid),
                this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(t).uuid,
                    n.bumpScale = this.bumpScale),
                this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(t).uuid,
                    n.normalScale = this.normalScale.toArray()),
                this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(t).uuid,
                    n.displacementScale = this.displacementScale,
                    n.displacementBias = this.displacementBias),
                this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(t).uuid),
                this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(t).uuid),
                this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(t).uuid),
                this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(t).uuid),
                this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(t).uuid,
                    n.reflectivity = this.reflectivity),
                this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(t).uuid),
                void 0 !== this.size && (n.size = this.size),
                void 0 !== this.sizeAttenuation && (n.sizeAttenuation = this.sizeAttenuation),
                this.blending !== ca && (n.blending = this.blending),
                !0 === this.flatShading && (n.flatShading = this.flatShading),
                this.side !== ea && (n.side = this.side),
                this.vertexColors !== aa && (n.vertexColors = this.vertexColors),
                this.opacity < 1 && (n.opacity = this.opacity),
                !0 === this.transparent && (n.transparent = this.transparent),
                n.depthFunc = this.depthFunc,
                n.depthTest = this.depthTest,
                n.depthWrite = this.depthWrite,
                0 !== this.rotation && (n.rotation = this.rotation),
                1 !== this.linewidth && (n.linewidth = this.linewidth),
                void 0 !== this.dashSize && (n.dashSize = this.dashSize),
                void 0 !== this.gapSize && (n.gapSize = this.gapSize),
                void 0 !== this.scale && (n.scale = this.scale),
                !0 === this.dithering && (n.dithering = !0),
                this.alphaTest > 0 && (n.alphaTest = this.alphaTest),
                !0 === this.premultipliedAlpha && (n.premultipliedAlpha = this.premultipliedAlpha),
                !0 === this.wireframe && (n.wireframe = this.wireframe),
                this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth),
                "round" !== this.wireframeLinecap && (n.wireframeLinecap = this.wireframeLinecap),
                "round" !== this.wireframeLinejoin && (n.wireframeLinejoin = this.wireframeLinejoin),
                !0 === this.morphTargets && (n.morphTargets = !0),
                !0 === this.skinning && (n.skinning = !0),
                !1 === this.visible && (n.visible = !1),
                "{}" !== JSON.stringify(this.userData) && (n.userData = this.userData),
                i) {
                var r = e(t.textures)
                    , o = e(t.images);
                r.length > 0 && (n.textures = r),
                    o.length > 0 && (n.images = o)
            }
            return n
        },
        clone: function () {
            return (new this.constructor).copy(this)
        },
        copy: function (t) {
            this.name = t.name,
                this.fog = t.fog,
                this.lights = t.lights,
                this.blending = t.blending,
                this.side = t.side,
                this.flatShading = t.flatShading,
                this.vertexColors = t.vertexColors,
                this.opacity = t.opacity,
                this.transparent = t.transparent,
                this.blendSrc = t.blendSrc,
                this.blendDst = t.blendDst,
                this.blendEquation = t.blendEquation,
                this.blendSrcAlpha = t.blendSrcAlpha,
                this.blendDstAlpha = t.blendDstAlpha,
                this.blendEquationAlpha = t.blendEquationAlpha,
                this.depthFunc = t.depthFunc,
                this.depthTest = t.depthTest,
                this.depthWrite = t.depthWrite,
                this.colorWrite = t.colorWrite,
                this.precision = t.precision,
                this.polygonOffset = t.polygonOffset,
                this.polygonOffsetFactor = t.polygonOffsetFactor,
                this.polygonOffsetUnits = t.polygonOffsetUnits,
                this.dithering = t.dithering,
                this.alphaTest = t.alphaTest,
                this.premultipliedAlpha = t.premultipliedAlpha,
                this.overdraw = t.overdraw,
                this.visible = t.visible,
                this.userData = JSON.parse(JSON.stringify(t.userData)),
                this.clipShadows = t.clipShadows,
                this.clipIntersection = t.clipIntersection;
            var e = t.clippingPlanes
                , i = null;
            if (null !== e) {
                var n = e.length;
                i = new Array(n);
                for (var r = 0; r !== n; ++r)
                    i[r] = e[r].clone()
            }
            return this.clippingPlanes = i,
                this
        },
        dispose: function () {
            this.dispatchEvent({
                type: "dispose"
            })
        }
    }),
        et.prototype = Object.create(tt.prototype),
        et.prototype.constructor = et,
        et.prototype.isMeshDepthMaterial = !0,
        et.prototype.copy = function (t) {
            return tt.prototype.copy.call(this, t),
                this.depthPacking = t.depthPacking,
                this.skinning = t.skinning,
                this.morphTargets = t.morphTargets,
                this.map = t.map,
                this.alphaMap = t.alphaMap,
                this.displacementMap = t.displacementMap,
                this.displacementScale = t.displacementScale,
                this.displacementBias = t.displacementBias,
                this.wireframe = t.wireframe,
                this.wireframeLinewidth = t.wireframeLinewidth,
                this
        }
        ,
        it.prototype = Object.create(tt.prototype),
        it.prototype.constructor = it,
        it.prototype.isMeshDistanceMaterial = !0,
        it.prototype.copy = function (t) {
            return tt.prototype.copy.call(this, t),
                this.referencePosition.copy(t.referencePosition),
                this.nearDistance = t.nearDistance,
                this.farDistance = t.farDistance,
                this.skinning = t.skinning,
                this.morphTargets = t.morphTargets,
                this.map = t.map,
                this.alphaMap = t.alphaMap,
                this.displacementMap = t.displacementMap,
                this.displacementScale = t.displacementScale,
                this.displacementBias = t.displacementBias,
                this
        }
        ,
        Object.assign(nt.prototype, {
            isBox3: !0,
            set: function (t, e) {
                return this.min.copy(t),
                    this.max.copy(e),
                    this
            },
            setFromArray: function (t) {
                for (var e = 1 / 0, i = 1 / 0, n = 1 / 0, r = -1 / 0, o = -1 / 0, a = -1 / 0, s = 0, h = t.length; s < h; s += 3) {
                    var l = t[s]
                        , c = t[s + 1]
                        , u = t[s + 2];
                    l < e && (e = l),
                        c < i && (i = c),
                        u < n && (n = u),
                        l > r && (r = l),
                        c > o && (o = c),
                        u > a && (a = u)
                }
                return this.min.set(e, i, n),
                    this.max.set(r, o, a),
                    this
            },
            setFromBufferAttribute: function (t) {
                for (var e = 1 / 0, i = 1 / 0, n = 1 / 0, r = -1 / 0, o = -1 / 0, a = -1 / 0, s = 0, h = t.count; s < h; s++) {
                    var l = t.getX(s)
                        , c = t.getY(s)
                        , u = t.getZ(s);
                    l < e && (e = l),
                        c < i && (i = c),
                        u < n && (n = u),
                        l > r && (r = l),
                        c > o && (o = c),
                        u > a && (a = u)
                }
                return this.min.set(e, i, n),
                    this.max.set(r, o, a),
                    this
            },
            setFromPoints: function (t) {
                this.makeEmpty();
                for (var e = 0, i = t.length; e < i; e++)
                    this.expandByPoint(t[e]);
                return this
            },
            setFromCenterAndSize: function () {
                var t = new s;
                return function (e, i) {
                    var n = t.copy(i).multiplyScalar(.5);
                    return this.min.copy(e).sub(n),
                        this.max.copy(e).add(n),
                        this
                }
            }(),
            setFromObject: function (t) {
                return this.makeEmpty(),
                    this.expandByObject(t)
            },
            clone: function () {
                return (new this.constructor).copy(this)
            },
            copy: function (t) {
                return this.min.copy(t.min),
                    this.max.copy(t.max),
                    this
            },
            makeEmpty: function () {
                return this.min.x = this.min.y = this.min.z = 1 / 0,
                    this.max.x = this.max.y = this.max.z = -1 / 0,
                    this
            },
            isEmpty: function () {
                return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z
            },
            getCenter: function (t) {
                var e = t || new s;
                return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(.5)
            },
            getSize: function (t) {
                var e = t || new s;
                return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min)
            },
            expandByPoint: function (t) {
                return this.min.min(t),
                    this.max.max(t),
                    this
            },
            expandByVector: function (t) {
                return this.min.sub(t),
                    this.max.add(t),
                    this
            },
            expandByScalar: function (t) {
                return this.min.addScalar(-t),
                    this.max.addScalar(t),
                    this
            },
            expandByObject: function () {
                function t(t) {
                    var o = t.geometry;
                    if (void 0 !== o)
                        if (o.isGeometry) {
                            var a = o.vertices;
                            for (i = 0,
                                n = a.length; i < n; i++)
                                r.copy(a[i]),
                                    r.applyMatrix4(t.matrixWorld),
                                    e.expandByPoint(r)
                        } else if (o.isBufferGeometry) {
                            var s = o.attributes.position;
                            if (void 0 !== s)
                                for (i = 0,
                                    n = s.count; i < n; i++)
                                    r.fromBufferAttribute(s, i).applyMatrix4(t.matrixWorld),
                                        e.expandByPoint(r)
                        }
                }
                var e, i, n, r = new s;
                return function (i) {
                    return e = this,
                        i.updateMatrixWorld(!0),
                        i.traverse(t),
                        this
                }
            }(),
            containsPoint: function (t) {
                return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y || t.z < this.min.z || t.z > this.max.z)
            },
            containsBox: function (t) {
                return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y && this.min.z <= t.min.z && t.max.z <= this.max.z
            },
            getParameter: function (t, e) {
                return (e || new s).set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y), (t.z - this.min.z) / (this.max.z - this.min.z))
            },
            intersectsBox: function (t) {
                return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y || t.max.z < this.min.z || t.min.z > this.max.z)
            },
            intersectsSphere: function () {
                var t = new s;
                return function (e) {
                    return this.clampPoint(e.center, t),
                        t.distanceToSquared(e.center) <= e.radius * e.radius
                }
            }(),
            intersectsPlane: function (t) {
                var e, i;
                return t.normal.x > 0 ? (e = t.normal.x * this.min.x,
                    i = t.normal.x * this.max.x) : (e = t.normal.x * this.max.x,
                        i = t.normal.x * this.min.x),
                    t.normal.y > 0 ? (e += t.normal.y * this.min.y,
                        i += t.normal.y * this.max.y) : (e += t.normal.y * this.max.y,
                            i += t.normal.y * this.min.y),
                    t.normal.z > 0 ? (e += t.normal.z * this.min.z,
                        i += t.normal.z * this.max.z) : (e += t.normal.z * this.max.z,
                            i += t.normal.z * this.min.z),
                    e <= t.constant && i >= t.constant
            },
            clampPoint: function (t, e) {
                return (e || new s).copy(t).clamp(this.min, this.max)
            },
            distanceToPoint: function () {
                var t = new s;
                return function (e) {
                    return t.copy(e).clamp(this.min, this.max).sub(e).length()
                }
            }(),
            getBoundingSphere: function () {
                var t = new s;
                return function (e) {
                    var i = e || new rt;
                    return this.getCenter(i.center),
                        i.radius = .5 * this.getSize(t).length(),
                        i
                }
            }(),
            intersect: function (t) {
                return this.min.max(t.min),
                    this.max.min(t.max),
                    this.isEmpty() && this.makeEmpty(),
                    this
            },
            union: function (t) {
                return this.min.min(t.min),
                    this.max.max(t.max),
                    this
            },
            applyMatrix4: function () {
                var t = [new s, new s, new s, new s, new s, new s, new s, new s];
                return function (e) {
                    return this.isEmpty() ? this : (t[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e),
                        t[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e),
                        t[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e),
                        t[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e),
                        t[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e),
                        t[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e),
                        t[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e),
                        t[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e),
                        this.setFromPoints(t),
                        this)
                }
            }(),
            translate: function (t) {
                return this.min.add(t),
                    this.max.add(t),
                    this
            },
            equals: function (t) {
                return t.min.equals(this.min) && t.max.equals(this.max)
            }
        }),
        Object.assign(rt.prototype, {
            set: function (t, e) {
                return this.center.copy(t),
                    this.radius = e,
                    this
            },
            setFromPoints: function () {
                var t = new nt;
                return function (e, i) {
                    var n = this.center;
                    void 0 !== i ? n.copy(i) : t.setFromPoints(e).getCenter(n);
                    for (var r = 0, o = 0, a = e.length; o < a; o++)
                        r = Math.max(r, n.distanceToSquared(e[o]));
                    return this.radius = Math.sqrt(r),
                        this
                }
            }(),
            clone: function () {
                return (new this.constructor).copy(this)
            },
            copy: function (t) {
                return this.center.copy(t.center),
                    this.radius = t.radius,
                    this
            },
            empty: function () {
                return this.radius <= 0
            },
            containsPoint: function (t) {
                return t.distanceToSquared(this.center) <= this.radius * this.radius
            },
            distanceToPoint: function (t) {
                return t.distanceTo(this.center) - this.radius
            },
            intersectsSphere: function (t) {
                var e = this.radius + t.radius;
                return t.center.distanceToSquared(this.center) <= e * e
            },
            intersectsBox: function (t) {
                return t.intersectsSphere(this)
            },
            intersectsPlane: function (t) {
                return Math.abs(t.distanceToPoint(this.center)) <= this.radius
            },
            clampPoint: function (t, e) {
                var i = this.center.distanceToSquared(t)
                    , n = e || new s;
                return n.copy(t),
                    i > this.radius * this.radius && (n.sub(this.center).normalize(),
                        n.multiplyScalar(this.radius).add(this.center)),
                    n
            },
            getBoundingBox: function (t) {
                var e = t || new nt;
                return e.set(this.center, this.center),
                    e.expandByScalar(this.radius),
                    e
            },
            applyMatrix4: function (t) {
                return this.center.applyMatrix4(t),
                    this.radius = this.radius * t.getMaxScaleOnAxis(),
                    this
            },
            translate: function (t) {
                return this.center.add(t),
                    this
            },
            equals: function (t) {
                return t.center.equals(this.center) && t.radius === this.radius
            }
        }),
        Object.assign(ot.prototype, {
            set: function (t, e) {
                return this.normal.copy(t),
                    this.constant = e,
                    this
            },
            setComponents: function (t, e, i, n) {
                return this.normal.set(t, e, i),
                    this.constant = n,
                    this
            },
            setFromNormalAndCoplanarPoint: function (t, e) {
                return this.normal.copy(t),
                    this.constant = -e.dot(this.normal),
                    this
            },
            setFromCoplanarPoints: function () {
                var t = new s
                    , e = new s;
                return function (i, n, r) {
                    var o = t.subVectors(r, n).cross(e.subVectors(i, n)).normalize();
                    return this.setFromNormalAndCoplanarPoint(o, i),
                        this
                }
            }(),
            clone: function () {
                return (new this.constructor).copy(this)
            },
            copy: function (t) {
                return this.normal.copy(t.normal),
                    this.constant = t.constant,
                    this
            },
            normalize: function () {
                var t = 1 / this.normal.length();
                return this.normal.multiplyScalar(t),
                    this.constant *= t,
                    this
            },
            negate: function () {
                return this.constant *= -1,
                    this.normal.negate(),
                    this
            },
            distanceToPoint: function (t) {
                return this.normal.dot(t) + this.constant
            },
            distanceToSphere: function (t) {
                return this.distanceToPoint(t.center) - t.radius
            },
            projectPoint: function (t, e) {
                return (e || new s).copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)
            },
            intersectLine: function () {
                var t = new s;
                return function (e, i) {
                    var n = i || new s
                        , r = e.delta(t)
                        , o = this.normal.dot(r);
                    if (0 !== o) {
                        var a = -(e.start.dot(this.normal) + this.constant) / o;
                        if (!(a < 0 || a > 1))
                            return n.copy(r).multiplyScalar(a).add(e.start)
                    } else if (0 === this.distanceToPoint(e.start))
                        return n.copy(e.start)
                }
            }(),
            intersectsLine: function (t) {
                var e = this.distanceToPoint(t.start)
                    , i = this.distanceToPoint(t.end);
                return e < 0 && i > 0 || i < 0 && e > 0
            },
            intersectsBox: function (t) {
                return t.intersectsPlane(this)
            },
            intersectsSphere: function (t) {
                return t.intersectsPlane(this)
            },
            coplanarPoint: function (t) {
                return (t || new s).copy(this.normal).multiplyScalar(-this.constant)
            },
            applyMatrix4: function () {
                var t = new s
                    , e = new h;
                return function (i, n) {
                    var r = n || e.getNormalMatrix(i)
                        , o = this.coplanarPoint(t).applyMatrix4(i)
                        , a = this.normal.applyMatrix3(r).normalize();
                    return this.constant = -o.dot(a),
                        this
                }
            }(),
            translate: function (t) {
                return this.constant -= t.dot(this.normal),
                    this
            },
            equals: function (t) {
                return t.normal.equals(this.normal) && t.constant === this.constant
            }
        }),
        Object.assign(at.prototype, {
            set: function (t, e, i, n, r, o) {
                var a = this.planes;
                return a[0].copy(t),
                    a[1].copy(e),
                    a[2].copy(i),
                    a[3].copy(n),
                    a[4].copy(r),
                    a[5].copy(o),
                    this
            },
            clone: function () {
                return (new this.constructor).copy(this)
            },
            copy: function (t) {
                for (var e = this.planes, i = 0; i < 6; i++)
                    e[i].copy(t.planes[i]);
                return this
            },
            setFromMatrix: function (t) {
                var e = this.planes
                    , i = t.elements
                    , n = i[0]
                    , r = i[1]
                    , o = i[2]
                    , a = i[3]
                    , s = i[4]
                    , h = i[5]
                    , l = i[6]
                    , c = i[7]
                    , u = i[8]
                    , d = i[9]
                    , p = i[10]
                    , f = i[11]
                    , m = i[12]
                    , v = i[13]
                    , g = i[14]
                    , _ = i[15];
                return e[0].setComponents(a - n, c - s, f - u, _ - m).normalize(),
                    e[1].setComponents(a + n, c + s, f + u, _ + m).normalize(),
                    e[2].setComponents(a + r, c + h, f + d, _ + v).normalize(),
                    e[3].setComponents(a - r, c - h, f - d, _ - v).normalize(),
                    e[4].setComponents(a - o, c - l, f - p, _ - g).normalize(),
                    e[5].setComponents(a + o, c + l, f + p, _ + g).normalize(),
                    this
            },
            intersectsObject: function () {
                var t = new rt;
                return function (e) {
                    var i = e.geometry;
                    return null === i.boundingSphere && i.computeBoundingSphere(),
                        t.copy(i.boundingSphere).applyMatrix4(e.matrixWorld),
                        this.intersectsSphere(t)
                }
            }(),
            intersectsSprite: function () {
                var t = new rt;
                return function (e) {
                    return t.center.set(0, 0, 0),
                        t.radius = .7071067811865476,
                        t.applyMatrix4(e.matrixWorld),
                        this.intersectsSphere(t)
                }
            }(),
            intersectsSphere: function (t) {
                for (var e = this.planes, i = t.center, n = -t.radius, r = 0; r < 6; r++) {
                    if (e[r].distanceToPoint(i) < n)
                        return !1
                }
                return !0
            },
            intersectsBox: function () {
                var t = new s
                    , e = new s;
                return function (i) {
                    for (var n = this.planes, r = 0; r < 6; r++) {
                        var o = n[r];
                        t.x = o.normal.x > 0 ? i.min.x : i.max.x,
                            e.x = o.normal.x > 0 ? i.max.x : i.min.x,
                            t.y = o.normal.y > 0 ? i.min.y : i.max.y,
                            e.y = o.normal.y > 0 ? i.max.y : i.min.y,
                            t.z = o.normal.z > 0 ? i.min.z : i.max.z,
                            e.z = o.normal.z > 0 ? i.max.z : i.min.z;
                        var a = o.distanceToPoint(t)
                            , s = o.distanceToPoint(e);
                        if (a < 0 && s < 0)
                            return !1
                    }
                    return !0
                }
            }(),
            containsPoint: function (t) {
                for (var e = this.planes, i = 0; i < 6; i++)
                    if (e[i].distanceToPoint(t) < 0)
                        return !1;
                return !0
            }
        }),
        lt.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"],
        lt.DefaultOrder = "XYZ",
        Object.defineProperties(lt.prototype, {
            x: {
                get: function () {
                    return this._x
                },
                set: function (t) {
                    this._x = t,
                        this.onChangeCallback()
                }
            },
            y: {
                get: function () {
                    return this._y
                },
                set: function (t) {
                    this._y = t,
                        this.onChangeCallback()
                }
            },
            z: {
                get: function () {
                    return this._z
                },
                set: function (t) {
                    this._z = t,
                        this.onChangeCallback()
                }
            },
            order: {
                get: function () {
                    return this._order
                },
                set: function (t) {
                    this._order = t,
                        this.onChangeCallback()
                }
            }
        }),
        Object.assign(lt.prototype, {
            isEuler: !0,
            set: function (t, e, i, n) {
                return this._x = t,
                    this._y = e,
                    this._z = i,
                    this._order = n || this._order,
                    this.onChangeCallback(),
                    this
            },
            clone: function () {
                return new this.constructor(this._x, this._y, this._z, this._order)
            },
            copy: function (t) {
                return this._x = t._x,
                    this._y = t._y,
                    this._z = t._z,
                    this._order = t._order,
                    this.onChangeCallback(),
                    this
            },
            setFromRotationMatrix: function (t, e, i) {
                var n = sh.clamp
                    , r = t.elements
                    , o = r[0]
                    , a = r[4]
                    , s = r[8]
                    , h = r[1]
                    , l = r[5]
                    , c = r[9]
                    , u = r[2]
                    , d = r[6]
                    , p = r[10];
                return e = e || this._order,
                    "XYZ" === e ? (this._y = Math.asin(n(s, -1, 1)),
                        Math.abs(s) < .99999 ? (this._x = Math.atan2(-c, p),
                            this._z = Math.atan2(-a, o)) : (this._x = Math.atan2(d, l),
                                this._z = 0)) : "YXZ" === e ? (this._x = Math.asin(-n(c, -1, 1)),
                                    Math.abs(c) < .99999 ? (this._y = Math.atan2(s, p),
                                        this._z = Math.atan2(h, l)) : (this._y = Math.atan2(-u, o),
                                            this._z = 0)) : "ZXY" === e ? (this._x = Math.asin(n(d, -1, 1)),
                                                Math.abs(d) < .99999 ? (this._y = Math.atan2(-u, p),
                                                    this._z = Math.atan2(-a, l)) : (this._y = 0,
                                                        this._z = Math.atan2(h, o))) : "ZYX" === e ? (this._y = Math.asin(-n(u, -1, 1)),
                                                            Math.abs(u) < .99999 ? (this._x = Math.atan2(d, p),
                                                                this._z = Math.atan2(h, o)) : (this._x = 0,
                                                                    this._z = Math.atan2(-a, l))) : "YZX" === e ? (this._z = Math.asin(n(h, -1, 1)),
                                                                        Math.abs(h) < .99999 ? (this._x = Math.atan2(-c, l),
                                                                            this._y = Math.atan2(-u, o)) : (this._x = 0,
                                                                                this._y = Math.atan2(s, p))) : "XZY" === e ? (this._z = Math.asin(-n(a, -1, 1)),
                                                                                    Math.abs(a) < .99999 ? (this._x = Math.atan2(d, l),
                                                                                        this._y = Math.atan2(s, o)) : (this._x = Math.atan2(-c, p),
                                                                                            this._y = 0)) : console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + e),
                    this._order = e,
                    !1 !== i && this.onChangeCallback(),
                    this
            },
            setFromQuaternion: function () {
                var t = new o;
                return function (e, i, n) {
                    return t.makeRotationFromQuaternion(e),
                        this.setFromRotationMatrix(t, i, n)
                }
            }(),
            setFromVector3: function (t, e) {
                return this.set(t.x, t.y, t.z, e || this._order)
            },
            reorder: function () {
                var t = new a;
                return function (e) {
                    return t.setFromEuler(this),
                        this.setFromQuaternion(t, e)
                }
            }(),
            equals: function (t) {
                return t._x === this._x && t._y === this._y && t._z === this._z && t._order === this._order
            },
            fromArray: function (t) {
                return this._x = t[0],
                    this._y = t[1],
                    this._z = t[2],
                    void 0 !== t[3] && (this._order = t[3]),
                    this.onChangeCallback(),
                    this
            },
            toArray: function (t, e) {
                return void 0 === t && (t = []),
                    void 0 === e && (e = 0),
                    t[e] = this._x,
                    t[e + 1] = this._y,
                    t[e + 2] = this._z,
                    t[e + 3] = this._order,
                    t
            },
            toVector3: function (t) {
                return t ? t.set(this._x, this._y, this._z) : new s(this._x, this._y, this._z)
            },
            onChange: function (t) {
                return this.onChangeCallback = t,
                    this
            },
            onChangeCallback: function () { }
        }),
        Object.assign(ct.prototype, {
            set: function (t) {
                this.mask = 1 << t | 0
            },
            enable: function (t) {
                this.mask |= 1 << t | 0
            },
            toggle: function (t) {
                this.mask ^= 1 << t | 0
            },
            disable: function (t) {
                this.mask &= ~(1 << t | 0)
            },
            test: function (t) {
                return 0 != (this.mask & t.mask)
            }
        });
    var wh = 0;
    ut.DefaultUp = new s(0, 1, 0),
        ut.DefaultMatrixAutoUpdate = !0,
        ut.prototype = Object.assign(Object.create(n.prototype), {
            constructor: ut,
            isObject3D: !0,
            onBeforeRender: function () { },
            onAfterRender: function () { },
            applyMatrix: function (t) {
                this.matrix.multiplyMatrices(t, this.matrix),
                    this.matrix.decompose(this.position, this.quaternion, this.scale)
            },
            applyQuaternion: function (t) {
                return this.quaternion.premultiply(t),
                    this
            },
            setRotationFromAxisAngle: function (t, e) {
                this.quaternion.setFromAxisAngle(t, e)
            },
            setRotationFromEuler: function (t) {
                this.quaternion.setFromEuler(t, !0)
            },
            setRotationFromMatrix: function (t) {
                this.quaternion.setFromRotationMatrix(t)
            },
            setRotationFromQuaternion: function (t) {
                this.quaternion.copy(t)
            },
            rotateOnAxis: function () {
                var t = new a;
                return function (e, i) {
                    return t.setFromAxisAngle(e, i),
                        this.quaternion.multiply(t),
                        this
                }
            }(),
            rotateOnWorldAxis: function () {
                var t = new a;
                return function (e, i) {
                    return t.setFromAxisAngle(e, i),
                        this.quaternion.premultiply(t),
                        this
                }
            }(),
            rotateX: function () {
                var t = new s(1, 0, 0);
                return function (e) {
                    return this.rotateOnAxis(t, e)
                }
            }(),
            rotateY: function () {
                var t = new s(0, 1, 0);
                return function (e) {
                    return this.rotateOnAxis(t, e)
                }
            }(),
            rotateZ: function () {
                var t = new s(0, 0, 1);
                return function (e) {
                    return this.rotateOnAxis(t, e)
                }
            }(),
            translateOnAxis: function () {
                var t = new s;
                return function (e, i) {
                    return t.copy(e).applyQuaternion(this.quaternion),
                        this.position.add(t.multiplyScalar(i)),
                        this
                }
            }(),
            translateX: function () {
                var t = new s(1, 0, 0);
                return function (e) {
                    return this.translateOnAxis(t, e)
                }
            }(),
            translateY: function () {
                var t = new s(0, 1, 0);
                return function (e) {
                    return this.translateOnAxis(t, e)
                }
            }(),
            translateZ: function () {
                var t = new s(0, 0, 1);
                return function (e) {
                    return this.translateOnAxis(t, e)
                }
            }(),
            localToWorld: function (t) {
                return t.applyMatrix4(this.matrixWorld)
            },
            worldToLocal: function () {
                var t = new o;
                return function (e) {
                    return e.applyMatrix4(t.getInverse(this.matrixWorld))
                }
            }(),
            lookAt: function () {
                var t = new o
                    , e = new s;
                return function (i, n, r) {
                    i.isVector3 ? e.copy(i) : e.set(i, n, r),
                        this.isCamera ? t.lookAt(this.position, e, this.up) : t.lookAt(e, this.position, this.up),
                        this.quaternion.setFromRotationMatrix(t)
                }
            }(),
            add: function (t) {
                if (arguments.length > 1) {
                    for (var e = 0; e < arguments.length; e++)
                        this.add(arguments[e]);
                    return this
                }
                return t === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", t),
                    this) : (t && t.isObject3D ? (null !== t.parent && t.parent.remove(t),
                        t.parent = this,
                        t.dispatchEvent({
                            type: "added"
                        }),
                        this.children.push(t)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", t),
                        this)
            },
            remove: function (t) {
                if (arguments.length > 1) {
                    for (var e = 0; e < arguments.length; e++)
                        this.remove(arguments[e]);
                    return this
                }
                var i = this.children.indexOf(t);
                return -1 !== i && (t.parent = null,
                    t.dispatchEvent({
                        type: "removed"
                    }),
                    this.children.splice(i, 1)),
                    this
            },
            getObjectById: function (t) {
                return this.getObjectByProperty("id", t)
            },
            getObjectByName: function (t) {
                return this.getObjectByProperty("name", t)
            },
            getObjectByProperty: function (t, e) {
                if (this[t] === e)
                    return this;
                for (var i = 0, n = this.children.length; i < n; i++) {
                    var r = this.children[i]
                        , o = r.getObjectByProperty(t, e);
                    if (void 0 !== o)
                        return o
                }
            },
            getWorldPosition: function (t) {
                var e = t || new s;
                return this.updateMatrixWorld(!0),
                    e.setFromMatrixPosition(this.matrixWorld)
            },
            getWorldQuaternion: function () {
                var t = new s
                    , e = new s;
                return function (i) {
                    var n = i || new a;
                    return this.updateMatrixWorld(!0),
                        this.matrixWorld.decompose(t, n, e),
                        n
                }
            }(),
            getWorldRotation: function () {
                var t = new a;
                return function (e) {
                    var i = e || new lt;
                    return this.getWorldQuaternion(t),
                        i.setFromQuaternion(t, this.rotation.order, !1)
                }
            }(),
            getWorldScale: function () {
                var t = new s
                    , e = new a;
                return function (i) {
                    var n = i || new s;
                    return this.updateMatrixWorld(!0),
                        this.matrixWorld.decompose(t, e, n),
                        n
                }
            }(),
            getWorldDirection: function () {
                var t = new a;
                return function (e) {
                    var i = e || new s;
                    return this.getWorldQuaternion(t),
                        i.set(0, 0, 1).applyQuaternion(t)
                }
            }(),
            raycast: function () { },
            traverse: function (t) {
                t(this);
                for (var e = this.children, i = 0, n = e.length; i < n; i++)
                    e[i].traverse(t)
            },
            traverseVisible: function (t) {
                if (!1 !== this.visible) {
                    t(this);
                    for (var e = this.children, i = 0, n = e.length; i < n; i++)
                        e[i].traverseVisible(t)
                }
            },
            traverseAncestors: function (t) {
                var e = this.parent;
                null !== e && (t(e),
                    e.traverseAncestors(t))
            },
            updateMatrix: function () {
                this.matrix.compose(this.position, this.quaternion, this.scale),
                    this.matrixWorldNeedsUpdate = !0
            },
            updateMatrixWorld: function (t) {
                this.matrixAutoUpdate && this.updateMatrix(),
                    (this.matrixWorldNeedsUpdate || t) && (null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix),
                        this.matrixWorldNeedsUpdate = !1,
                        t = !0);
                for (var e = this.children, i = 0, n = e.length; i < n; i++)
                    e[i].updateMatrixWorld(t)
            },
            toJSON: function (t) {
                function e(e, i) {
                    return void 0 === e[i.uuid] && (e[i.uuid] = i.toJSON(t)),
                        i.uuid
                }
                function i(t) {
                    var e = [];
                    for (var i in t) {
                        var n = t[i];
                        delete n.metadata,
                            e.push(n)
                    }
                    return e
                }
                var n = void 0 === t || "string" == typeof t
                    , r = {};
                n && (t = {
                    geometries: {},
                    materials: {},
                    textures: {},
                    images: {},
                    shapes: {}
                },
                    r.metadata = {
                        version: 4.5,
                        type: "Object",
                        generator: "Object3D.toJSON"
                    });
                var o = {};
                if (o.uuid = this.uuid,
                    o.type = this.type,
                    "" !== this.name && (o.name = this.name),
                    !0 === this.castShadow && (o.castShadow = !0),
                    !0 === this.receiveShadow && (o.receiveShadow = !0),
                    !1 === this.visible && (o.visible = !1),
                    "{}" !== JSON.stringify(this.userData) && (o.userData = this.userData),
                    o.matrix = this.matrix.toArray(),
                    void 0 !== this.geometry) {
                    o.geometry = e(t.geometries, this.geometry);
                    var a = this.geometry.parameters;
                    if (void 0 !== a && void 0 !== a.shapes) {
                        var s = a.shapes;
                        if (Array.isArray(s))
                            for (var h = 0, l = s.length; h < l; h++) {
                                var c = s[h];
                                e(t.shapes, c)
                            }
                        else
                            e(t.shapes, s)
                    }
                }
                if (void 0 !== this.material)
                    if (Array.isArray(this.material)) {
                        for (var u = [], h = 0, l = this.material.length; h < l; h++)
                            u.push(e(t.materials, this.material[h]));
                        o.material = u
                    } else
                        o.material = e(t.materials, this.material);
                if (this.children.length > 0) {
                    o.children = [];
                    for (var h = 0; h < this.children.length; h++)
                        o.children.push(this.children[h].toJSON(t).object)
                }
                if (n) {
                    var d = i(t.geometries)
                        , p = i(t.materials)
                        , f = i(t.textures)
                        , m = i(t.images)
                        , s = i(t.shapes);
                    d.length > 0 && (r.geometries = d),
                        p.length > 0 && (r.materials = p),
                        f.length > 0 && (r.textures = f),
                        m.length > 0 && (r.images = m),
                        s.length > 0 && (r.shapes = s)
                }
                return r.object = o,
                    r
            },
            clone: function (t) {
                return (new this.constructor).copy(this, t)
            },
            copy: function (t, e) {
                if (void 0 === e && (e = !0),
                    this.name = t.name,
                    this.up.copy(t.up),
                    this.position.copy(t.position),
                    this.quaternion.copy(t.quaternion),
                    this.scale.copy(t.scale),
                    this.matrix.copy(t.matrix),
                    this.matrixWorld.copy(t.matrixWorld),
                    this.matrixAutoUpdate = t.matrixAutoUpdate,
                    this.matrixWorldNeedsUpdate = t.matrixWorldNeedsUpdate,
                    this.layers.mask = t.layers.mask,
                    this.visible = t.visible,
                    this.castShadow = t.castShadow,
                    this.receiveShadow = t.receiveShadow,
                    this.frustumCulled = t.frustumCulled,
                    this.renderOrder = t.renderOrder,
                    this.userData = JSON.parse(JSON.stringify(t.userData)),
                    !0 === e)
                    for (var i = 0; i < t.children.length; i++) {
                        var n = t.children[i];
                        this.add(n.clone())
                    }
                return this
            }
        }),
        dt.prototype = Object.assign(Object.create(ut.prototype), {
            constructor: dt,
            isCamera: !0,
            copy: function (t, e) {
                return ut.prototype.copy.call(this, t, e),
                    this.matrixWorldInverse.copy(t.matrixWorldInverse),
                    this.projectionMatrix.copy(t.projectionMatrix),
                    this
            },
            getWorldDirection: function () {
                var t = new a;
                return function (e) {
                    var i = e || new s;
                    return this.getWorldQuaternion(t),
                        i.set(0, 0, -1).applyQuaternion(t)
                }
            }(),
            updateMatrixWorld: function (t) {
                ut.prototype.updateMatrixWorld.call(this, t),
                    this.matrixWorldInverse.getInverse(this.matrixWorld)
            },
            clone: function () {
                return (new this.constructor).copy(this)
            }
        }),
        pt.prototype = Object.assign(Object.create(dt.prototype), {
            constructor: pt,
            isOrthographicCamera: !0,
            copy: function (t, e) {
                return dt.prototype.copy.call(this, t, e),
                    this.left = t.left,
                    this.right = t.right,
                    this.top = t.top,
                    this.bottom = t.bottom,
                    this.near = t.near,
                    this.far = t.far,
                    this.zoom = t.zoom,
                    this.view = null === t.view ? null : Object.assign({}, t.view),
                    this
            },
            setViewOffset: function (t, e, i, n, r, o) {
                null === this.view && (this.view = {
                    enabled: !0,
                    fullWidth: 1,
                    fullHeight: 1,
                    offsetX: 0,
                    offsetY: 0,
                    width: 1,
                    height: 1
                }),
                    this.view.enabled = !0,
                    this.view.fullWidth = t,
                    this.view.fullHeight = e,
                    this.view.offsetX = i,
                    this.view.offsetY = n,
                    this.view.width = r,
                    this.view.height = o,
                    this.updateProjectionMatrix()
            },
            clearViewOffset: function () {
                null !== this.view && (this.view.enabled = !1),
                    this.updateProjectionMatrix()
            },
            updateProjectionMatrix: function () {
                var t = (this.right - this.left) / (2 * this.zoom)
                    , e = (this.top - this.bottom) / (2 * this.zoom)
                    , i = (this.right + this.left) / 2
                    , n = (this.top + this.bottom) / 2
                    , r = i - t
                    , o = i + t
                    , a = n + e
                    , s = n - e;
                if (null !== this.view && this.view.enabled) {
                    var h = this.zoom / (this.view.width / this.view.fullWidth)
                        , l = this.zoom / (this.view.height / this.view.fullHeight)
                        , c = (this.right - this.left) / this.view.width
                        , u = (this.top - this.bottom) / this.view.height;
                    r += c * (this.view.offsetX / h),
                        o = r + c * (this.view.width / h),
                        a -= u * (this.view.offsetY / l),
                        s = a - u * (this.view.height / l)
                }
                this.projectionMatrix.makeOrthographic(r, o, a, s, this.near, this.far)
            },
            toJSON: function (t) {
                var e = ut.prototype.toJSON.call(this, t);
                return e.object.zoom = this.zoom,
                    e.object.left = this.left,
                    e.object.right = this.right,
                    e.object.top = this.top,
                    e.object.bottom = this.bottom,
                    e.object.near = this.near,
                    e.object.far = this.far,
                    null !== this.view && (e.object.view = Object.assign({}, this.view)),
                    e
            }
        }),
        Object.assign(ft.prototype, {
            clone: function () {
                return (new this.constructor).copy(this)
            },
            copy: function (t) {
                this.a = t.a,
                    this.b = t.b,
                    this.c = t.c,
                    this.normal.copy(t.normal),
                    this.color.copy(t.color),
                    this.materialIndex = t.materialIndex;
                for (var e = 0, i = t.vertexNormals.length; e < i; e++)
                    this.vertexNormals[e] = t.vertexNormals[e].clone();
                for (var e = 0, i = t.vertexColors.length; e < i; e++)
                    this.vertexColors[e] = t.vertexColors[e].clone();
                return this
            }
        });
    var Sh = 0;
    mt.prototype = Object.assign(Object.create(n.prototype), {
        constructor: mt,
        isGeometry: !0,
        applyMatrix: function (t) {
            for (var e = (new h).getNormalMatrix(t), i = 0, n = this.vertices.length; i < n; i++) {
                this.vertices[i].applyMatrix4(t)
            }
            for (var i = 0, n = this.faces.length; i < n; i++) {
                var r = this.faces[i];
                r.normal.applyMatrix3(e).normalize();
                for (var o = 0, a = r.vertexNormals.length; o < a; o++)
                    r.vertexNormals[o].applyMatrix3(e).normalize()
            }
            return null !== this.boundingBox && this.computeBoundingBox(),
                null !== this.boundingSphere && this.computeBoundingSphere(),
                this.verticesNeedUpdate = !0,
                this.normalsNeedUpdate = !0,
                this
        },
        rotateX: function () {
            var t = new o;
            return function (e) {
                return t.makeRotationX(e),
                    this.applyMatrix(t),
                    this
            }
        }(),
        rotateY: function () {
            var t = new o;
            return function (e) {
                return t.makeRotationY(e),
                    this.applyMatrix(t),
                    this
            }
        }(),
        rotateZ: function () {
            var t = new o;
            return function (e) {
                return t.makeRotationZ(e),
                    this.applyMatrix(t),
                    this
            }
        }(),
        translate: function () {
            var t = new o;
            return function (e, i, n) {
                return t.makeTranslation(e, i, n),
                    this.applyMatrix(t),
                    this
            }
        }(),
        scale: function () {
            var t = new o;
            return function (e, i, n) {
                return t.makeScale(e, i, n),
                    this.applyMatrix(t),
                    this
            }
        }(),
        lookAt: function () {
            var t = new ut;
            return function (e) {
                t.lookAt(e),
                    t.updateMatrix(),
                    this.applyMatrix(t.matrix)
            }
        }(),
        fromBufferGeometry: function (t) {
            function e(t, e, n, r) {
                var o = void 0 !== h ? [d[t].clone(), d[e].clone(), d[n].clone()] : []
                    , a = void 0 !== l ? [i.colors[t].clone(), i.colors[e].clone(), i.colors[n].clone()] : []
                    , s = new ft(t, e, n, o, a, r);
                i.faces.push(s),
                    void 0 !== c && i.faceVertexUvs[0].push([p[t].clone(), p[e].clone(), p[n].clone()]),
                    void 0 !== u && i.faceVertexUvs[1].push([f[t].clone(), f[e].clone(), f[n].clone()])
            }
            var i = this
                , n = null !== t.index ? t.index.array : void 0
                , o = t.attributes
                , a = o.position.array
                , h = void 0 !== o.normal ? o.normal.array : void 0
                , l = void 0 !== o.color ? o.color.array : void 0
                , c = void 0 !== o.uv ? o.uv.array : void 0
                , u = void 0 !== o.uv2 ? o.uv2.array : void 0;
            void 0 !== u && (this.faceVertexUvs[1] = []);
            for (var d = [], p = [], f = [], m = 0, v = 0; m < a.length; m += 3,
                v += 2)
                i.vertices.push(new s(a[m], a[m + 1], a[m + 2])),
                    void 0 !== h && d.push(new s(h[m], h[m + 1], h[m + 2])),
                    void 0 !== l && i.colors.push(new Z(l[m], l[m + 1], l[m + 2])),
                    void 0 !== c && p.push(new r(c[v], c[v + 1])),
                    void 0 !== u && f.push(new r(u[v], u[v + 1]));
            var g = t.groups;
            if (g.length > 0)
                for (var m = 0; m < g.length; m++)
                    for (var _ = g[m], y = _.start, x = _.count, v = y, b = y + x; v < b; v += 3)
                        void 0 !== n ? e(n[v], n[v + 1], n[v + 2], _.materialIndex) : e(v, v + 1, v + 2, _.materialIndex);
            else if (void 0 !== n)
                for (var m = 0; m < n.length; m += 3)
                    e(n[m], n[m + 1], n[m + 2]);
            else
                for (var m = 0; m < a.length / 3; m += 3)
                    e(m, m + 1, m + 2);
            return this.computeFaceNormals(),
                null !== t.boundingBox && (this.boundingBox = t.boundingBox.clone()),
                null !== t.boundingSphere && (this.boundingSphere = t.boundingSphere.clone()),
                this
        },
        center: function () {
            this.computeBoundingBox();
            var t = this.boundingBox.getCenter().negate();
            return this.translate(t.x, t.y, t.z),
                t
        },
        normalize: function () {
            this.computeBoundingSphere();
            var t = this.boundingSphere.center
                , e = this.boundingSphere.radius
                , i = 0 === e ? 1 : 1 / e
                , n = new o;
            return n.set(i, 0, 0, -i * t.x, 0, i, 0, -i * t.y, 0, 0, i, -i * t.z, 0, 0, 0, 1),
                this.applyMatrix(n),
                this
        },
        computeFaceNormals: function () {
            for (var t = new s, e = new s, i = 0, n = this.faces.length; i < n; i++) {
                var r = this.faces[i]
                    , o = this.vertices[r.a]
                    , a = this.vertices[r.b]
                    , h = this.vertices[r.c];
                t.subVectors(h, a),
                    e.subVectors(o, a),
                    t.cross(e),
                    t.normalize(),
                    r.normal.copy(t)
            }
        },
        computeVertexNormals: function (t) {
            void 0 === t && (t = !0);
            var e, i, n, r, o, a;
            for (a = new Array(this.vertices.length),
                e = 0,
                i = this.vertices.length; e < i; e++)
                a[e] = new s;
            if (t) {
                var h, l, c, u = new s, d = new s;
                for (n = 0,
                    r = this.faces.length; n < r; n++)
                    o = this.faces[n],
                        h = this.vertices[o.a],
                        l = this.vertices[o.b],
                        c = this.vertices[o.c],
                        u.subVectors(c, l),
                        d.subVectors(h, l),
                        u.cross(d),
                        a[o.a].add(u),
                        a[o.b].add(u),
                        a[o.c].add(u)
            } else
                for (this.computeFaceNormals(),
                    n = 0,
                    r = this.faces.length; n < r; n++)
                    o = this.faces[n],
                        a[o.a].add(o.normal),
                        a[o.b].add(o.normal),
                        a[o.c].add(o.normal);
            for (e = 0,
                i = this.vertices.length; e < i; e++)
                a[e].normalize();
            for (n = 0,
                r = this.faces.length; n < r; n++) {
                o = this.faces[n];
                var p = o.vertexNormals;
                3 === p.length ? (p[0].copy(a[o.a]),
                    p[1].copy(a[o.b]),
                    p[2].copy(a[o.c])) : (p[0] = a[o.a].clone(),
                        p[1] = a[o.b].clone(),
                        p[2] = a[o.c].clone())
            }
            this.faces.length > 0 && (this.normalsNeedUpdate = !0)
        },
        computeFlatVertexNormals: function () {
            var t, e, i;
            for (this.computeFaceNormals(),
                t = 0,
                e = this.faces.length; t < e; t++) {
                i = this.faces[t];
                var n = i.vertexNormals;
                3 === n.length ? (n[0].copy(i.normal),
                    n[1].copy(i.normal),
                    n[2].copy(i.normal)) : (n[0] = i.normal.clone(),
                        n[1] = i.normal.clone(),
                        n[2] = i.normal.clone())
            }
            this.faces.length > 0 && (this.normalsNeedUpdate = !0)
        },
        computeMorphNormals: function () {
            var t, e, i, n, r;
            for (i = 0,
                n = this.faces.length; i < n; i++)
                for (r = this.faces[i],
                    r.__originalFaceNormal ? r.__originalFaceNormal.copy(r.normal) : r.__originalFaceNormal = r.normal.clone(),
                    r.__originalVertexNormals || (r.__originalVertexNormals = []),
                    t = 0,
                    e = r.vertexNormals.length; t < e; t++)
                    r.__originalVertexNormals[t] ? r.__originalVertexNormals[t].copy(r.vertexNormals[t]) : r.__originalVertexNormals[t] = r.vertexNormals[t].clone();
            var o = new mt;
            for (o.faces = this.faces,
                t = 0,
                e = this.morphTargets.length; t < e; t++) {
                if (!this.morphNormals[t]) {
                    this.morphNormals[t] = {},
                        this.morphNormals[t].faceNormals = [],
                        this.morphNormals[t].vertexNormals = [];
                    var a, h, l = this.morphNormals[t].faceNormals, c = this.morphNormals[t].vertexNormals;
                    for (i = 0,
                        n = this.faces.length; i < n; i++)
                        a = new s,
                            h = {
                                a: new s,
                                b: new s,
                                c: new s
                            },
                            l.push(a),
                            c.push(h)
                }
                var u = this.morphNormals[t];
                o.vertices = this.morphTargets[t].vertices,
                    o.computeFaceNormals(),
                    o.computeVertexNormals();
                var a, h;
                for (i = 0,
                    n = this.faces.length; i < n; i++)
                    r = this.faces[i],
                        a = u.faceNormals[i],
                        h = u.vertexNormals[i],
                        a.copy(r.normal),
                        h.a.copy(r.vertexNormals[0]),
                        h.b.copy(r.vertexNormals[1]),
                        h.c.copy(r.vertexNormals[2])
            }
            for (i = 0,
                n = this.faces.length; i < n; i++)
                r = this.faces[i],
                    r.normal = r.__originalFaceNormal,
                    r.vertexNormals = r.__originalVertexNormals
        },
        computeLineDistances: function () {
            for (var t = 0, e = this.vertices, i = 0, n = e.length; i < n; i++)
                i > 0 && (t += e[i].distanceTo(e[i - 1])),
                    this.lineDistances[i] = t
        },
        computeBoundingBox: function () {
            null === this.boundingBox && (this.boundingBox = new nt),
                this.boundingBox.setFromPoints(this.vertices)
        },
        computeBoundingSphere: function () {
            null === this.boundingSphere && (this.boundingSphere = new rt),
                this.boundingSphere.setFromPoints(this.vertices)
        },
        merge: function (t, e, i) {
            if (!t || !t.isGeometry)
                return void console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", t);
            var n, r = this.vertices.length, o = this.vertices, a = t.vertices, s = this.faces, l = t.faces, c = this.faceVertexUvs[0], u = t.faceVertexUvs[0], d = this.colors, p = t.colors;
            void 0 === i && (i = 0),
                void 0 !== e && (n = (new h).getNormalMatrix(e));
            for (var f = 0, m = a.length; f < m; f++) {
                var v = a[f]
                    , g = v.clone();
                void 0 !== e && g.applyMatrix4(e),
                    o.push(g)
            }
            for (var f = 0, m = p.length; f < m; f++)
                d.push(p[f].clone());
            for (f = 0,
                m = l.length; f < m; f++) {
                var _, y, x, b = l[f], w = b.vertexNormals, S = b.vertexColors;
                _ = new ft(b.a + r, b.b + r, b.c + r),
                    _.normal.copy(b.normal),
                    void 0 !== n && _.normal.applyMatrix3(n).normalize();
                for (var E = 0, T = w.length; E < T; E++)
                    y = w[E].clone(),
                        void 0 !== n && y.applyMatrix3(n).normalize(),
                        _.vertexNormals.push(y);
                _.color.copy(b.color);
                for (var E = 0, T = S.length; E < T; E++)
                    x = S[E],
                        _.vertexColors.push(x.clone());
                _.materialIndex = b.materialIndex + i,
                    s.push(_)
            }
            for (f = 0,
                m = u.length; f < m; f++) {
                var M = u[f]
                    , A = [];
                if (void 0 !== M) {
                    for (var E = 0, T = M.length; E < T; E++)
                        A.push(M[E].clone());
                    c.push(A)
                }
            }
        },
        mergeMesh: function (t) {
            if (!t || !t.isMesh)
                return void console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", t);
            t.matrixAutoUpdate && t.updateMatrix(),
                this.merge(t.geometry, t.matrix)
        },
        mergeVertices: function () {
            var t, e, i, n, r, o, a, s, h = {}, l = [], c = [], u = Math.pow(10, 4);
            for (i = 0,
                n = this.vertices.length; i < n; i++)
                t = this.vertices[i],
                    e = Math.round(t.x * u) + "_" + Math.round(t.y * u) + "_" + Math.round(t.z * u),
                    void 0 === h[e] ? (h[e] = i,
                        l.push(this.vertices[i]),
                        c[i] = l.length - 1) : c[i] = c[h[e]];
            var d = [];
            for (i = 0,
                n = this.faces.length; i < n; i++) {
                r = this.faces[i],
                    r.a = c[r.a],
                    r.b = c[r.b],
                    r.c = c[r.c],
                    o = [r.a, r.b, r.c];
                for (var p = 0; p < 3; p++)
                    if (o[p] === o[(p + 1) % 3]) {
                        d.push(i);
                        break
                    }
            }
            for (i = d.length - 1; i >= 0; i--) {
                var f = d[i];
                for (this.faces.splice(f, 1),
                    a = 0,
                    s = this.faceVertexUvs.length; a < s; a++)
                    this.faceVertexUvs[a].splice(f, 1)
            }
            var m = this.vertices.length - l.length;
            return this.vertices = l,
                m
        },
        setFromPoints: function (t) {
            this.vertices = [];
            for (var e = 0, i = t.length; e < i; e++) {
                var n = t[e];
                this.vertices.push(new s(n.x, n.y, n.z || 0))
            }
            return this
        },
        sortFacesByMaterialIndex: function () {
            function t(t, e) {
                return t.materialIndex - e.materialIndex
            }
            for (var e = this.faces, i = e.length, n = 0; n < i; n++)
                e[n]._id = n;
            e.sort(t);
            var r, o, a = this.faceVertexUvs[0], s = this.faceVertexUvs[1];
            a && a.length === i && (r = []),
                s && s.length === i && (o = []);
            for (var n = 0; n < i; n++) {
                var h = e[n]._id;
                r && r.push(a[h]),
                    o && o.push(s[h])
            }
            r && (this.faceVertexUvs[0] = r),
                o && (this.faceVertexUvs[1] = o)
        },
        toJSON: function () {
            function t(t, e, i) {
                return i ? t | 1 << e : t & ~(1 << e)
            }
            function e(t) {
                var e = t.x.toString() + t.y.toString() + t.z.toString();
                return void 0 !== d[e] ? d[e] : (d[e] = u.length / 3,
                    u.push(t.x, t.y, t.z),
                    d[e])
            }
            function i(t) {
                var e = t.r.toString() + t.g.toString() + t.b.toString();
                return void 0 !== f[e] ? f[e] : (f[e] = p.length,
                    p.push(t.getHex()),
                    f[e])
            }
            function n(t) {
                var e = t.x.toString() + t.y.toString();
                return void 0 !== v[e] ? v[e] : (v[e] = m.length / 2,
                    m.push(t.x, t.y),
                    v[e])
            }
            var r = {
                metadata: {
                    version: 4.5,
                    type: "Geometry",
                    generator: "Geometry.toJSON"
                }
            };
            if (r.uuid = this.uuid,
                r.type = this.type,
                "" !== this.name && (r.name = this.name),
                void 0 !== this.parameters) {
                var o = this.parameters;
                for (var a in o)
                    void 0 !== o[a] && (r[a] = o[a]);
                return r
            }
            for (var s = [], h = 0; h < this.vertices.length; h++) {
                var l = this.vertices[h];
                s.push(l.x, l.y, l.z)
            }
            for (var c = [], u = [], d = {}, p = [], f = {}, m = [], v = {}, h = 0; h < this.faces.length; h++) {
                var g = this.faces[h]
                    , _ = void 0 !== this.faceVertexUvs[0][h]
                    , y = g.normal.length() > 0
                    , x = g.vertexNormals.length > 0
                    , b = 1 !== g.color.r || 1 !== g.color.g || 1 !== g.color.b
                    , w = g.vertexColors.length > 0
                    , S = 0;
                if (S = t(S, 0, 0),
                    S = t(S, 1, !0),
                    S = t(S, 2, !1),
                    S = t(S, 3, _),
                    S = t(S, 4, y),
                    S = t(S, 5, x),
                    S = t(S, 6, b),
                    S = t(S, 7, w),
                    c.push(S),
                    c.push(g.a, g.b, g.c),
                    c.push(g.materialIndex),
                    _) {
                    var E = this.faceVertexUvs[0][h];
                    c.push(n(E[0]), n(E[1]), n(E[2]))
                }
                if (y && c.push(e(g.normal)),
                    x) {
                    var T = g.vertexNormals;
                    c.push(e(T[0]), e(T[1]), e(T[2]))
                }
                if (b && c.push(i(g.color)),
                    w) {
                    var M = g.vertexColors;
                    c.push(i(M[0]), i(M[1]), i(M[2]))
                }
            }
            return r.data = {},
                r.data.vertices = s,
                r.data.normals = u,
                p.length > 0 && (r.data.colors = p),
                m.length > 0 && (r.data.uvs = [m]),
                r.data.faces = c,
                r
        },
        clone: function () {
            return (new mt).copy(this)
        },
        copy: function (t) {
            var e, i, n, r, o, a;
            this.vertices = [],
                this.colors = [],
                this.faces = [],
                this.faceVertexUvs = [[]],
                this.morphTargets = [],
                this.morphNormals = [],
                this.skinWeights = [],
                this.skinIndices = [],
                this.lineDistances = [],
                this.boundingBox = null,
                this.boundingSphere = null,
                this.name = t.name;
            var s = t.vertices;
            for (e = 0,
                i = s.length; e < i; e++)
                this.vertices.push(s[e].clone());
            var h = t.colors;
            for (e = 0,
                i = h.length; e < i; e++)
                this.colors.push(h[e].clone());
            var l = t.faces;
            for (e = 0,
                i = l.length; e < i; e++)
                this.faces.push(l[e].clone());
            for (e = 0,
                i = t.faceVertexUvs.length; e < i; e++) {
                var c = t.faceVertexUvs[e];
                for (void 0 === this.faceVertexUvs[e] && (this.faceVertexUvs[e] = []),
                    n = 0,
                    r = c.length; n < r; n++) {
                    var u = c[n]
                        , d = [];
                    for (o = 0,
                        a = u.length; o < a; o++) {
                        var p = u[o];
                        d.push(p.clone())
                    }
                    this.faceVertexUvs[e].push(d)
                }
            }
            var f = t.morphTargets;
            for (e = 0,
                i = f.length; e < i; e++) {
                var m = {};
                if (m.name = f[e].name,
                    void 0 !== f[e].vertices)
                    for (m.vertices = [],
                        n = 0,
                        r = f[e].vertices.length; n < r; n++)
                        m.vertices.push(f[e].vertices[n].clone());
                if (void 0 !== f[e].normals)
                    for (m.normals = [],
                        n = 0,
                        r = f[e].normals.length; n < r; n++)
                        m.normals.push(f[e].normals[n].clone());
                this.morphTargets.push(m)
            }
            var v = t.morphNormals;
            for (e = 0,
                i = v.length; e < i; e++) {
                var g = {};
                if (void 0 !== v[e].vertexNormals)
                    for (g.vertexNormals = [],
                        n = 0,
                        r = v[e].vertexNormals.length; n < r; n++) {
                        var _ = v[e].vertexNormals[n]
                            , y = {};
                        y.a = _.a.clone(),
                            y.b = _.b.clone(),
                            y.c = _.c.clone(),
                            g.vertexNormals.push(y)
                    }
                if (void 0 !== v[e].faceNormals)
                    for (g.faceNormals = [],
                        n = 0,
                        r = v[e].faceNormals.length; n < r; n++)
                        g.faceNormals.push(v[e].faceNormals[n].clone());
                this.morphNormals.push(g)
            }
            var x = t.skinWeights;
            for (e = 0,
                i = x.length; e < i; e++)
                this.skinWeights.push(x[e].clone());
            var b = t.skinIndices;
            for (e = 0,
                i = b.length; e < i; e++)
                this.skinIndices.push(b[e].clone());
            var w = t.lineDistances;
            for (e = 0,
                i = w.length; e < i; e++)
                this.lineDistances.push(w[e]);
            var S = t.boundingBox;
            null !== S && (this.boundingBox = S.clone());
            var E = t.boundingSphere;
            return null !== E && (this.boundingSphere = E.clone()),
                this.elementsNeedUpdate = t.elementsNeedUpdate,
                this.verticesNeedUpdate = t.verticesNeedUpdate,
                this.uvsNeedUpdate = t.uvsNeedUpdate,
                this.normalsNeedUpdate = t.normalsNeedUpdate,
                this.colorsNeedUpdate = t.colorsNeedUpdate,
                this.lineDistancesNeedUpdate = t.lineDistancesNeedUpdate,
                this.groupsNeedUpdate = t.groupsNeedUpdate,
                this
        },
        dispose: function () {
            this.dispatchEvent({
                type: "dispose"
            })
        }
    }),
        Object.defineProperty(vt.prototype, "needsUpdate", {
            set: function (t) {
                !0 === t && this.version++
            }
        }),
        Object.assign(vt.prototype, {
            isBufferAttribute: !0,
            setArray: function (t) {
                if (Array.isArray(t))
                    throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
                this.count = void 0 !== t ? t.length / this.itemSize : 0,
                    this.array = t
            },
            setDynamic: function (t) {
                return this.dynamic = t,
                    this
            },
            copy: function (t) {
                return this.array = new t.array.constructor(t.array),
                    this.itemSize = t.itemSize,
                    this.count = t.count,
                    this.normalized = t.normalized,
                    this.dynamic = t.dynamic,
                    this
            },
            copyAt: function (t, e, i) {
                t *= this.itemSize,
                    i *= e.itemSize;
                for (var n = 0, r = this.itemSize; n < r; n++)
                    this.array[t + n] = e.array[i + n];
                return this
            },
            copyArray: function (t) {
                return this.array.set(t),
                    this
            },
            copyColorsArray: function (t) {
                for (var e = this.array, i = 0, n = 0, r = t.length; n < r; n++) {
                    var o = t[n];
                    void 0 === o && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", n),
                        o = new Z),
                        e[i++] = o.r,
                        e[i++] = o.g,
                        e[i++] = o.b
                }
                return this
            },
            copyIndicesArray: function (t) {
                for (var e = this.array, i = 0, n = 0, r = t.length; n < r; n++) {
                    var o = t[n];
                    e[i++] = o.a,
                        e[i++] = o.b,
                        e[i++] = o.c
                }
                return this
            },
            copyVector2sArray: function (t) {
                for (var e = this.array, i = 0, n = 0, o = t.length; n < o; n++) {
                    var a = t[n];
                    void 0 === a && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", n),
                        a = new r),
                        e[i++] = a.x,
                        e[i++] = a.y
                }
                return this
            },
            copyVector3sArray: function (t) {
                for (var e = this.array, i = 0, n = 0, r = t.length; n < r; n++) {
                    var o = t[n];
                    void 0 === o && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", n),
                        o = new s),
                        e[i++] = o.x,
                        e[i++] = o.y,
                        e[i++] = o.z
                }
                return this
            },
            copyVector4sArray: function (t) {
                for (var e = this.array, i = 0, n = 0, r = t.length; n < r; n++) {
                    var o = t[n];
                    void 0 === o && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", n),
                        o = new c),
                        e[i++] = o.x,
                        e[i++] = o.y,
                        e[i++] = o.z,
                        e[i++] = o.w
                }
                return this
            },
            set: function (t, e) {
                return void 0 === e && (e = 0),
                    this.array.set(t, e),
                    this
            },
            getX: function (t) {
                return this.array[t * this.itemSize]
            },
            setX: function (t, e) {
                return this.array[t * this.itemSize] = e,
                    this
            },
            getY: function (t) {
                return this.array[t * this.itemSize + 1]
            },
            setY: function (t, e) {
                return this.array[t * this.itemSize + 1] = e,
                    this
            },
            getZ: function (t) {
                return this.array[t * this.itemSize + 2]
            },
            setZ: function (t, e) {
                return this.array[t * this.itemSize + 2] = e,
                    this
            },
            getW: function (t) {
                return this.array[t * this.itemSize + 3]
            },
            setW: function (t, e) {
                return this.array[t * this.itemSize + 3] = e,
                    this
            },
            setXY: function (t, e, i) {
                return t *= this.itemSize,
                    this.array[t + 0] = e,
                    this.array[t + 1] = i,
                    this
            },
            setXYZ: function (t, e, i, n) {
                return t *= this.itemSize,
                    this.array[t + 0] = e,
                    this.array[t + 1] = i,
                    this.array[t + 2] = n,
                    this
            },
            setXYZW: function (t, e, i, n, r) {
                return t *= this.itemSize,
                    this.array[t + 0] = e,
                    this.array[t + 1] = i,
                    this.array[t + 2] = n,
                    this.array[t + 3] = r,
                    this
            },
            onUpload: function (t) {
                return this.onUploadCallback = t,
                    this
            },
            clone: function () {
                return new this.constructor(this.array, this.itemSize).copy(this)
            }
        }),
        gt.prototype = Object.create(vt.prototype),
        gt.prototype.constructor = gt,
        _t.prototype = Object.create(vt.prototype),
        _t.prototype.constructor = _t,
        yt.prototype = Object.create(vt.prototype),
        yt.prototype.constructor = yt,
        xt.prototype = Object.create(vt.prototype),
        xt.prototype.constructor = xt,
        bt.prototype = Object.create(vt.prototype),
        bt.prototype.constructor = bt,
        wt.prototype = Object.create(vt.prototype),
        wt.prototype.constructor = wt,
        St.prototype = Object.create(vt.prototype),
        St.prototype.constructor = St,
        Et.prototype = Object.create(vt.prototype),
        Et.prototype.constructor = Et,
        Tt.prototype = Object.create(vt.prototype),
        Tt.prototype.constructor = Tt,
        Object.assign(Mt.prototype, {
            computeGroups: function (t) {
                for (var e, i = [], n = void 0, r = t.faces, o = 0; o < r.length; o++) {
                    var a = r[o];
                    a.materialIndex !== n && (n = a.materialIndex,
                        void 0 !== e && (e.count = 3 * o - e.start,
                            i.push(e)),
                        e = {
                            start: 3 * o,
                            materialIndex: n
                        })
                }
                void 0 !== e && (e.count = 3 * o - e.start,
                    i.push(e)),
                    this.groups = i
            },
            fromGeometry: function (t) {
                var e, i = t.faces, n = t.vertices, o = t.faceVertexUvs, a = o[0] && o[0].length > 0, s = o[1] && o[1].length > 0, h = t.morphTargets, l = h.length;
                if (l > 0) {
                    e = [];
                    for (var c = 0; c < l; c++)
                        e[c] = [];
                    this.morphTargets.position = e
                }
                var u, d = t.morphNormals, p = d.length;
                if (p > 0) {
                    u = [];
                    for (var c = 0; c < p; c++)
                        u[c] = [];
                    this.morphTargets.normal = u
                }
                for (var f = t.skinIndices, m = t.skinWeights, v = f.length === n.length, g = m.length === n.length, c = 0; c < i.length; c++) {
                    var _ = i[c];
                    this.vertices.push(n[_.a], n[_.b], n[_.c]);
                    var y = _.vertexNormals;
                    if (3 === y.length)
                        this.normals.push(y[0], y[1], y[2]);
                    else {
                        var x = _.normal;
                        this.normals.push(x, x, x)
                    }
                    var b = _.vertexColors;
                    if (3 === b.length)
                        this.colors.push(b[0], b[1], b[2]);
                    else {
                        var w = _.color;
                        this.colors.push(w, w, w)
                    }
                    if (!0 === a) {
                        var S = o[0][c];
                        void 0 !== S ? this.uvs.push(S[0], S[1], S[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", c),
                            this.uvs.push(new r, new r, new r))
                    }
                    if (!0 === s) {
                        var S = o[1][c];
                        void 0 !== S ? this.uvs2.push(S[0], S[1], S[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", c),
                            this.uvs2.push(new r, new r, new r))
                    }
                    for (var E = 0; E < l; E++) {
                        var T = h[E].vertices;
                        e[E].push(T[_.a], T[_.b], T[_.c])
                    }
                    for (var E = 0; E < p; E++) {
                        var M = d[E].vertexNormals[c];
                        u[E].push(M.a, M.b, M.c)
                    }
                    v && this.skinIndices.push(f[_.a], f[_.b], f[_.c]),
                        g && this.skinWeights.push(m[_.a], m[_.b], m[_.c])
                }
                return this.computeGroups(t),
                    this.verticesNeedUpdate = t.verticesNeedUpdate,
                    this.normalsNeedUpdate = t.normalsNeedUpdate,
                    this.colorsNeedUpdate = t.colorsNeedUpdate,
                    this.uvsNeedUpdate = t.uvsNeedUpdate,
                    this.groupsNeedUpdate = t.groupsNeedUpdate,
                    this
            }
        });
    var Eh = 1;
    Pt.prototype = Object.assign(Object.create(n.prototype), {
        constructor: Pt,
        isBufferGeometry: !0,
        getIndex: function () {
            return this.index
        },
        setIndex: function (t) {
            Array.isArray(t) ? this.index = new (At(t) > 65535 ? St : bt)(t, 1) : this.index = t
        },
        addAttribute: function (t, e) {
            return e && e.isBufferAttribute || e && e.isInterleavedBufferAttribute ? "index" === t ? (console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),
                void this.setIndex(e)) : (this.attributes[t] = e,
                    this) : (console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),
                        void this.addAttribute(t, new vt(arguments[1], arguments[2])))
        },
        getAttribute: function (t) {
            return this.attributes[t]
        },
        removeAttribute: function (t) {
            return delete this.attributes[t],
                this
        },
        addGroup: function (t, e, i) {
            this.groups.push({
                start: t,
                count: e,
                materialIndex: void 0 !== i ? i : 0
            })
        },
        clearGroups: function () {
            this.groups = []
        },
        setDrawRange: function (t, e) {
            this.drawRange.start = t,
                this.drawRange.count = e
        },
        applyMatrix: function (t) {
            var e = this.attributes.position;
            void 0 !== e && (t.applyToBufferAttribute(e),
                e.needsUpdate = !0);
            var i = this.attributes.normal;
            if (void 0 !== i) {
                (new h).getNormalMatrix(t).applyToBufferAttribute(i),
                    i.needsUpdate = !0
            }
            return null !== this.boundingBox && this.computeBoundingBox(),
                null !== this.boundingSphere && this.computeBoundingSphere(),
                this
        },
        rotateX: function () {
            var t = new o;
            return function (e) {
                return t.makeRotationX(e),
                    this.applyMatrix(t),
                    this
            }
        }(),
        rotateY: function () {
            var t = new o;
            return function (e) {
                return t.makeRotationY(e),
                    this.applyMatrix(t),
                    this
            }
        }(),
        rotateZ: function () {
            var t = new o;
            return function (e) {
                return t.makeRotationZ(e),
                    this.applyMatrix(t),
                    this
            }
        }(),
        translate: function () {
            var t = new o;
            return function (e, i, n) {
                return t.makeTranslation(e, i, n),
                    this.applyMatrix(t),
                    this
            }
        }(),
        scale: function () {
            var t = new o;
            return function (e, i, n) {
                return t.makeScale(e, i, n),
                    this.applyMatrix(t),
                    this
            }
        }(),
        lookAt: function () {
            var t = new ut;
            return function (e) {
                t.lookAt(e),
                    t.updateMatrix(),
                    this.applyMatrix(t.matrix)
            }
        }(),
        center: function () {
            this.computeBoundingBox();
            var t = this.boundingBox.getCenter().negate();
            return this.translate(t.x, t.y, t.z),
                t
        },
        setFromObject: function (t) {
            var e = t.geometry;
            if (t.isPoints || t.isLine) {
                var i = new Et(3 * e.vertices.length, 3)
                    , n = new Et(3 * e.colors.length, 3);
                if (this.addAttribute("position", i.copyVector3sArray(e.vertices)),
                    this.addAttribute("color", n.copyColorsArray(e.colors)),
                    e.lineDistances && e.lineDistances.length === e.vertices.length) {
                    var r = new Et(e.lineDistances.length, 1);
                    this.addAttribute("lineDistance", r.copyArray(e.lineDistances))
                }
                null !== e.boundingSphere && (this.boundingSphere = e.boundingSphere.clone()),
                    null !== e.boundingBox && (this.boundingBox = e.boundingBox.clone())
            } else
                t.isMesh && e && e.isGeometry && this.fromGeometry(e);
            return this
        },
        setFromPoints: function (t) {
            for (var e = [], i = 0, n = t.length; i < n; i++) {
                var r = t[i];
                e.push(r.x, r.y, r.z || 0)
            }
            return this.addAttribute("position", new Et(e, 3)),
                this
        },
        updateFromObject: function (t) {
            var e = t.geometry;
            if (t.isMesh) {
                var i = e.__directGeometry;
                if (!0 === e.elementsNeedUpdate && (i = void 0,
                    e.elementsNeedUpdate = !1),
                    void 0 === i)
                    return this.fromGeometry(e);
                i.verticesNeedUpdate = e.verticesNeedUpdate,
                    i.normalsNeedUpdate = e.normalsNeedUpdate,
                    i.colorsNeedUpdate = e.colorsNeedUpdate,
                    i.uvsNeedUpdate = e.uvsNeedUpdate,
                    i.groupsNeedUpdate = e.groupsNeedUpdate,
                    e.verticesNeedUpdate = !1,
                    e.normalsNeedUpdate = !1,
                    e.colorsNeedUpdate = !1,
                    e.uvsNeedUpdate = !1,
                    e.groupsNeedUpdate = !1,
                    e = i
            }
            var n;
            return !0 === e.verticesNeedUpdate && (n = this.attributes.position,
                void 0 !== n && (n.copyVector3sArray(e.vertices),
                    n.needsUpdate = !0),
                e.verticesNeedUpdate = !1),
                !0 === e.normalsNeedUpdate && (n = this.attributes.normal,
                    void 0 !== n && (n.copyVector3sArray(e.normals),
                        n.needsUpdate = !0),
                    e.normalsNeedUpdate = !1),
                !0 === e.colorsNeedUpdate && (n = this.attributes.color,
                    void 0 !== n && (n.copyColorsArray(e.colors),
                        n.needsUpdate = !0),
                    e.colorsNeedUpdate = !1),
                e.uvsNeedUpdate && (n = this.attributes.uv,
                    void 0 !== n && (n.copyVector2sArray(e.uvs),
                        n.needsUpdate = !0),
                    e.uvsNeedUpdate = !1),
                e.lineDistancesNeedUpdate && (n = this.attributes.lineDistance,
                    void 0 !== n && (n.copyArray(e.lineDistances),
                        n.needsUpdate = !0),
                    e.lineDistancesNeedUpdate = !1),
                e.groupsNeedUpdate && (e.computeGroups(t.geometry),
                    this.groups = e.groups,
                    e.groupsNeedUpdate = !1),
                this
        },
        fromGeometry: function (t) {
            return t.__directGeometry = (new Mt).fromGeometry(t),
                this.fromDirectGeometry(t.__directGeometry)
        },
        fromDirectGeometry: function (t) {
            var e = new Float32Array(3 * t.vertices.length);
            if (this.addAttribute("position", new vt(e, 3).copyVector3sArray(t.vertices)),
                t.normals.length > 0) {
                var i = new Float32Array(3 * t.normals.length);
                this.addAttribute("normal", new vt(i, 3).copyVector3sArray(t.normals))
            }
            if (t.colors.length > 0) {
                var n = new Float32Array(3 * t.colors.length);
                this.addAttribute("color", new vt(n, 3).copyColorsArray(t.colors))
            }
            if (t.uvs.length > 0) {
                var r = new Float32Array(2 * t.uvs.length);
                this.addAttribute("uv", new vt(r, 2).copyVector2sArray(t.uvs))
            }
            if (t.uvs2.length > 0) {
                var o = new Float32Array(2 * t.uvs2.length);
                this.addAttribute("uv2", new vt(o, 2).copyVector2sArray(t.uvs2))
            }
            if (t.indices.length > 0) {
                var a = At(t.indices) > 65535 ? Uint32Array : Uint16Array
                    , s = new a(3 * t.indices.length);
                this.setIndex(new vt(s, 1).copyIndicesArray(t.indices))
            }
            this.groups = t.groups;
            for (var h in t.morphTargets) {
                for (var l = [], c = t.morphTargets[h], u = 0, d = c.length; u < d; u++) {
                    var p = c[u]
                        , f = new Et(3 * p.length, 3);
                    l.push(f.copyVector3sArray(p))
                }
                this.morphAttributes[h] = l
            }
            if (t.skinIndices.length > 0) {
                var m = new Et(4 * t.skinIndices.length, 4);
                this.addAttribute("skinIndex", m.copyVector4sArray(t.skinIndices))
            }
            if (t.skinWeights.length > 0) {
                var v = new Et(4 * t.skinWeights.length, 4);
                this.addAttribute("skinWeight", v.copyVector4sArray(t.skinWeights))
            }
            return null !== t.boundingSphere && (this.boundingSphere = t.boundingSphere.clone()),
                null !== t.boundingBox && (this.boundingBox = t.boundingBox.clone()),
                this
        },
        computeBoundingBox: function () {
            null === this.boundingBox && (this.boundingBox = new nt);
            var t = this.attributes.position;
            void 0 !== t ? this.boundingBox.setFromBufferAttribute(t) : this.boundingBox.makeEmpty(),
                (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this)
        },
        computeBoundingSphere: function () {
            var t = new nt
                , e = new s;
            return function () {
                null === this.boundingSphere && (this.boundingSphere = new rt);
                var i = this.attributes.position;
                if (i) {
                    var n = this.boundingSphere.center;
                    t.setFromBufferAttribute(i),
                        t.getCenter(n);
                    for (var r = 0, o = 0, a = i.count; o < a; o++)
                        e.x = i.getX(o),
                            e.y = i.getY(o),
                            e.z = i.getZ(o),
                            r = Math.max(r, n.distanceToSquared(e));
                    this.boundingSphere.radius = Math.sqrt(r),
                        isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this)
                }
            }
        }(),
        computeFaceNormals: function () { },
        computeVertexNormals: function () {
            var t = this.index
                , e = this.attributes
                , i = this.groups;
            if (e.position) {
                var n = e.position.array;
                if (void 0 === e.normal)
                    this.addAttribute("normal", new vt(new Float32Array(n.length), 3));
                else
                    for (var r = e.normal.array, o = 0, a = r.length; o < a; o++)
                        r[o] = 0;
                var h, l, c, u = e.normal.array, d = new s, p = new s, f = new s, m = new s, v = new s;
                if (t) {
                    var g = t.array;
                    0 === i.length && this.addGroup(0, g.length);
                    for (var _ = 0, y = i.length; _ < y; ++_)
                        for (var x = i[_], b = x.start, w = x.count, o = b, a = b + w; o < a; o += 3)
                            h = 3 * g[o + 0],
                                l = 3 * g[o + 1],
                                c = 3 * g[o + 2],
                                d.fromArray(n, h),
                                p.fromArray(n, l),
                                f.fromArray(n, c),
                                m.subVectors(f, p),
                                v.subVectors(d, p),
                                m.cross(v),
                                u[h] += m.x,
                                u[h + 1] += m.y,
                                u[h + 2] += m.z,
                                u[l] += m.x,
                                u[l + 1] += m.y,
                                u[l + 2] += m.z,
                                u[c] += m.x,
                                u[c + 1] += m.y,
                                u[c + 2] += m.z
                } else
                    for (var o = 0, a = n.length; o < a; o += 9)
                        d.fromArray(n, o),
                            p.fromArray(n, o + 3),
                            f.fromArray(n, o + 6),
                            m.subVectors(f, p),
                            v.subVectors(d, p),
                            m.cross(v),
                            u[o] = m.x,
                            u[o + 1] = m.y,
                            u[o + 2] = m.z,
                            u[o + 3] = m.x,
                            u[o + 4] = m.y,
                            u[o + 5] = m.z,
                            u[o + 6] = m.x,
                            u[o + 7] = m.y,
                            u[o + 8] = m.z;
                this.normalizeNormals(),
                    e.normal.needsUpdate = !0
            }
        },
        merge: function (t, e) {
            if (!t || !t.isBufferGeometry)
                return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", t);
            void 0 === e && (e = 0);
            var i = this.attributes;
            for (var n in i)
                if (void 0 !== t.attributes[n])
                    for (var r = i[n], o = r.array, a = t.attributes[n], s = a.array, h = a.itemSize, l = 0, c = h * e; l < s.length; l++,
                        c++)
                        o[c] = s[l];
            return this
        },
        normalizeNormals: function () {
            var t = new s;
            return function () {
                for (var e = this.attributes.normal, i = 0, n = e.count; i < n; i++)
                    t.x = e.getX(i),
                        t.y = e.getY(i),
                        t.z = e.getZ(i),
                        t.normalize(),
                        e.setXYZ(i, t.x, t.y, t.z)
            }
        }(),
        toNonIndexed: function () {
            if (null === this.index)
                return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),
                    this;
            var t = new Pt
                , e = this.index.array
                , i = this.attributes;
            for (var n in i) {
                for (var r = i[n], o = r.array, a = r.itemSize, s = new o.constructor(e.length * a), h = 0, l = 0, c = 0, u = e.length; c < u; c++) {
                    h = e[c] * a;
                    for (var d = 0; d < a; d++)
                        s[l++] = o[h++]
                }
                t.addAttribute(n, new vt(s, a))
            }
            return t
        },
        toJSON: function () {
            var t = {
                metadata: {
                    version: 4.5,
                    type: "BufferGeometry",
                    generator: "BufferGeometry.toJSON"
                }
            };
            if (t.uuid = this.uuid,
                t.type = this.type,
                "" !== this.name && (t.name = this.name),
                void 0 !== this.parameters) {
                var e = this.parameters;
                for (var i in e)
                    void 0 !== e[i] && (t[i] = e[i]);
                return t
            }
            t.data = {
                attributes: {}
            };
            var n = this.index;
            if (null !== n) {
                var r = Array.prototype.slice.call(n.array);
                t.data.index = {
                    type: n.array.constructor.name,
                    array: r
                }
            }
            var o = this.attributes;
            for (var i in o) {
                var a = o[i]
                    , r = Array.prototype.slice.call(a.array);
                t.data.attributes[i] = {
                    itemSize: a.itemSize,
                    type: a.array.constructor.name,
                    array: r,
                    normalized: a.normalized
                }
            }
            var s = this.groups;
            s.length > 0 && (t.data.groups = JSON.parse(JSON.stringify(s)));
            var h = this.boundingSphere;
            return null !== h && (t.data.boundingSphere = {
                center: h.center.toArray(),
                radius: h.radius
            }),
                t
        },
        clone: function () {
            return (new Pt).copy(this)
        },
        copy: function (t) {
            var e, i, n;
            this.index = null,
                this.attributes = {},
                this.morphAttributes = {},
                this.groups = [],
                this.boundingBox = null,
                this.boundingSphere = null,
                this.name = t.name;
            var r = t.index;
            null !== r && this.setIndex(r.clone());
            var o = t.attributes;
            for (e in o) {
                var a = o[e];
                this.addAttribute(e, a.clone())
            }
            var s = t.morphAttributes;
            for (e in s) {
                var h = []
                    , l = s[e];
                for (i = 0,
                    n = l.length; i < n; i++)
                    h.push(l[i].clone());
                this.morphAttributes[e] = h
            }
            var c = t.groups;
            for (i = 0,
                n = c.length; i < n; i++) {
                var u = c[i];
                this.addGroup(u.start, u.count, u.materialIndex)
            }
            var d = t.boundingBox;
            null !== d && (this.boundingBox = d.clone());
            var p = t.boundingSphere;
            return null !== p && (this.boundingSphere = p.clone()),
                this.drawRange.start = t.drawRange.start,
                this.drawRange.count = t.drawRange.count,
                this
        },
        dispose: function () {
            this.dispatchEvent({
                type: "dispose"
            })
        }
    }),
        Rt.prototype = Object.create(mt.prototype),
        Rt.prototype.constructor = Rt,
        Lt.prototype = Object.create(Pt.prototype),
        Lt.prototype.constructor = Lt,
        Ot.prototype = Object.create(mt.prototype),
        Ot.prototype.constructor = Ot,
        It.prototype = Object.create(Pt.prototype),
        It.prototype.constructor = It,
        Ct.prototype = Object.create(tt.prototype),
        Ct.prototype.constructor = Ct,
        Ct.prototype.isMeshBasicMaterial = !0,
        Ct.prototype.copy = function (t) {
            return tt.prototype.copy.call(this, t),
                this.color.copy(t.color),
                this.map = t.map,
                this.lightMap = t.lightMap,
                this.lightMapIntensity = t.lightMapIntensity,
                this.aoMap = t.aoMap,
                this.aoMapIntensity = t.aoMapIntensity,
                this.specularMap = t.specularMap,
                this.alphaMap = t.alphaMap,
                this.envMap = t.envMap,
                this.combine = t.combine,
                this.reflectivity = t.reflectivity,
                this.refractionRatio = t.refractionRatio,
                this.wireframe = t.wireframe,
                this.wireframeLinewidth = t.wireframeLinewidth,
                this.wireframeLinecap = t.wireframeLinecap,
                this.wireframeLinejoin = t.wireframeLinejoin,
                this.skinning = t.skinning,
                this.morphTargets = t.morphTargets,
                this
        }
        ,
        Dt.prototype = Object.create(tt.prototype),
        Dt.prototype.constructor = Dt,
        Dt.prototype.isShaderMaterial = !0,
        Dt.prototype.copy = function (t) {
            return tt.prototype.copy.call(this, t),
                this.fragmentShader = t.fragmentShader,
                this.vertexShader = t.vertexShader,
                this.uniforms = _h.clone(t.uniforms),
                this.defines = t.defines,
                this.wireframe = t.wireframe,
                this.wireframeLinewidth = t.wireframeLinewidth,
                this.lights = t.lights,
                this.clipping = t.clipping,
                this.skinning = t.skinning,
                this.morphTargets = t.morphTargets,
                this.morphNormals = t.morphNormals,
                this.extensions = t.extensions,
                this
        }
        ,
        Dt.prototype.toJSON = function (t) {
            var e = tt.prototype.toJSON.call(this, t);
            return e.uniforms = this.uniforms,
                e.vertexShader = this.vertexShader,
                e.fragmentShader = this.fragmentShader,
                e
        }
        ,
        Object.assign(Nt.prototype, {
            set: function (t, e) {
                return this.origin.copy(t),
                    this.direction.copy(e),
                    this
            },
            clone: function () {
                return (new this.constructor).copy(this)
            },
            copy: function (t) {
                return this.origin.copy(t.origin),
                    this.direction.copy(t.direction),
                    this
            },
            at: function (t, e) {
                return (e || new s).copy(this.direction).multiplyScalar(t).add(this.origin)
            },
            lookAt: function (t) {
                return this.direction.copy(t).sub(this.origin).normalize(),
                    this
            },
            recast: function () {
                var t = new s;
                return function (e) {
                    return this.origin.copy(this.at(e, t)),
                        this
                }
            }(),
            closestPointToPoint: function (t, e) {
                var i = e || new s;
                i.subVectors(t, this.origin);
                var n = i.dot(this.direction);
                return n < 0 ? i.copy(this.origin) : i.copy(this.direction).multiplyScalar(n).add(this.origin)
            },
            distanceToPoint: function (t) {
                return Math.sqrt(this.distanceSqToPoint(t))
            },
            distanceSqToPoint: function () {
                var t = new s;
                return function (e) {
                    var i = t.subVectors(e, this.origin).dot(this.direction);
                    return i < 0 ? this.origin.distanceToSquared(e) : (t.copy(this.direction).multiplyScalar(i).add(this.origin),
                        t.distanceToSquared(e))
                }
            }(),
            distanceSqToSegment: function () {
                var t = new s
                    , e = new s
                    , i = new s;
                return function (n, r, o, a) {
                    t.copy(n).add(r).multiplyScalar(.5),
                        e.copy(r).sub(n).normalize(),
                        i.copy(this.origin).sub(t);
                    var s, h, l, c, u = .5 * n.distanceTo(r), d = -this.direction.dot(e), p = i.dot(this.direction), f = -i.dot(e), m = i.lengthSq(), v = Math.abs(1 - d * d);
                    if (v > 0)
                        if (s = d * f - p,
                            h = d * p - f,
                            c = u * v,
                            s >= 0)
                            if (h >= -c)
                                if (h <= c) {
                                    var g = 1 / v;
                                    s *= g,
                                        h *= g,
                                        l = s * (s + d * h + 2 * p) + h * (d * s + h + 2 * f) + m
                                } else
                                    h = u,
                                        s = Math.max(0, -(d * h + p)),
                                        l = -s * s + h * (h + 2 * f) + m;
                            else
                                h = -u,
                                    s = Math.max(0, -(d * h + p)),
                                    l = -s * s + h * (h + 2 * f) + m;
                        else
                            h <= -c ? (s = Math.max(0, -(-d * u + p)),
                                h = s > 0 ? -u : Math.min(Math.max(-u, -f), u),
                                l = -s * s + h * (h + 2 * f) + m) : h <= c ? (s = 0,
                                    h = Math.min(Math.max(-u, -f), u),
                                    l = h * (h + 2 * f) + m) : (s = Math.max(0, -(d * u + p)),
                                        h = s > 0 ? u : Math.min(Math.max(-u, -f), u),
                                        l = -s * s + h * (h + 2 * f) + m);
                    else
                        h = d > 0 ? -u : u,
                            s = Math.max(0, -(d * h + p)),
                            l = -s * s + h * (h + 2 * f) + m;
                    return o && o.copy(this.direction).multiplyScalar(s).add(this.origin),
                        a && a.copy(e).multiplyScalar(h).add(t),
                        l
                }
            }(),
            intersectSphere: function () {
                var t = new s;
                return function (e, i) {
                    t.subVectors(e.center, this.origin);
                    var n = t.dot(this.direction)
                        , r = t.dot(t) - n * n
                        , o = e.radius * e.radius;
                    if (r > o)
                        return null;
                    var a = Math.sqrt(o - r)
                        , s = n - a
                        , h = n + a;
                    return s < 0 && h < 0 ? null : s < 0 ? this.at(h, i) : this.at(s, i)
                }
            }(),
            intersectsSphere: function (t) {
                return this.distanceToPoint(t.center) <= t.radius
            },
            distanceToPlane: function (t) {
                var e = t.normal.dot(this.direction);
                if (0 === e)
                    return 0 === t.distanceToPoint(this.origin) ? 0 : null;
                var i = -(this.origin.dot(t.normal) + t.constant) / e;
                return i >= 0 ? i : null
            },
            intersectPlane: function (t, e) {
                var i = this.distanceToPlane(t);
                return null === i ? null : this.at(i, e)
            },
            intersectsPlane: function (t) {
                var e = t.distanceToPoint(this.origin);
                return 0 === e || t.normal.dot(this.direction) * e < 0
            },
            intersectBox: function (t, e) {
                var i, n, r, o, a, s, h = 1 / this.direction.x, l = 1 / this.direction.y, c = 1 / this.direction.z, u = this.origin;
                return h >= 0 ? (i = (t.min.x - u.x) * h,
                    n = (t.max.x - u.x) * h) : (i = (t.max.x - u.x) * h,
                        n = (t.min.x - u.x) * h),
                    l >= 0 ? (r = (t.min.y - u.y) * l,
                        o = (t.max.y - u.y) * l) : (r = (t.max.y - u.y) * l,
                            o = (t.min.y - u.y) * l),
                    i > o || r > n ? null : ((r > i || i !== i) && (i = r),
                        (o < n || n !== n) && (n = o),
                        c >= 0 ? (a = (t.min.z - u.z) * c,
                            s = (t.max.z - u.z) * c) : (a = (t.max.z - u.z) * c,
                                s = (t.min.z - u.z) * c),
                        i > s || a > n ? null : ((a > i || i !== i) && (i = a),
                            (s < n || n !== n) && (n = s),
                            n < 0 ? null : this.at(i >= 0 ? i : n, e)))
            },
            intersectsBox: function () {
                var t = new s;
                return function (e) {
                    return null !== this.intersectBox(e, t)
                }
            }(),
            intersectTriangle: function () {
                var t = new s
                    , e = new s
                    , i = new s
                    , n = new s;
                return function (r, o, a, s, h) {
                    e.subVectors(o, r),
                        i.subVectors(a, r),
                        n.crossVectors(e, i);
                    var l, c = this.direction.dot(n);
                    if (c > 0) {
                        if (s)
                            return null;
                        l = 1
                    } else {
                        if (!(c < 0))
                            return null;
                        l = -1,
                            c = -c
                    }
                    t.subVectors(this.origin, r);
                    var u = l * this.direction.dot(i.crossVectors(t, i));
                    if (u < 0)
                        return null;
                    var d = l * this.direction.dot(e.cross(t));
                    if (d < 0)
                        return null;
                    if (u + d > c)
                        return null;
                    var p = -l * t.dot(n);
                    return p < 0 ? null : this.at(p / c, h)
                }
            }(),
            applyMatrix4: function (t) {
                return this.origin.applyMatrix4(t),
                    this.direction.transformDirection(t),
                    this
            },
            equals: function (t) {
                return t.origin.equals(this.origin) && t.direction.equals(this.direction)
            }
        }),
        Object.assign(Ut.prototype, {
            set: function (t, e) {
                return this.start.copy(t),
                    this.end.copy(e),
                    this
            },
            clone: function () {
                return (new this.constructor).copy(this)
            },
            copy: function (t) {
                return this.start.copy(t.start),
                    this.end.copy(t.end),
                    this
            },
            getCenter: function (t) {
                return (t || new s).addVectors(this.start, this.end).multiplyScalar(.5)
            },
            delta: function (t) {
                return (t || new s).subVectors(this.end, this.start)
            },
            distanceSq: function () {
                return this.start.distanceToSquared(this.end)
            },
            distance: function () {
                return this.start.distanceTo(this.end)
            },
            at: function (t, e) {
                var i = e || new s;
                return this.delta(i).multiplyScalar(t).add(this.start)
            },
            closestPointToPointParameter: function () {
                var t = new s
                    , e = new s;
                return function (i, n) {
                    t.subVectors(i, this.start),
                        e.subVectors(this.end, this.start);
                    var r = e.dot(e)
                        , o = e.dot(t)
                        , a = o / r;
                    return n && (a = sh.clamp(a, 0, 1)),
                        a
                }
            }(),
            closestPointToPoint: function (t, e, i) {
                var n = this.closestPointToPointParameter(t, e)
                    , r = i || new s;
                return this.delta(r).multiplyScalar(n).add(this.start)
            },
            applyMatrix4: function (t) {
                return this.start.applyMatrix4(t),
                    this.end.applyMatrix4(t),
                    this
            },
            equals: function (t) {
                return t.start.equals(this.start) && t.end.equals(this.end)
            }
        }),
        Object.assign(Bt, {
            normal: function () {
                var t = new s;
                return function (e, i, n, r) {
                    var o = r || new s;
                    o.subVectors(n, i),
                        t.subVectors(e, i),
                        o.cross(t);
                    var a = o.lengthSq();
                    return a > 0 ? o.multiplyScalar(1 / Math.sqrt(a)) : o.set(0, 0, 0)
                }
            }(),
            barycoordFromPoint: function () {
                var t = new s
                    , e = new s
                    , i = new s;
                return function (n, r, o, a, h) {
                    t.subVectors(a, r),
                        e.subVectors(o, r),
                        i.subVectors(n, r);
                    var l = t.dot(t)
                        , c = t.dot(e)
                        , u = t.dot(i)
                        , d = e.dot(e)
                        , p = e.dot(i)
                        , f = l * d - c * c
                        , m = h || new s;
                    if (0 === f)
                        return m.set(-2, -1, -1);
                    var v = 1 / f
                        , g = (d * u - c * p) * v
                        , _ = (l * p - c * u) * v;
                    return m.set(1 - g - _, _, g)
                }
            }(),
            containsPoint: function () {
                var t = new s;
                return function (e, i, n, r) {
                    var o = Bt.barycoordFromPoint(e, i, n, r, t);
                    return o.x >= 0 && o.y >= 0 && o.x + o.y <= 1
                }
            }()
        }),
        Object.assign(Bt.prototype, {
            set: function (t, e, i) {
                return this.a.copy(t),
                    this.b.copy(e),
                    this.c.copy(i),
                    this
            },
            setFromPointsAndIndices: function (t, e, i, n) {
                return this.a.copy(t[e]),
                    this.b.copy(t[i]),
                    this.c.copy(t[n]),
                    this
            },
            clone: function () {
                return (new this.constructor).copy(this)
            },
            copy: function (t) {
                return this.a.copy(t.a),
                    this.b.copy(t.b),
                    this.c.copy(t.c),
                    this
            },
            area: function () {
                var t = new s
                    , e = new s;
                return function () {
                    return t.subVectors(this.c, this.b),
                        e.subVectors(this.a, this.b),
                        .5 * t.cross(e).length()
                }
            }(),
            midpoint: function (t) {
                return (t || new s).addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3)
            },
            normal: function (t) {
                return Bt.normal(this.a, this.b, this.c, t)
            },
            plane: function (t) {
                return (t || new ot).setFromCoplanarPoints(this.a, this.b, this.c)
            },
            barycoordFromPoint: function (t, e) {
                return Bt.barycoordFromPoint(t, this.a, this.b, this.c, e)
            },
            containsPoint: function (t) {
                return Bt.containsPoint(t, this.a, this.b, this.c)
            },
            closestPointToPoint: function () {
                var t = new ot
                    , e = [new Ut, new Ut, new Ut]
                    , i = new s
                    , n = new s;
                return function (r, o) {
                    var a = o || new s
                        , h = 1 / 0;
                    if (t.setFromCoplanarPoints(this.a, this.b, this.c),
                        t.projectPoint(r, i),
                        !0 === this.containsPoint(i))
                        a.copy(i);
                    else {
                        e[0].set(this.a, this.b),
                            e[1].set(this.b, this.c),
                            e[2].set(this.c, this.a);
                        for (var l = 0; l < e.length; l++) {
                            e[l].closestPointToPoint(i, !0, n);
                            var c = i.distanceToSquared(n);
                            c < h && (h = c,
                                a.copy(n))
                        }
                    }
                    return a
                }
            }(),
            equals: function (t) {
                return t.a.equals(this.a) && t.b.equals(this.b) && t.c.equals(this.c)
            }
        }),
        Ft.prototype = Object.assign(Object.create(ut.prototype), {
            constructor: Ft,
            isMesh: !0,
            setDrawMode: function (t) {
                this.drawMode = t
            },
            copy: function (t) {
                return ut.prototype.copy.call(this, t),
                    this.drawMode = t.drawMode,
                    void 0 !== t.morphTargetInfluences && (this.morphTargetInfluences = t.morphTargetInfluences.slice()),
                    void 0 !== t.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, t.morphTargetDictionary)),
                    this
            },
            updateMorphTargets: function () {
                var t, e, i, n = this.geometry;
                if (n.isBufferGeometry) {
                    var r = n.morphAttributes
                        , o = Object.keys(r);
                    if (o.length > 0) {
                        var a = r[o[0]];
                        if (void 0 !== a)
                            for (this.morphTargetInfluences = [],
                                this.morphTargetDictionary = {},
                                t = 0,
                                e = a.length; t < e; t++)
                                i = a[t].name || String(t),
                                    this.morphTargetInfluences.push(0),
                                    this.morphTargetDictionary[i] = t
                    }
                } else {
                    var s = n.morphTargets;
                    if (void 0 !== s && s.length > 0)
                        for (this.morphTargetInfluences = [],
                            this.morphTargetDictionary = {},
                            t = 0,
                            e = s.length; t < e; t++)
                            i = s[t].name || String(t),
                                this.morphTargetInfluences.push(0),
                                this.morphTargetDictionary[i] = t
                }
            },
            raycast: function () {
                function t(t, e, i, n, r, o, a) {
                    return Bt.barycoordFromPoint(t, e, i, n, _),
                        r.multiplyScalar(_.x),
                        o.multiplyScalar(_.y),
                        a.multiplyScalar(_.z),
                        r.add(o).add(a),
                        r.clone()
                }
                function e(t, e, i, n, r, o, a, s) {
                    if (null === (e.side === ia ? n.intersectTriangle(a, o, r, !0, s) : n.intersectTriangle(r, o, a, e.side !== na, s)))
                        return null;
                    x.copy(s),
                        x.applyMatrix4(t.matrixWorld);
                    var h = i.ray.origin.distanceTo(x);
                    return h < i.near || h > i.far ? null : {
                        distance: h,
                        point: x.clone(),
                        object: t
                    }
                }
                function i(i, n, r, o, a, s, h, d) {
                    l.fromBufferAttribute(o, s),
                        c.fromBufferAttribute(o, h),
                        u.fromBufferAttribute(o, d);
                    var p = e(i, i.material, n, r, l, c, u, y);
                    return p && (a && (m.fromBufferAttribute(a, s),
                        v.fromBufferAttribute(a, h),
                        g.fromBufferAttribute(a, d),
                        p.uv = t(y, l, c, u, m, v, g)),
                        p.face = new ft(s, h, d, Bt.normal(l, c, u)),
                        p.faceIndex = s),
                        p
                }
                var n = new o
                    , a = new Nt
                    , h = new rt
                    , l = new s
                    , c = new s
                    , u = new s
                    , d = new s
                    , p = new s
                    , f = new s
                    , m = new r
                    , v = new r
                    , g = new r
                    , _ = new s
                    , y = new s
                    , x = new s;
                return function (r, o) {
                    var s = this.geometry
                        , _ = this.material
                        , x = this.matrixWorld;
                    if (void 0 !== _ && (null === s.boundingSphere && s.computeBoundingSphere(),
                        h.copy(s.boundingSphere),
                        h.applyMatrix4(x),
                        !1 !== r.ray.intersectsSphere(h) && (n.getInverse(x),
                            a.copy(r.ray).applyMatrix4(n),
                            null === s.boundingBox || !1 !== a.intersectsBox(s.boundingBox)))) {
                        var b;
                        if (s.isBufferGeometry) {
                            var w, S, E, T, M, A = s.index, P = s.attributes.position, R = s.attributes.uv;
                            if (null !== A)
                                for (T = 0,
                                    M = A.count; T < M; T += 3)
                                    w = A.getX(T),
                                        S = A.getX(T + 1),
                                        E = A.getX(T + 2),
                                        (b = i(this, r, a, P, R, w, S, E)) && (b.faceIndex = Math.floor(T / 3),
                                            o.push(b));
                            else if (void 0 !== P)
                                for (T = 0,
                                    M = P.count; T < M; T += 3)
                                    w = T,
                                        S = T + 1,
                                        E = T + 2,
                                        (b = i(this, r, a, P, R, w, S, E)) && (b.index = w,
                                            o.push(b))
                        } else if (s.isGeometry) {
                            var L, O, I, C, D = Array.isArray(_), N = s.vertices, U = s.faces, B = s.faceVertexUvs[0];
                            B.length > 0 && (C = B);
                            for (var F = 0, z = U.length; F < z; F++) {
                                var G = U[F]
                                    , j = D ? _[G.materialIndex] : _;
                                if (void 0 !== j) {
                                    if (L = N[G.a],
                                        O = N[G.b],
                                        I = N[G.c],
                                        !0 === j.morphTargets) {
                                        var k = s.morphTargets
                                            , H = this.morphTargetInfluences;
                                        l.set(0, 0, 0),
                                            c.set(0, 0, 0),
                                            u.set(0, 0, 0);
                                        for (var V = 0, W = k.length; V < W; V++) {
                                            var X = H[V];
                                            if (0 !== X) {
                                                var Y = k[V].vertices;
                                                l.addScaledVector(d.subVectors(Y[G.a], L), X),
                                                    c.addScaledVector(p.subVectors(Y[G.b], O), X),
                                                    u.addScaledVector(f.subVectors(Y[G.c], I), X)
                                            }
                                        }
                                        l.add(L),
                                            c.add(O),
                                            u.add(I),
                                            L = l,
                                            O = c,
                                            I = u
                                    }
                                    if (b = e(this, j, r, a, L, O, I, y)) {
                                        if (C && C[F]) {
                                            var q = C[F];
                                            m.copy(q[0]),
                                                v.copy(q[1]),
                                                g.copy(q[2]),
                                                b.uv = t(y, L, O, I, m, v, g)
                                        }
                                        b.face = G,
                                            b.faceIndex = F,
                                            o.push(b)
                                    }
                                }
                            }
                        }
                    }
                }
            }(),
            clone: function () {
                return new this.constructor(this.geometry, this.material).copy(this)
            }
        });
    var Th = 0;
    ge.prototype = Object.assign(Object.create(dt.prototype), {
        constructor: ge,
        isPerspectiveCamera: !0,
        copy: function (t, e) {
            return dt.prototype.copy.call(this, t, e),
                this.fov = t.fov,
                this.zoom = t.zoom,
                this.near = t.near,
                this.far = t.far,
                this.focus = t.focus,
                this.aspect = t.aspect,
                this.view = null === t.view ? null : Object.assign({}, t.view),
                this.filmGauge = t.filmGauge,
                this.filmOffset = t.filmOffset,
                this
        },
        setFocalLength: function (t) {
            var e = .5 * this.getFilmHeight() / t;
            this.fov = 2 * sh.RAD2DEG * Math.atan(e),
                this.updateProjectionMatrix()
        },
        getFocalLength: function () {
            var t = Math.tan(.5 * sh.DEG2RAD * this.fov);
            return .5 * this.getFilmHeight() / t
        },
        getEffectiveFOV: function () {
            return 2 * sh.RAD2DEG * Math.atan(Math.tan(.5 * sh.DEG2RAD * this.fov) / this.zoom)
        },
        getFilmWidth: function () {
            return this.filmGauge * Math.min(this.aspect, 1)
        },
        getFilmHeight: function () {
            return this.filmGauge / Math.max(this.aspect, 1)
        },
        setViewOffset: function (t, e, i, n, r, o) {
            this.aspect = t / e,
                null === this.view && (this.view = {
                    enabled: !0,
                    fullWidth: 1,
                    fullHeight: 1,
                    offsetX: 0,
                    offsetY: 0,
                    width: 1,
                    height: 1
                }),
                this.view.enabled = !0,
                this.view.fullWidth = t,
                this.view.fullHeight = e,
                this.view.offsetX = i,
                this.view.offsetY = n,
                this.view.width = r,
                this.view.height = o,
                this.updateProjectionMatrix()
        },
        clearViewOffset: function () {
            null !== this.view && (this.view.enabled = !1),
                this.updateProjectionMatrix()
        },
        updateProjectionMatrix: function () {
            var t = this.near
                , e = t * Math.tan(.5 * sh.DEG2RAD * this.fov) / this.zoom
                , i = 2 * e
                , n = this.aspect * i
                , r = -.5 * n
                , o = this.view;
            if (null !== this.view && this.view.enabled) {
                var a = o.fullWidth
                    , s = o.fullHeight;
                r += o.offsetX * n / a,
                    e -= o.offsetY * i / s,
                    n *= o.width / a,
                    i *= o.height / s
            }
            var h = this.filmOffset;
            0 !== h && (r += t * h / this.getFilmWidth()),
                this.projectionMatrix.makePerspective(r, r + n, e, e - i, t, this.far)
        },
        toJSON: function (t) {
            var e = ut.prototype.toJSON.call(this, t);
            return e.object.fov = this.fov,
                e.object.zoom = this.zoom,
                e.object.near = this.near,
                e.object.far = this.far,
                e.object.focus = this.focus,
                e.object.aspect = this.aspect,
                null !== this.view && (e.object.view = Object.assign({}, this.view)),
                e.object.filmGauge = this.filmGauge,
                e.object.filmOffset = this.filmOffset,
                e
        }
    }),
        _e.prototype = Object.assign(Object.create(ge.prototype), {
            constructor: _e,
            isArrayCamera: !0
        }),
        Ee.prototype.isFogExp2 = !0,
        Ee.prototype.clone = function () {
            return new Ee(this.color.getHex(), this.density)
        }
        ,
        Ee.prototype.toJSON = function () {
            return {
                type: "FogExp2",
                color: this.color.getHex(),
                density: this.density
            }
        }
        ,
        Te.prototype.isFog = !0,
        Te.prototype.clone = function () {
            return new Te(this.color.getHex(), this.near, this.far)
        }
        ,
        Te.prototype.toJSON = function () {
            return {
                type: "Fog",
                color: this.color.getHex(),
                near: this.near,
                far: this.far
            }
        }
        ,
        Me.prototype = Object.assign(Object.create(ut.prototype), {
            constructor: Me,
            copy: function (t, e) {
                return ut.prototype.copy.call(this, t, e),
                    null !== t.background && (this.background = t.background.clone()),
                    null !== t.fog && (this.fog = t.fog.clone()),
                    null !== t.overrideMaterial && (this.overrideMaterial = t.overrideMaterial.clone()),
                    this.autoUpdate = t.autoUpdate,
                    this.matrixAutoUpdate = t.matrixAutoUpdate,
                    this
            },
            toJSON: function (t) {
                var e = ut.prototype.toJSON.call(this, t);
                return null !== this.background && (e.object.background = this.background.toJSON(t)),
                    null !== this.fog && (e.object.fog = this.fog.toJSON()),
                    e
            }
        }),
        Ae.prototype = Object.assign(Object.create(ut.prototype), {
            constructor: Ae,
            isLensFlare: !0,
            copy: function (t) {
                ut.prototype.copy.call(this, t),
                    this.positionScreen.copy(t.positionScreen),
                    this.customUpdateCallback = t.customUpdateCallback;
                for (var e = 0, i = t.lensFlares.length; e < i; e++)
                    this.lensFlares.push(t.lensFlares[e]);
                return this
            },
            add: function (t, e, i, n, r, o) {
                void 0 === e && (e = -1),
                    void 0 === i && (i = 0),
                    void 0 === o && (o = 1),
                    void 0 === r && (r = new Z(16777215)),
                    void 0 === n && (n = ca),
                    i = Math.min(i, Math.max(0, i)),
                    this.lensFlares.push({
                        texture: t,
                        size: e,
                        distance: i,
                        x: 0,
                        y: 0,
                        z: 0,
                        scale: 1,
                        rotation: 0,
                        opacity: o,
                        color: r,
                        blending: n
                    })
            },
            updateLensFlares: function () {
                var t, e, i = this.lensFlares.length, n = 2 * -this.positionScreen.x, r = 2 * -this.positionScreen.y;
                for (t = 0; t < i; t++)
                    e = this.lensFlares[t],
                        e.x = this.positionScreen.x + n * e.distance,
                        e.y = this.positionScreen.y + r * e.distance,
                        e.wantedRotation = e.x * Math.PI * .25,
                        e.rotation += .25 * (e.wantedRotation - e.rotation)
            }
        }),
        Pe.prototype = Object.create(tt.prototype),
        Pe.prototype.constructor = Pe,
        Pe.prototype.isSpriteMaterial = !0,
        Pe.prototype.copy = function (t) {
            return tt.prototype.copy.call(this, t),
                this.color.copy(t.color),
                this.map = t.map,
                this.rotation = t.rotation,
                this
        }
        ,
        Re.prototype = Object.assign(Object.create(ut.prototype), {
            constructor: Re,
            isSprite: !0,
            raycast: function () {
                var t = new s
                    , e = new s
                    , i = new s;
                return function (n, r) {
                    e.setFromMatrixPosition(this.matrixWorld),
                        n.ray.closestPointToPoint(e, t),
                        i.setFromMatrixScale(this.matrixWorld);
                    var o = i.x * i.y / 4;
                    if (!(e.distanceToSquared(t) > o)) {
                        var a = n.ray.origin.distanceTo(t);
                        a < n.near || a > n.far || r.push({
                            distance: a,
                            point: t.clone(),
                            face: null,
                            object: this
                        })
                    }
                }
            }(),
            clone: function () {
                return new this.constructor(this.material).copy(this)
            }
        }),
        Le.prototype = Object.assign(Object.create(ut.prototype), {
            constructor: Le,
            copy: function (t) {
                ut.prototype.copy.call(this, t, !1);
                for (var e = t.levels, i = 0, n = e.length; i < n; i++) {
                    var r = e[i];
                    this.addLevel(r.object.clone(), r.distance)
                }
                return this
            },
            addLevel: function (t, e) {
                void 0 === e && (e = 0),
                    e = Math.abs(e);
                for (var i = this.levels, n = 0; n < i.length && !(e < i[n].distance); n++)
                    ;
                i.splice(n, 0, {
                    distance: e,
                    object: t
                }),
                    this.add(t)
            },
            getObjectForDistance: function (t) {
                for (var e = this.levels, i = 1, n = e.length; i < n && !(t < e[i].distance); i++)
                    ;
                return e[i - 1].object
            },
            raycast: function () {
                var t = new s;
                return function (e, i) {
                    t.setFromMatrixPosition(this.matrixWorld);
                    var n = e.ray.origin.distanceTo(t);
                    this.getObjectForDistance(n).raycast(e, i)
                }
            }(),
            update: function () {
                var t = new s
                    , e = new s;
                return function (i) {
                    var n = this.levels;
                    if (n.length > 1) {
                        t.setFromMatrixPosition(i.matrixWorld),
                            e.setFromMatrixPosition(this.matrixWorld);
                        var r = t.distanceTo(e);
                        n[0].object.visible = !0;
                        for (var o = 1, a = n.length; o < a && r >= n[o].distance; o++)
                            n[o - 1].object.visible = !1,
                                n[o].object.visible = !0;
                        for (; o < a; o++)
                            n[o].object.visible = !1
                    }
                }
            }(),
            toJSON: function (t) {
                var e = ut.prototype.toJSON.call(this, t);
                e.object.levels = [];
                for (var i = this.levels, n = 0, r = i.length; n < r; n++) {
                    var o = i[n];
                    e.object.levels.push({
                        object: o.object.uuid,
                        distance: o.distance
                    })
                }
                return e
            }
        }),
        Object.assign(Oe.prototype, {
            calculateInverses: function () {
                this.boneInverses = [];
                for (var t = 0, e = this.bones.length; t < e; t++) {
                    var i = new o;
                    this.bones[t] && i.getInverse(this.bones[t].matrixWorld),
                        this.boneInverses.push(i)
                }
            },
            pose: function () {
                var t, e, i;
                for (e = 0,
                    i = this.bones.length; e < i; e++)
                    (t = this.bones[e]) && t.matrixWorld.getInverse(this.boneInverses[e]);
                for (e = 0,
                    i = this.bones.length; e < i; e++)
                    (t = this.bones[e]) && (t.parent && t.parent.isBone ? (t.matrix.getInverse(t.parent.matrixWorld),
                        t.matrix.multiply(t.matrixWorld)) : t.matrix.copy(t.matrixWorld),
                        t.matrix.decompose(t.position, t.quaternion, t.scale))
            },
            update: function () {
                var t = new o
                    , e = new o;
                return function () {
                    for (var i = this.bones, n = this.boneInverses, r = this.boneMatrices, o = this.boneTexture, a = 0, s = i.length; a < s; a++) {
                        var h = i[a] ? i[a].matrixWorld : e;
                        t.multiplyMatrices(h, n[a]),
                            t.toArray(r, 16 * a)
                    }
                    void 0 !== o && (o.needsUpdate = !0)
                }
            }(),
            clone: function () {
                return new Oe(this.bones, this.boneInverses)
            }
        }),
        Ie.prototype = Object.assign(Object.create(ut.prototype), {
            constructor: Ie,
            isBone: !0
        }),
        Ce.prototype = Object.assign(Object.create(Ft.prototype), {
            constructor: Ce,
            isSkinnedMesh: !0,
            initBones: function () {
                var t, e, i, n, r = [];
                if (this.geometry && void 0 !== this.geometry.bones) {
                    for (i = 0,
                        n = this.geometry.bones.length; i < n; i++)
                        e = this.geometry.bones[i],
                            t = new Ie,
                            r.push(t),
                            t.name = e.name,
                            t.position.fromArray(e.pos),
                            t.quaternion.fromArray(e.rotq),
                            void 0 !== e.scl && t.scale.fromArray(e.scl);
                    for (i = 0,
                        n = this.geometry.bones.length; i < n; i++)
                        e = this.geometry.bones[i],
                            -1 !== e.parent && null !== e.parent && void 0 !== r[e.parent] ? r[e.parent].add(r[i]) : this.add(r[i])
                }
                return this.updateMatrixWorld(!0),
                    r
            },
            bind: function (t, e) {
                this.skeleton = t,
                    void 0 === e && (this.updateMatrixWorld(!0),
                        this.skeleton.calculateInverses(),
                        e = this.matrixWorld),
                    this.bindMatrix.copy(e),
                    this.bindMatrixInverse.getInverse(e)
            },
            pose: function () {
                this.skeleton.pose()
            },
            normalizeSkinWeights: function () {
                var t, e;
                if (this.geometry && this.geometry.isGeometry)
                    for (e = 0; e < this.geometry.skinWeights.length; e++) {
                        var i = this.geometry.skinWeights[e];
                        t = 1 / i.manhattanLength(),
                            t !== 1 / 0 ? i.multiplyScalar(t) : i.set(1, 0, 0, 0)
                    }
                else if (this.geometry && this.geometry.isBufferGeometry) {
                    var n = new c
                        , r = this.geometry.attributes.skinWeight;
                    for (e = 0; e < r.count; e++)
                        n.x = r.getX(e),
                            n.y = r.getY(e),
                            n.z = r.getZ(e),
                            n.w = r.getW(e),
                            t = 1 / n.manhattanLength(),
                            t !== 1 / 0 ? n.multiplyScalar(t) : n.set(1, 0, 0, 0),
                            r.setXYZW(e, n.x, n.y, n.z, n.w)
                }
            },
            updateMatrixWorld: function (t) {
                Ft.prototype.updateMatrixWorld.call(this, t),
                    "attached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.matrixWorld) : "detached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.bindMatrix) : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode)
            },
            clone: function () {
                return new this.constructor(this.geometry, this.material).copy(this)
            }
        }),
        De.prototype = Object.create(tt.prototype),
        De.prototype.constructor = De,
        De.prototype.isLineBasicMaterial = !0,
        De.prototype.copy = function (t) {
            return tt.prototype.copy.call(this, t),
                this.color.copy(t.color),
                this.linewidth = t.linewidth,
                this.linecap = t.linecap,
                this.linejoin = t.linejoin,
                this
        }
        ,
        Ne.prototype = Object.assign(Object.create(ut.prototype), {
            constructor: Ne,
            isLine: !0,
            raycast: function () {
                var t = new o
                    , e = new Nt
                    , i = new rt;
                return function (n, r) {
                    var o = n.linePrecision
                        , a = o * o
                        , h = this.geometry
                        , l = this.matrixWorld;
                    if (null === h.boundingSphere && h.computeBoundingSphere(),
                        i.copy(h.boundingSphere),
                        i.applyMatrix4(l),
                        !1 !== n.ray.intersectsSphere(i)) {
                        t.getInverse(l),
                            e.copy(n.ray).applyMatrix4(t);
                        var c = new s
                            , u = new s
                            , d = new s
                            , p = new s
                            , f = this && this.isLineSegments ? 2 : 1;
                        if (h.isBufferGeometry) {
                            var m = h.index
                                , v = h.attributes
                                , g = v.position.array;
                            if (null !== m)
                                for (var _ = m.array, y = 0, x = _.length - 1; y < x; y += f) {
                                    var b = _[y]
                                        , w = _[y + 1];
                                    c.fromArray(g, 3 * b),
                                        u.fromArray(g, 3 * w);
                                    var S = e.distanceSqToSegment(c, u, p, d);
                                    if (!(S > a)) {
                                        p.applyMatrix4(this.matrixWorld);
                                        var E = n.ray.origin.distanceTo(p);
                                        E < n.near || E > n.far || r.push({
                                            distance: E,
                                            point: d.clone().applyMatrix4(this.matrixWorld),
                                            index: y,
                                            face: null,
                                            faceIndex: null,
                                            object: this
                                        })
                                    }
                                }
                            else
                                for (var y = 0, x = g.length / 3 - 1; y < x; y += f) {
                                    c.fromArray(g, 3 * y),
                                        u.fromArray(g, 3 * y + 3);
                                    var S = e.distanceSqToSegment(c, u, p, d);
                                    if (!(S > a)) {
                                        p.applyMatrix4(this.matrixWorld);
                                        var E = n.ray.origin.distanceTo(p);
                                        E < n.near || E > n.far || r.push({
                                            distance: E,
                                            point: d.clone().applyMatrix4(this.matrixWorld),
                                            index: y,
                                            face: null,
                                            faceIndex: null,
                                            object: this
                                        })
                                    }
                                }
                        } else if (h.isGeometry)
                            for (var T = h.vertices, M = T.length, y = 0; y < M - 1; y += f) {
                                var S = e.distanceSqToSegment(T[y], T[y + 1], p, d);
                                if (!(S > a)) {
                                    p.applyMatrix4(this.matrixWorld);
                                    var E = n.ray.origin.distanceTo(p);
                                    E < n.near || E > n.far || r.push({
                                        distance: E,
                                        point: d.clone().applyMatrix4(this.matrixWorld),
                                        index: y,
                                        face: null,
                                        faceIndex: null,
                                        object: this
                                    })
                                }
                            }
                    }
                }
            }(),
            clone: function () {
                return new this.constructor(this.geometry, this.material).copy(this)
            }
        }),
        Ue.prototype = Object.assign(Object.create(Ne.prototype), {
            constructor: Ue,
            isLineSegments: !0
        }),
        Be.prototype = Object.assign(Object.create(Ne.prototype), {
            constructor: Be,
            isLineLoop: !0
        }),
        Fe.prototype = Object.create(tt.prototype),
        Fe.prototype.constructor = Fe,
        Fe.prototype.isPointsMaterial = !0,
        Fe.prototype.copy = function (t) {
            return tt.prototype.copy.call(this, t),
                this.color.copy(t.color),
                this.map = t.map,
                this.size = t.size,
                this.sizeAttenuation = t.sizeAttenuation,
                this
        }
        ,
        ze.prototype = Object.assign(Object.create(ut.prototype), {
            constructor: ze,
            isPoints: !0,
            raycast: function () {
                var t = new o
                    , e = new Nt
                    , i = new rt;
                return function (n, r) {
                    function o(t, i) {
                        var o = e.distanceSqToPoint(t);
                        if (o < d) {
                            var s = e.closestPointToPoint(t);
                            s.applyMatrix4(l);
                            var h = n.ray.origin.distanceTo(s);
                            if (h < n.near || h > n.far)
                                return;
                            r.push({
                                distance: h,
                                distanceToRay: Math.sqrt(o),
                                point: s.clone(),
                                index: i,
                                face: null,
                                object: a
                            })
                        }
                    }
                    var a = this
                        , h = this.geometry
                        , l = this.matrixWorld
                        , c = n.params.Points.threshold;
                    if (null === h.boundingSphere && h.computeBoundingSphere(),
                        i.copy(h.boundingSphere),
                        i.applyMatrix4(l),
                        i.radius += c,
                        !1 !== n.ray.intersectsSphere(i)) {
                        t.getInverse(l),
                            e.copy(n.ray).applyMatrix4(t);
                        var u = c / ((this.scale.x + this.scale.y + this.scale.z) / 3)
                            , d = u * u
                            , p = new s;
                        if (h.isBufferGeometry) {
                            var f = h.index
                                , m = h.attributes
                                , v = m.position.array;
                            if (null !== f)
                                for (var g = f.array, _ = 0, y = g.length; _ < y; _++) {
                                    var x = g[_];
                                    p.fromArray(v, 3 * x),
                                        o(p, x)
                                }
                            else
                                for (var _ = 0, b = v.length / 3; _ < b; _++)
                                    p.fromArray(v, 3 * _),
                                        o(p, _)
                        } else
                            for (var w = h.vertices, _ = 0, b = w.length; _ < b; _++)
                                o(w[_], _)
                    }
                }
            }(),
            clone: function () {
                return new this.constructor(this.geometry, this.material).copy(this)
            }
        }),
        Ge.prototype = Object.assign(Object.create(ut.prototype), {
            constructor: Ge,
            isGroup: !0
        }),
        je.prototype = Object.assign(Object.create(l.prototype), {
            constructor: je,
            isVideoTexture: !0,
            update: function () {
                var t = this.image;
                t.readyState >= t.HAVE_CURRENT_DATA && (this.needsUpdate = !0)
            }
        }),
        ke.prototype = Object.create(l.prototype),
        ke.prototype.constructor = ke,
        ke.prototype.isCompressedTexture = !0,
        He.prototype = Object.create(l.prototype),
        He.prototype.constructor = He,
        He.prototype.isDepthTexture = !0,
        Ve.prototype = Object.create(Pt.prototype),
        Ve.prototype.constructor = Ve,
        We.prototype = Object.create(mt.prototype),
        We.prototype.constructor = We,
        Xe.prototype = Object.create(Pt.prototype),
        Xe.prototype.constructor = Xe,
        Ye.prototype = Object.create(mt.prototype),
        Ye.prototype.constructor = Ye,
        qe.prototype = Object.create(Pt.prototype),
        qe.prototype.constructor = qe,
        Ze.prototype = Object.create(mt.prototype),
        Ze.prototype.constructor = Ze,
        Je.prototype = Object.create(qe.prototype),
        Je.prototype.constructor = Je,
        Ke.prototype = Object.create(mt.prototype),
        Ke.prototype.constructor = Ke,
        Qe.prototype = Object.create(qe.prototype),
        Qe.prototype.constructor = Qe,
        $e.prototype = Object.create(mt.prototype),
        $e.prototype.constructor = $e,
        ti.prototype = Object.create(qe.prototype),
        ti.prototype.constructor = ti,
        ei.prototype = Object.create(mt.prototype),
        ei.prototype.constructor = ei,
        ii.prototype = Object.create(qe.prototype),
        ii.prototype.constructor = ii,
        ni.prototype = Object.create(mt.prototype),
        ni.prototype.constructor = ni,
        ri.prototype = Object.create(Pt.prototype),
        ri.prototype.constructor = ri,
        oi.prototype = Object.create(mt.prototype),
        oi.prototype.constructor = oi,
        ai.prototype = Object.create(Pt.prototype),
        ai.prototype.constructor = ai,
        si.prototype = Object.create(mt.prototype),
        si.prototype.constructor = si,
        hi.prototype = Object.create(Pt.prototype),
        hi.prototype.constructor = hi;
    var Mh = {
        triangulate: function (t, e, i) {
            i = i || 2;
            var n = e && e.length
                , r = n ? e[0] * i : t.length
                , o = li(t, 0, r, i, !0)
                , a = [];
            if (!o)
                return a;
            var s, h, l, c, u, d, p;
            if (n && (o = vi(t, e, o, i)),
                t.length > 80 * i) {
                s = l = t[0],
                    h = c = t[1];
                for (var f = i; f < r; f += i)
                    u = t[f],
                        d = t[f + 1],
                        u < s && (s = u),
                        d < h && (h = d),
                        u > l && (l = u),
                        d > c && (c = d);
                p = Math.max(l - s, c - h),
                    p = 0 !== p ? 1 / p : 0
            }
            return ui(o, a, i, s, h, p),
                a
        }
    }
        , Ah = {
            area: function (t) {
                for (var e = t.length, i = 0, n = e - 1, r = 0; r < e; n = r++)
                    i += t[n].x * t[r].y - t[r].x * t[n].y;
                return .5 * i
            },
            isClockWise: function (t) {
                return Ah.area(t) < 0
            },
            triangulateShape: function (t, e) {
                function i(t) {
                    var e = t.length;
                    e > 2 && t[e - 1].equals(t[0]) && t.pop()
                }
                function n(t, e) {
                    for (var i = 0; i < e.length; i++)
                        t.push(e[i].x),
                            t.push(e[i].y)
                }
                var r = []
                    , o = []
                    , a = [];
                i(t),
                    n(r, t);
                var s = t.length;
                for (e.forEach(i),
                    l = 0; l < e.length; l++)
                    o.push(s),
                        s += e[l].length,
                        n(r, e[l]);
                for (var h = Mh.triangulate(r, o), l = 0; l < h.length; l += 3)
                    a.push(h.slice(l, l + 3));
                return a
            }
        };
    Bi.prototype = Object.create(mt.prototype),
        Bi.prototype.constructor = Bi,
        Fi.prototype = Object.create(Pt.prototype),
        Fi.prototype.constructor = Fi,
        Fi.prototype.getArrays = function () {
            var t = this.getAttribute("position")
                , e = t ? Array.prototype.slice.call(t.array) : []
                , i = this.getAttribute("uv")
                , n = i ? Array.prototype.slice.call(i.array) : []
                , r = this.index;
            return {
                position: e,
                uv: n,
                index: r ? Array.prototype.slice.call(r.array) : []
            }
        }
        ,
        Fi.prototype.addShapeList = function (t, e) {
            var i = t.length;
            e.arrays = this.getArrays();
            for (var n = 0; n < i; n++) {
                var r = t[n];
                this.addShape(r, e)
            }
            this.setIndex(e.arrays.index),
                this.addAttribute("position", new Et(e.arrays.position, 3)),
                this.addAttribute("uv", new Et(e.arrays.uv, 2))
        }
        ,
        Fi.prototype.addShape = function (t, e) {
            function i(t, e, i) {
                return e || console.error("THREE.ExtrudeGeometry: vec does not exist"),
                    e.clone().multiplyScalar(i).add(t)
            }
            function n(t, e, i) {
                var n, o, a, s = t.x - e.x, h = t.y - e.y, l = i.x - t.x, c = i.y - t.y, u = s * s + h * h, d = s * c - h * l;
                if (Math.abs(d) > Number.EPSILON) {
                    var p = Math.sqrt(u)
                        , f = Math.sqrt(l * l + c * c)
                        , m = e.x - h / p
                        , v = e.y + s / p
                        , g = i.x - c / f
                        , _ = i.y + l / f
                        , y = ((g - m) * c - (_ - v) * l) / (s * c - h * l);
                    n = m + s * y - t.x,
                        o = v + h * y - t.y;
                    var x = n * n + o * o;
                    if (x <= 2)
                        return new r(n, o);
                    a = Math.sqrt(x / 2)
                } else {
                    var b = !1;
                    s > Number.EPSILON ? l > Number.EPSILON && (b = !0) : s < -Number.EPSILON ? l < -Number.EPSILON && (b = !0) : Math.sign(h) === Math.sign(c) && (b = !0),
                        b ? (n = -h,
                            o = s,
                            a = Math.sqrt(u)) : (n = s,
                                o = h,
                                a = Math.sqrt(u / 2))
                }
                return new r(n / a, o / a)
            }
            function o(t, e) {
                var i, n;
                for (J = t.length; --J >= 0;) {
                    i = J,
                        n = J - 1,
                        n < 0 && (n = t.length - 1);
                    var r = 0
                        , o = P + 2 * T;
                    for (r = 0; r < o; r++) {
                        var a = Y * r
                            , s = Y * (r + 1);
                        l(e + i + a, e + n + a, e + n + s, e + i + s)
                    }
                }
            }
            function a(t, e, i) {
                b.push(t),
                    b.push(e),
                    b.push(i)
            }
            function h(t, e, i) {
                c(t),
                    c(e),
                    c(i);
                var n = _.length / 3
                    , r = O.generateTopUV(N, _, n - 3, n - 2, n - 1);
                u(r[0]),
                    u(r[1]),
                    u(r[2])
            }
            function l(t, e, i, n) {
                c(t),
                    c(e),
                    c(n),
                    c(e),
                    c(i),
                    c(n);
                var r = _.length / 3
                    , o = O.generateSideWallUV(N, _, r - 6, r - 3, r - 2, r - 1);
                u(o[0]),
                    u(o[1]),
                    u(o[3]),
                    u(o[1]),
                    u(o[2]),
                    u(o[3])
            }
            function c(t) {
                y.push(_.length / 3),
                    _.push(b[3 * t + 0]),
                    _.push(b[3 * t + 1]),
                    _.push(b[3 * t + 2])
            }
            function u(t) {
                x.push(t.x),
                    x.push(t.y)
            }
            var d, p, f, m, v, g = e.arrays ? e.arrays : this.getArrays(), _ = g.position, y = g.index, x = g.uv, b = [], w = void 0 !== e.amount ? e.amount : 100, S = void 0 !== e.bevelThickness ? e.bevelThickness : 6, E = void 0 !== e.bevelSize ? e.bevelSize : S - 2, T = void 0 !== e.bevelSegments ? e.bevelSegments : 3, M = void 0 === e.bevelEnabled || e.bevelEnabled, A = void 0 !== e.curveSegments ? e.curveSegments : 12, P = void 0 !== e.steps ? e.steps : 1, R = e.extrudePath, L = !1, O = void 0 !== e.UVGenerator ? e.UVGenerator : Bi.WorldUVGenerator;
            R && (d = R.getSpacedPoints(P),
                L = !0,
                M = !1,
                p = void 0 !== e.frames ? e.frames : R.computeFrenetFrames(P, !1),
                f = new s,
                m = new s,
                v = new s),
                M || (T = 0,
                    S = 0,
                    E = 0);
            var I, C, D, N = this, U = t.extractPoints(A), B = U.shape, F = U.holes;
            if (!Ah.isClockWise(B))
                for (B = B.reverse(),
                    C = 0,
                    D = F.length; C < D; C++)
                    I = F[C],
                        Ah.isClockWise(I) && (F[C] = I.reverse());
            var z = Ah.triangulateShape(B, F)
                , G = B;
            for (C = 0,
                D = F.length; C < D; C++)
                I = F[C],
                    B = B.concat(I);
            for (var j, k, H, V, W, X, Y = B.length, q = z.length, Z = [], J = 0, K = G.length, Q = K - 1, $ = J + 1; J < K; J++,
                Q++,
                $++)
                Q === K && (Q = 0),
                    $ === K && ($ = 0),
                    Z[J] = n(G[J], G[Q], G[$]);
            var tt, et = [], it = Z.concat();
            for (C = 0,
                D = F.length; C < D; C++) {
                for (I = F[C],
                    tt = [],
                    J = 0,
                    K = I.length,
                    Q = K - 1,
                    $ = J + 1; J < K; J++,
                    Q++,
                    $++)
                    Q === K && (Q = 0),
                        $ === K && ($ = 0),
                        tt[J] = n(I[J], I[Q], I[$]);
                et.push(tt),
                    it = it.concat(tt)
            }
            for (j = 0; j < T; j++) {
                for (H = j / T,
                    V = S * Math.cos(H * Math.PI / 2),
                    k = E * Math.sin(H * Math.PI / 2),
                    J = 0,
                    K = G.length; J < K; J++)
                    W = i(G[J], Z[J], k),
                        a(W.x, W.y, -V);
                for (C = 0,
                    D = F.length; C < D; C++)
                    for (I = F[C],
                        tt = et[C],
                        J = 0,
                        K = I.length; J < K; J++)
                        W = i(I[J], tt[J], k),
                            a(W.x, W.y, -V)
            }
            for (k = E,
                J = 0; J < Y; J++)
                W = M ? i(B[J], it[J], k) : B[J],
                    L ? (m.copy(p.normals[0]).multiplyScalar(W.x),
                        f.copy(p.binormals[0]).multiplyScalar(W.y),
                        v.copy(d[0]).add(m).add(f),
                        a(v.x, v.y, v.z)) : a(W.x, W.y, 0);
            var nt;
            for (nt = 1; nt <= P; nt++)
                for (J = 0; J < Y; J++)
                    W = M ? i(B[J], it[J], k) : B[J],
                        L ? (m.copy(p.normals[nt]).multiplyScalar(W.x),
                            f.copy(p.binormals[nt]).multiplyScalar(W.y),
                            v.copy(d[nt]).add(m).add(f),
                            a(v.x, v.y, v.z)) : a(W.x, W.y, w / P * nt);
            for (j = T - 1; j >= 0; j--) {
                for (H = j / T,
                    V = S * Math.cos(H * Math.PI / 2),
                    k = E * Math.sin(H * Math.PI / 2),
                    J = 0,
                    K = G.length; J < K; J++)
                    W = i(G[J], Z[J], k),
                        a(W.x, W.y, w + V);
                for (C = 0,
                    D = F.length; C < D; C++)
                    for (I = F[C],
                        tt = et[C],
                        J = 0,
                        K = I.length; J < K; J++)
                        W = i(I[J], tt[J], k),
                            L ? a(W.x, W.y + d[P - 1].y, d[P - 1].x + V) : a(W.x, W.y, w + V)
            }
            !function () {
                var t = _.length / 3;
                if (M) {
                    var i = 0
                        , n = Y * i;
                    for (J = 0; J < q; J++)
                        X = z[J],
                            h(X[2] + n, X[1] + n, X[0] + n);
                    for (i = P + 2 * T,
                        n = Y * i,
                        J = 0; J < q; J++)
                        X = z[J],
                            h(X[0] + n, X[1] + n, X[2] + n)
                } else {
                    for (J = 0; J < q; J++)
                        X = z[J],
                            h(X[2], X[1], X[0]);
                    for (J = 0; J < q; J++)
                        X = z[J],
                            h(X[0] + Y * P, X[1] + Y * P, X[2] + Y * P)
                }
                N.addGroup(t, _.length / 3 - t, void 0 !== e.material ? e.material : 0)
            }(),
                function () {
                    var t = _.length / 3
                        , i = 0;
                    for (o(G, i),
                        i += G.length,
                        C = 0,
                        D = F.length; C < D; C++)
                        I = F[C],
                            o(I, i),
                            i += I.length;
                    N.addGroup(t, _.length / 3 - t, void 0 !== e.extrudeMaterial ? e.extrudeMaterial : 1)
                }(),
                e.arrays || (this.setIndex(y),
                    this.addAttribute("position", new Et(_, 3)),
                    this.addAttribute("uv", new Et(x, 2)))
        }
        ,
        Bi.WorldUVGenerator = {
            generateTopUV: function (t, e, i, n, o) {
                var a = e[3 * i]
                    , s = e[3 * i + 1]
                    , h = e[3 * n]
                    , l = e[3 * n + 1]
                    , c = e[3 * o]
                    , u = e[3 * o + 1];
                return [new r(a, s), new r(h, l), new r(c, u)]
            },
            generateSideWallUV: function (t, e, i, n, o, a) {
                var s = e[3 * i]
                    , h = e[3 * i + 1]
                    , l = e[3 * i + 2]
                    , c = e[3 * n]
                    , u = e[3 * n + 1]
                    , d = e[3 * n + 2]
                    , p = e[3 * o]
                    , f = e[3 * o + 1]
                    , m = e[3 * o + 2]
                    , v = e[3 * a]
                    , g = e[3 * a + 1]
                    , _ = e[3 * a + 2];
                return Math.abs(h - u) < .01 ? [new r(s, 1 - l), new r(c, 1 - d), new r(p, 1 - m), new r(v, 1 - _)] : [new r(h, 1 - l), new r(u, 1 - d), new r(f, 1 - m), new r(g, 1 - _)]
            }
        },
        zi.prototype = Object.create(mt.prototype),
        zi.prototype.constructor = zi,
        Gi.prototype = Object.create(Fi.prototype),
        Gi.prototype.constructor = Gi,
        ji.prototype = Object.create(mt.prototype),
        ji.prototype.constructor = ji,
        ki.prototype = Object.create(Pt.prototype),
        ki.prototype.constructor = ki,
        Hi.prototype = Object.create(mt.prototype),
        Hi.prototype.constructor = Hi,
        Vi.prototype = Object.create(Pt.prototype),
        Vi.prototype.constructor = Vi,
        Wi.prototype = Object.create(mt.prototype),
        Wi.prototype.constructor = Wi,
        Xi.prototype = Object.create(Pt.prototype),
        Xi.prototype.constructor = Xi,
        Yi.prototype = Object.create(mt.prototype),
        Yi.prototype.constructor = Yi,
        Yi.prototype.toJSON = function () {
            var t = mt.prototype.toJSON.call(this);
            return Zi(this.parameters.shapes, t)
        }
        ,
        qi.prototype = Object.create(Pt.prototype),
        qi.prototype.constructor = qi,
        qi.prototype.toJSON = function () {
            var t = Pt.prototype.toJSON.call(this);
            return Zi(this.parameters.shapes, t)
        }
        ,
        Ji.prototype = Object.create(Pt.prototype),
        Ji.prototype.constructor = Ji,
        Ki.prototype = Object.create(mt.prototype),
        Ki.prototype.constructor = Ki,
        Qi.prototype = Object.create(Pt.prototype),
        Qi.prototype.constructor = Qi,
        $i.prototype = Object.create(Ki.prototype),
        $i.prototype.constructor = $i,
        tn.prototype = Object.create(Qi.prototype),
        tn.prototype.constructor = tn,
        en.prototype = Object.create(mt.prototype),
        en.prototype.constructor = en,
        nn.prototype = Object.create(Pt.prototype),
        nn.prototype.constructor = nn;
    var Ph = Object.freeze({
        WireframeGeometry: Ve,
        ParametricGeometry: We,
        ParametricBufferGeometry: Xe,
        TetrahedronGeometry: Ze,
        TetrahedronBufferGeometry: Je,
        OctahedronGeometry: Ke,
        OctahedronBufferGeometry: Qe,
        IcosahedronGeometry: $e,
        IcosahedronBufferGeometry: ti,
        DodecahedronGeometry: ei,
        DodecahedronBufferGeometry: ii,
        PolyhedronGeometry: Ye,
        PolyhedronBufferGeometry: qe,
        TubeGeometry: ni,
        TubeBufferGeometry: ri,
        TorusKnotGeometry: oi,
        TorusKnotBufferGeometry: ai,
        TorusGeometry: si,
        TorusBufferGeometry: hi,
        TextGeometry: zi,
        TextBufferGeometry: Gi,
        SphereGeometry: ji,
        SphereBufferGeometry: ki,
        RingGeometry: Hi,
        RingBufferGeometry: Vi,
        PlaneGeometry: Ot,
        PlaneBufferGeometry: It,
        LatheGeometry: Wi,
        LatheBufferGeometry: Xi,
        ShapeGeometry: Yi,
        ShapeBufferGeometry: qi,
        ExtrudeGeometry: Bi,
        ExtrudeBufferGeometry: Fi,
        EdgesGeometry: Ji,
        ConeGeometry: $i,
        ConeBufferGeometry: tn,
        CylinderGeometry: Ki,
        CylinderBufferGeometry: Qi,
        CircleGeometry: en,
        CircleBufferGeometry: nn,
        BoxGeometry: Rt,
        BoxBufferGeometry: Lt
    });
    rn.prototype = Object.create(tt.prototype),
        rn.prototype.constructor = rn,
        rn.prototype.isShadowMaterial = !0,
        on.prototype = Object.create(Dt.prototype),
        on.prototype.constructor = on,
        on.prototype.isRawShaderMaterial = !0,
        an.prototype = Object.create(tt.prototype),
        an.prototype.constructor = an,
        an.prototype.isMeshStandardMaterial = !0,
        an.prototype.copy = function (t) {
            return tt.prototype.copy.call(this, t),
                this.defines = {
                    STANDARD: ""
                },
                this.color.copy(t.color),
                this.roughness = t.roughness,
                this.metalness = t.metalness,
                this.map = t.map,
                this.lightMap = t.lightMap,
                this.lightMapIntensity = t.lightMapIntensity,
                this.aoMap = t.aoMap,
                this.aoMapIntensity = t.aoMapIntensity,
                this.emissive.copy(t.emissive),
                this.emissiveMap = t.emissiveMap,
                this.emissiveIntensity = t.emissiveIntensity,
                this.bumpMap = t.bumpMap,
                this.bumpScale = t.bumpScale,
                this.normalMap = t.normalMap,
                this.normalScale.copy(t.normalScale),
                this.displacementMap = t.displacementMap,
                this.displacementScale = t.displacementScale,
                this.displacementBias = t.displacementBias,
                this.roughnessMap = t.roughnessMap,
                this.metalnessMap = t.metalnessMap,
                this.alphaMap = t.alphaMap,
                this.envMap = t.envMap,
                this.envMapIntensity = t.envMapIntensity,
                this.refractionRatio = t.refractionRatio,
                this.wireframe = t.wireframe,
                this.wireframeLinewidth = t.wireframeLinewidth,
                this.wireframeLinecap = t.wireframeLinecap,
                this.wireframeLinejoin = t.wireframeLinejoin,
                this.skinning = t.skinning,
                this.morphTargets = t.morphTargets,
                this.morphNormals = t.morphNormals,
                this
        }
        ,
        sn.prototype = Object.create(an.prototype),
        sn.prototype.constructor = sn,
        sn.prototype.isMeshPhysicalMaterial = !0,
        sn.prototype.copy = function (t) {
            return an.prototype.copy.call(this, t),
                this.defines = {
                    PHYSICAL: ""
                },
                this.reflectivity = t.reflectivity,
                this.clearCoat = t.clearCoat,
                this.clearCoatRoughness = t.clearCoatRoughness,
                this
        }
        ,
        hn.prototype = Object.create(tt.prototype),
        hn.prototype.constructor = hn,
        hn.prototype.isMeshPhongMaterial = !0,
        hn.prototype.copy = function (t) {
            return tt.prototype.copy.call(this, t),
                this.color.copy(t.color),
                this.specular.copy(t.specular),
                this.shininess = t.shininess,
                this.map = t.map,
                this.lightMap = t.lightMap,
                this.lightMapIntensity = t.lightMapIntensity,
                this.aoMap = t.aoMap,
                this.aoMapIntensity = t.aoMapIntensity,
                this.emissive.copy(t.emissive),
                this.emissiveMap = t.emissiveMap,
                this.emissiveIntensity = t.emissiveIntensity,
                this.bumpMap = t.bumpMap,
                this.bumpScale = t.bumpScale,
                this.normalMap = t.normalMap,
                this.normalScale.copy(t.normalScale),
                this.displacementMap = t.displacementMap,
                this.displacementScale = t.displacementScale,
                this.displacementBias = t.displacementBias,
                this.specularMap = t.specularMap,
                this.alphaMap = t.alphaMap,
                this.envMap = t.envMap,
                this.combine = t.combine,
                this.reflectivity = t.reflectivity,
                this.refractionRatio = t.refractionRatio,
                this.wireframe = t.wireframe,
                this.wireframeLinewidth = t.wireframeLinewidth,
                this.wireframeLinecap = t.wireframeLinecap,
                this.wireframeLinejoin = t.wireframeLinejoin,
                this.skinning = t.skinning,
                this.morphTargets = t.morphTargets,
                this.morphNormals = t.morphNormals,
                this
        }
        ,
        ln.prototype = Object.create(hn.prototype),
        ln.prototype.constructor = ln,
        ln.prototype.isMeshToonMaterial = !0,
        ln.prototype.copy = function (t) {
            return hn.prototype.copy.call(this, t),
                this.gradientMap = t.gradientMap,
                this
        }
        ,
        cn.prototype = Object.create(tt.prototype),
        cn.prototype.constructor = cn,
        cn.prototype.isMeshNormalMaterial = !0,
        cn.prototype.copy = function (t) {
            return tt.prototype.copy.call(this, t),
                this.bumpMap = t.bumpMap,
                this.bumpScale = t.bumpScale,
                this.normalMap = t.normalMap,
                this.normalScale.copy(t.normalScale),
                this.displacementMap = t.displacementMap,
                this.displacementScale = t.displacementScale,
                this.displacementBias = t.displacementBias,
                this.wireframe = t.wireframe,
                this.wireframeLinewidth = t.wireframeLinewidth,
                this.skinning = t.skinning,
                this.morphTargets = t.morphTargets,
                this.morphNormals = t.morphNormals,
                this
        }
        ,
        un.prototype = Object.create(tt.prototype),
        un.prototype.constructor = un,
        un.prototype.isMeshLambertMaterial = !0,
        un.prototype.copy = function (t) {
            return tt.prototype.copy.call(this, t),
                this.color.copy(t.color),
                this.map = t.map,
                this.lightMap = t.lightMap,
                this.lightMapIntensity = t.lightMapIntensity,
                this.aoMap = t.aoMap,
                this.aoMapIntensity = t.aoMapIntensity,
                this.emissive.copy(t.emissive),
                this.emissiveMap = t.emissiveMap,
                this.emissiveIntensity = t.emissiveIntensity,
                this.specularMap = t.specularMap,
                this.alphaMap = t.alphaMap,
                this.envMap = t.envMap,
                this.combine = t.combine,
                this.reflectivity = t.reflectivity,
                this.refractionRatio = t.refractionRatio,
                this.wireframe = t.wireframe,
                this.wireframeLinewidth = t.wireframeLinewidth,
                this.wireframeLinecap = t.wireframeLinecap,
                this.wireframeLinejoin = t.wireframeLinejoin,
                this.skinning = t.skinning,
                this.morphTargets = t.morphTargets,
                this.morphNormals = t.morphNormals,
                this
        }
        ,
        dn.prototype = Object.create(De.prototype),
        dn.prototype.constructor = dn,
        dn.prototype.isLineDashedMaterial = !0,
        dn.prototype.copy = function (t) {
            return De.prototype.copy.call(this, t),
                this.scale = t.scale,
                this.dashSize = t.dashSize,
                this.gapSize = t.gapSize,
                this
        }
        ;
    var Rh = Object.freeze({
        ShadowMaterial: rn,
        SpriteMaterial: Pe,
        RawShaderMaterial: on,
        ShaderMaterial: Dt,
        PointsMaterial: Fe,
        MeshPhysicalMaterial: sn,
        MeshStandardMaterial: an,
        MeshPhongMaterial: hn,
        MeshToonMaterial: ln,
        MeshNormalMaterial: cn,
        MeshLambertMaterial: un,
        MeshDepthMaterial: et,
        MeshDistanceMaterial: it,
        MeshBasicMaterial: Ct,
        LineDashedMaterial: dn,
        LineBasicMaterial: De,
        Material: tt
    })
        , Lh = {
            enabled: !1,
            files: {},
            add: function (t, e) {
                !1 !== this.enabled && (this.files[t] = e)
            },
            get: function (t) {
                if (!1 !== this.enabled)
                    return this.files[t]
            },
            remove: function (t) {
                delete this.files[t]
            },
            clear: function () {
                this.files = {}
            }
        }
        , Oh = new pn
        , Ih = {};
    Object.assign(fn.prototype, {
        load: function (t, e, i, n) {
            void 0 === t && (t = ""),
                void 0 !== this.path && (t = this.path + t),
                t = this.manager.resolveURL(t);
            var r = this
                , o = Lh.get(t);
            if (void 0 !== o)
                return r.manager.itemStart(t),
                    setTimeout(function () {
                        e && e(o),
                            r.manager.itemEnd(t)
                    }, 0),
                    o;
            if (void 0 !== Ih[t])
                return void Ih[t].push({
                    onLoad: e,
                    onProgress: i,
                    onError: n
                });
            var a = /^data:(.*?)(;base64)?,(.*)$/
                , s = t.match(a);
            if (s) {
                var h = s[1]
                    , l = !!s[2]
                    , c = s[3];
                c = window.decodeURIComponent(c),
                    l && (c = window.atob(c));
                try {
                    var u, d = (this.responseType || "").toLowerCase();
                    switch (d) {
                        case "arraybuffer":
                        case "blob":
                            for (var p = new Uint8Array(c.length), f = 0; f < c.length; f++)
                                p[f] = c.charCodeAt(f);
                            u = "blob" === d ? new Blob([p.buffer], {
                                type: h
                            }) : p.buffer;
                            break;
                        case "document":
                            var m = new DOMParser;
                            u = m.parseFromString(c, h);
                            break;
                        case "json":
                            u = JSON.parse(c);
                            break;
                        default:
                            u = c
                    }
                    window.setTimeout(function () {
                        e && e(u),
                            r.manager.itemEnd(t)
                    }, 0)
                } catch (e) {
                    window.setTimeout(function () {
                        n && n(e),
                            r.manager.itemEnd(t),
                            r.manager.itemError(t)
                    }, 0)
                }
            } else {
                Ih[t] = [],
                    Ih[t].push({
                        onLoad: e,
                        onProgress: i,
                        onError: n
                    });
                var v = new XMLHttpRequest;
                v.open("GET", t, !0),
                    v.addEventListener("load", function (e) {
                        var i = this.response;
                        Lh.add(t, i);
                        var n = Ih[t];
                        if (delete Ih[t],
                            200 === this.status) {
                            for (var o = 0, a = n.length; o < a; o++) {
                                var s = n[o];
                                s.onLoad && s.onLoad(i)
                            }
                            r.manager.itemEnd(t)
                        } else if (0 === this.status) {
                            console.warn("THREE.FileLoader: HTTP Status 0 received.");
                            for (var o = 0, a = n.length; o < a; o++) {
                                var s = n[o];
                                s.onLoad && s.onLoad(i)
                            }
                            r.manager.itemEnd(t)
                        } else {
                            for (var o = 0, a = n.length; o < a; o++) {
                                var s = n[o];
                                s.onError && s.onError(e)
                            }
                            r.manager.itemEnd(t),
                                r.manager.itemError(t)
                        }
                    }, !1),
                    v.addEventListener("progress", function (e) {
                        for (var i = Ih[t], n = 0, r = i.length; n < r; n++) {
                            var o = i[n];
                            o.onProgress && o.onProgress(e)
                        }
                    }, !1),
                    v.addEventListener("error", function (e) {
                        var i = Ih[t];
                        delete Ih[t];
                        for (var n = 0, o = i.length; n < o; n++) {
                            var a = i[n];
                            a.onError && a.onError(e)
                        }
                        r.manager.itemEnd(t),
                            r.manager.itemError(t)
                    }, !1),
                    void 0 !== this.responseType && (v.responseType = this.responseType),
                    void 0 !== this.withCredentials && (v.withCredentials = this.withCredentials),
                    v.overrideMimeType && v.overrideMimeType(void 0 !== this.mimeType ? this.mimeType : "text/plain");
                for (var g in this.requestHeader)
                    v.setRequestHeader(g, this.requestHeader[g]);
                v.send(null)
            }
            return r.manager.itemStart(t),
                v
        },
        setPath: function (t) {
            return this.path = t,
                this
        },
        setResponseType: function (t) {
            return this.responseType = t,
                this
        },
        setWithCredentials: function (t) {
            return this.withCredentials = t,
                this
        },
        setMimeType: function (t) {
            return this.mimeType = t,
                this
        },
        setRequestHeader: function (t) {
            return this.requestHeader = t,
                this
        }
    }),
        Object.assign(mn.prototype, {
            load: function (t, e, i, n) {
                var r = this
                    , o = []
                    , a = new ke;
                a.image = o;
                var s = new fn(this.manager);
                if (s.setPath(this.path),
                    s.setResponseType("arraybuffer"),
                    Array.isArray(t))
                    for (var h = 0, l = 0, c = t.length; l < c; ++l)
                        !function (l) {
                            s.load(t[l], function (t) {
                                var i = r._parser(t, !0);
                                o[l] = {
                                    width: i.width,
                                    height: i.height,
                                    format: i.format,
                                    mipmaps: i.mipmaps
                                },
                                    6 === (h += 1) && (1 === i.mipmapCount && (a.minFilter = ss),
                                        a.format = i.format,
                                        a.needsUpdate = !0,
                                        e && e(a))
                            }, i, n)
                        }(l);
                else
                    s.load(t, function (t) {
                        var i = r._parser(t, !0);
                        if (i.isCubemap)
                            for (var n = i.mipmaps.length / i.mipmapCount, s = 0; s < n; s++) {
                                o[s] = {
                                    mipmaps: []
                                };
                                for (var h = 0; h < i.mipmapCount; h++)
                                    o[s].mipmaps.push(i.mipmaps[s * i.mipmapCount + h]),
                                        o[s].format = i.format,
                                        o[s].width = i.width,
                                        o[s].height = i.height
                            }
                        else
                            a.image.width = i.width,
                                a.image.height = i.height,
                                a.mipmaps = i.mipmaps;
                        1 === i.mipmapCount && (a.minFilter = ss),
                            a.format = i.format,
                            a.needsUpdate = !0,
                            e && e(a)
                    }, i, n);
                return a
            },
            setPath: function (t) {
                return this.path = t,
                    this
            }
        }),
        Object.assign(vn.prototype, {
            load: function (t, e, i, n) {
                var r = this
                    , o = new p
                    , a = new fn(this.manager);
                return a.setResponseType("arraybuffer"),
                    a.load(t, function (t) {
                        var i = r._parser(t);
                        i && (void 0 !== i.image ? o.image = i.image : void 0 !== i.data && (o.image.width = i.width,
                            o.image.height = i.height,
                            o.image.data = i.data),
                            o.wrapS = void 0 !== i.wrapS ? i.wrapS : is,
                            o.wrapT = void 0 !== i.wrapT ? i.wrapT : is,
                            o.magFilter = void 0 !== i.magFilter ? i.magFilter : ss,
                            o.minFilter = void 0 !== i.minFilter ? i.minFilter : ls,
                            o.anisotropy = void 0 !== i.anisotropy ? i.anisotropy : 1,
                            void 0 !== i.format && (o.format = i.format),
                            void 0 !== i.type && (o.type = i.type),
                            void 0 !== i.mipmaps && (o.mipmaps = i.mipmaps),
                            1 === i.mipmapCount && (o.minFilter = ss),
                            o.needsUpdate = !0,
                            e && e(o, i))
                    }, i, n),
                    o
            }
        }),
        Object.assign(gn.prototype, {
            crossOrigin: "Anonymous",
            load: function (t, e, i, n) {
                void 0 === t && (t = ""),
                    void 0 !== this.path && (t = this.path + t),
                    t = this.manager.resolveURL(t);
                var r = this
                    , o = Lh.get(t);
                if (void 0 !== o)
                    return r.manager.itemStart(t),
                        setTimeout(function () {
                            e && e(o),
                                r.manager.itemEnd(t)
                        }, 0),
                        o;
                var a = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
                return a.addEventListener("load", function () {
                    Lh.add(t, this),
                        e && e(this),
                        r.manager.itemEnd(t)
                }, !1),
                    a.addEventListener("error", function (e) {
                        n && n(e),
                            r.manager.itemEnd(t),
                            r.manager.itemError(t)
                    }, !1),
                    "data:" !== t.substr(0, 5) && void 0 !== this.crossOrigin && (a.crossOrigin = this.crossOrigin),
                    r.manager.itemStart(t),
                    a.src = t,
                    a
            },
            setCrossOrigin: function (t) {
                return this.crossOrigin = t,
                    this
            },
            setPath: function (t) {
                return this.path = t,
                    this
            }
        }),
        Object.assign(_n.prototype, {
            crossOrigin: "Anonymous",
            load: function (t, e, i, n) {
                var r = new f
                    , o = new gn(this.manager);
                o.setCrossOrigin(this.crossOrigin),
                    o.setPath(this.path);
                for (var a = 0, s = 0; s < t.length; ++s)
                    !function (i) {
                        o.load(t[i], function (t) {
                            r.images[i] = t,
                                6 == ++a && (r.needsUpdate = !0,
                                    e && e(r))
                        }, void 0, n)
                    }(s);
                return r
            },
            setCrossOrigin: function (t) {
                return this.crossOrigin = t,
                    this
            },
            setPath: function (t) {
                return this.path = t,
                    this
            }
        }),
        Object.assign(yn.prototype, {
            crossOrigin: "Anonymous",
            load: function (t, e, i, n) {
                var r = new l
                    , o = new gn(this.manager);
                return o.setCrossOrigin(this.crossOrigin),
                    o.setPath(this.path),
                    o.load(t, function (i) {
                        r.image = i;
                        var n = t.search(/\.(jpg|jpeg)$/) > 0 || 0 === t.search(/^data\:image\/jpeg/);
                        r.format = n ? Ss : Es,
                            r.needsUpdate = !0,
                            void 0 !== e && e(r)
                    }, i, n),
                    r
            },
            setCrossOrigin: function (t) {
                return this.crossOrigin = t,
                    this
            },
            setPath: function (t) {
                return this.path = t,
                    this
            }
        }),
        Object.assign(xn.prototype, {
            getPoint: function () {
                return console.warn("THREE.Curve: .getPoint() not implemented."),
                    null
            },
            getPointAt: function (t, e) {
                var i = this.getUtoTmapping(t);
                return this.getPoint(i, e)
            },
            getPoints: function (t) {
                void 0 === t && (t = 5);
                for (var e = [], i = 0; i <= t; i++)
                    e.push(this.getPoint(i / t));
                return e
            },
            getSpacedPoints: function (t) {
                void 0 === t && (t = 5);
                for (var e = [], i = 0; i <= t; i++)
                    e.push(this.getPointAt(i / t));
                return e
            },
            getLength: function () {
                var t = this.getLengths();
                return t[t.length - 1]
            },
            getLengths: function (t) {
                if (void 0 === t && (t = this.arcLengthDivisions),
                    this.cacheArcLengths && this.cacheArcLengths.length === t + 1 && !this.needsUpdate)
                    return this.cacheArcLengths;
                this.needsUpdate = !1;
                var e, i, n = [], r = this.getPoint(0), o = 0;
                for (n.push(0),
                    i = 1; i <= t; i++)
                    e = this.getPoint(i / t),
                        o += e.distanceTo(r),
                        n.push(o),
                        r = e;
                return this.cacheArcLengths = n,
                    n
            },
            updateArcLengths: function () {
                this.needsUpdate = !0,
                    this.getLengths()
            },
            getUtoTmapping: function (t, e) {
                var i, n = this.getLengths(), r = 0, o = n.length;
                i = e || t * n[o - 1];
                for (var a, s = 0, h = o - 1; s <= h;)
                    if (r = Math.floor(s + (h - s) / 2),
                        (a = n[r] - i) < 0)
                        s = r + 1;
                    else {
                        if (!(a > 0)) {
                            h = r;
                            break
                        }
                        h = r - 1
                    }
                if (r = h,
                    n[r] === i)
                    return r / (o - 1);
                var l = n[r];
                return (r + (i - l) / (n[r + 1] - l)) / (o - 1)
            },
            getTangent: function (t) {
                var e = t - 1e-4
                    , i = t + 1e-4;
                e < 0 && (e = 0),
                    i > 1 && (i = 1);
                var n = this.getPoint(e);
                return this.getPoint(i).clone().sub(n).normalize()
            },
            getTangentAt: function (t) {
                var e = this.getUtoTmapping(t);
                return this.getTangent(e)
            },
            computeFrenetFrames: function (t, e) {
                var i, n, r, a = new s, h = [], l = [], c = [], u = new s, d = new o;
                for (i = 0; i <= t; i++)
                    n = i / t,
                        h[i] = this.getTangentAt(n),
                        h[i].normalize();
                l[0] = new s,
                    c[0] = new s;
                var p = Number.MAX_VALUE
                    , f = Math.abs(h[0].x)
                    , m = Math.abs(h[0].y)
                    , v = Math.abs(h[0].z);
                for (f <= p && (p = f,
                    a.set(1, 0, 0)),
                    m <= p && (p = m,
                        a.set(0, 1, 0)),
                    v <= p && a.set(0, 0, 1),
                    u.crossVectors(h[0], a).normalize(),
                    l[0].crossVectors(h[0], u),
                    c[0].crossVectors(h[0], l[0]),
                    i = 1; i <= t; i++)
                    l[i] = l[i - 1].clone(),
                        c[i] = c[i - 1].clone(),
                        u.crossVectors(h[i - 1], h[i]),
                        u.length() > Number.EPSILON && (u.normalize(),
                            r = Math.acos(sh.clamp(h[i - 1].dot(h[i]), -1, 1)),
                            l[i].applyMatrix4(d.makeRotationAxis(u, r))),
                        c[i].crossVectors(h[i], l[i]);
                if (!0 === e)
                    for (r = Math.acos(sh.clamp(l[0].dot(l[t]), -1, 1)),
                        r /= t,
                        h[0].dot(u.crossVectors(l[0], l[t])) > 0 && (r = -r),
                        i = 1; i <= t; i++)
                        l[i].applyMatrix4(d.makeRotationAxis(h[i], r * i)),
                            c[i].crossVectors(h[i], l[i]);
                return {
                    tangents: h,
                    normals: l,
                    binormals: c
                }
            },
            clone: function () {
                return (new this.constructor).copy(this)
            },
            copy: function (t) {
                return this.arcLengthDivisions = t.arcLengthDivisions,
                    this
            },
            toJSON: function () {
                var t = {
                    metadata: {
                        version: 4.5,
                        type: "Curve",
                        generator: "Curve.toJSON"
                    }
                };
                return t.arcLengthDivisions = this.arcLengthDivisions,
                    t.type = this.type,
                    t
            },
            fromJSON: function (t) {
                return this.arcLengthDivisions = t.arcLengthDivisions,
                    this
            }
        }),
        bn.prototype = Object.create(xn.prototype),
        bn.prototype.constructor = bn,
        bn.prototype.isEllipseCurve = !0,
        bn.prototype.getPoint = function (t, e) {
            for (var i = e || new r, n = 2 * Math.PI, o = this.aEndAngle - this.aStartAngle, a = Math.abs(o) < Number.EPSILON; o < 0;)
                o += n;
            for (; o > n;)
                o -= n;
            o < Number.EPSILON && (o = a ? 0 : n),
                !0 !== this.aClockwise || a || (o === n ? o = -n : o -= n);
            var s = this.aStartAngle + t * o
                , h = this.aX + this.xRadius * Math.cos(s)
                , l = this.aY + this.yRadius * Math.sin(s);
            if (0 !== this.aRotation) {
                var c = Math.cos(this.aRotation)
                    , u = Math.sin(this.aRotation)
                    , d = h - this.aX
                    , p = l - this.aY;
                h = d * c - p * u + this.aX,
                    l = d * u + p * c + this.aY
            }
            return i.set(h, l)
        }
        ,
        bn.prototype.copy = function (t) {
            return xn.prototype.copy.call(this, t),
                this.aX = t.aX,
                this.aY = t.aY,
                this.xRadius = t.xRadius,
                this.yRadius = t.yRadius,
                this.aStartAngle = t.aStartAngle,
                this.aEndAngle = t.aEndAngle,
                this.aClockwise = t.aClockwise,
                this.aRotation = t.aRotation,
                this
        }
        ,
        bn.prototype.toJSON = function () {
            var t = xn.prototype.toJSON.call(this);
            return t.aX = this.aX,
                t.aY = this.aY,
                t.xRadius = this.xRadius,
                t.yRadius = this.yRadius,
                t.aStartAngle = this.aStartAngle,
                t.aEndAngle = this.aEndAngle,
                t.aClockwise = this.aClockwise,
                t.aRotation = this.aRotation,
                t
        }
        ,
        bn.prototype.fromJSON = function (t) {
            return xn.prototype.fromJSON.call(this, t),
                this.aX = t.aX,
                this.aY = t.aY,
                this.xRadius = t.xRadius,
                this.yRadius = t.yRadius,
                this.aStartAngle = t.aStartAngle,
                this.aEndAngle = t.aEndAngle,
                this.aClockwise = t.aClockwise,
                this.aRotation = t.aRotation,
                this
        }
        ,
        wn.prototype = Object.create(bn.prototype),
        wn.prototype.constructor = wn,
        wn.prototype.isArcCurve = !0;
    var Ch = new s
        , Dh = new Sn
        , Nh = new Sn
        , Uh = new Sn;
    En.prototype = Object.create(xn.prototype),
        En.prototype.constructor = En,
        En.prototype.isCatmullRomCurve3 = !0,
        En.prototype.getPoint = function (t, e) {
            var i = e || new s
                , n = this.points
                , r = n.length
                , o = (r - (this.closed ? 0 : 1)) * t
                , a = Math.floor(o)
                , h = o - a;
            this.closed ? a += a > 0 ? 0 : (Math.floor(Math.abs(a) / n.length) + 1) * n.length : 0 === h && a === r - 1 && (a = r - 2,
                h = 1);
            var l, c, u, d;
            if (this.closed || a > 0 ? l = n[(a - 1) % r] : (Ch.subVectors(n[0], n[1]).add(n[0]),
                l = Ch),
                c = n[a % r],
                u = n[(a + 1) % r],
                this.closed || a + 2 < r ? d = n[(a + 2) % r] : (Ch.subVectors(n[r - 1], n[r - 2]).add(n[r - 1]),
                    d = Ch),
                "centripetal" === this.curveType || "chordal" === this.curveType) {
                var p = "chordal" === this.curveType ? .5 : .25
                    , f = Math.pow(l.distanceToSquared(c), p)
                    , m = Math.pow(c.distanceToSquared(u), p)
                    , v = Math.pow(u.distanceToSquared(d), p);
                m < 1e-4 && (m = 1),
                    f < 1e-4 && (f = m),
                    v < 1e-4 && (v = m),
                    Dh.initNonuniformCatmullRom(l.x, c.x, u.x, d.x, f, m, v),
                    Nh.initNonuniformCatmullRom(l.y, c.y, u.y, d.y, f, m, v),
                    Uh.initNonuniformCatmullRom(l.z, c.z, u.z, d.z, f, m, v)
            } else
                "catmullrom" === this.curveType && (Dh.initCatmullRom(l.x, c.x, u.x, d.x, this.tension),
                    Nh.initCatmullRom(l.y, c.y, u.y, d.y, this.tension),
                    Uh.initCatmullRom(l.z, c.z, u.z, d.z, this.tension));
            return i.set(Dh.calc(h), Nh.calc(h), Uh.calc(h)),
                i
        }
        ,
        En.prototype.copy = function (t) {
            xn.prototype.copy.call(this, t),
                this.points = [];
            for (var e = 0, i = t.points.length; e < i; e++) {
                var n = t.points[e];
                this.points.push(n.clone())
            }
            return this.closed = t.closed,
                this.curveType = t.curveType,
                this.tension = t.tension,
                this
        }
        ,
        En.prototype.toJSON = function () {
            var t = xn.prototype.toJSON.call(this);
            t.points = [];
            for (var e = 0, i = this.points.length; e < i; e++) {
                var n = this.points[e];
                t.points.push(n.toArray())
            }
            return t.closed = this.closed,
                t.curveType = this.curveType,
                t.tension = this.tension,
                t
        }
        ,
        En.prototype.fromJSON = function (t) {
            xn.prototype.fromJSON.call(this, t),
                this.points = [];
            for (var e = 0, i = t.points.length; e < i; e++) {
                var n = t.points[e];
                this.points.push((new s).fromArray(n))
            }
            return this.closed = t.closed,
                this.curveType = t.curveType,
                this.tension = t.tension,
                this
        }
        ,
        Nn.prototype = Object.create(xn.prototype),
        Nn.prototype.constructor = Nn,
        Nn.prototype.isCubicBezierCurve = !0,
        Nn.prototype.getPoint = function (t, e) {
            var i = e || new r
                , n = this.v0
                , o = this.v1
                , a = this.v2
                , s = this.v3;
            return i.set(Dn(t, n.x, o.x, a.x, s.x), Dn(t, n.y, o.y, a.y, s.y)),
                i
        }
        ,
        Nn.prototype.copy = function (t) {
            return xn.prototype.copy.call(this, t),
                this.v0.copy(t.v0),
                this.v1.copy(t.v1),
                this.v2.copy(t.v2),
                this.v3.copy(t.v3),
                this
        }
        ,
        Nn.prototype.toJSON = function () {
            var t = xn.prototype.toJSON.call(this);
            return t.v0 = this.v0.toArray(),
                t.v1 = this.v1.toArray(),
                t.v2 = this.v2.toArray(),
                t.v3 = this.v3.toArray(),
                t
        }
        ,
        Nn.prototype.fromJSON = function (t) {
            return xn.prototype.fromJSON.call(this, t),
                this.v0.fromArray(t.v0),
                this.v1.fromArray(t.v1),
                this.v2.fromArray(t.v2),
                this.v3.fromArray(t.v3),
                this
        }
        ,
        Un.prototype = Object.create(xn.prototype),
        Un.prototype.constructor = Un,
        Un.prototype.isCubicBezierCurve3 = !0,
        Un.prototype.getPoint = function (t, e) {
            var i = e || new s
                , n = this.v0
                , r = this.v1
                , o = this.v2
                , a = this.v3;
            return i.set(Dn(t, n.x, r.x, o.x, a.x), Dn(t, n.y, r.y, o.y, a.y), Dn(t, n.z, r.z, o.z, a.z)),
                i
        }
        ,
        Un.prototype.copy = function (t) {
            return xn.prototype.copy.call(this, t),
                this.v0.copy(t.v0),
                this.v1.copy(t.v1),
                this.v2.copy(t.v2),
                this.v3.copy(t.v3),
                this
        }
        ,
        Un.prototype.toJSON = function () {
            var t = xn.prototype.toJSON.call(this);
            return t.v0 = this.v0.toArray(),
                t.v1 = this.v1.toArray(),
                t.v2 = this.v2.toArray(),
                t.v3 = this.v3.toArray(),
                t
        }
        ,
        Un.prototype.fromJSON = function (t) {
            return xn.prototype.fromJSON.call(this, t),
                this.v0.fromArray(t.v0),
                this.v1.fromArray(t.v1),
                this.v2.fromArray(t.v2),
                this.v3.fromArray(t.v3),
                this
        }
        ,
        Bn.prototype = Object.create(xn.prototype),
        Bn.prototype.constructor = Bn,
        Bn.prototype.isLineCurve = !0,
        Bn.prototype.getPoint = function (t, e) {
            var i = e || new r;
            return 1 === t ? i.copy(this.v2) : (i.copy(this.v2).sub(this.v1),
                i.multiplyScalar(t).add(this.v1)),
                i
        }
        ,
        Bn.prototype.getPointAt = function (t, e) {
            return this.getPoint(t, e)
        }
        ,
        Bn.prototype.getTangent = function () {
            return this.v2.clone().sub(this.v1).normalize()
        }
        ,
        Bn.prototype.copy = function (t) {
            return xn.prototype.copy.call(this, t),
                this.v1.copy(t.v1),
                this.v2.copy(t.v2),
                this
        }
        ,
        Bn.prototype.toJSON = function () {
            var t = xn.prototype.toJSON.call(this);
            return t.v1 = this.v1.toArray(),
                t.v2 = this.v2.toArray(),
                t
        }
        ,
        Bn.prototype.fromJSON = function (t) {
            return xn.prototype.fromJSON.call(this, t),
                this.v1.fromArray(t.v1),
                this.v2.fromArray(t.v2),
                this
        }
        ,
        Fn.prototype = Object.create(xn.prototype),
        Fn.prototype.constructor = Fn,
        Fn.prototype.isLineCurve3 = !0,
        Fn.prototype.getPoint = function (t, e) {
            var i = e || new s;
            return 1 === t ? i.copy(this.v2) : (i.copy(this.v2).sub(this.v1),
                i.multiplyScalar(t).add(this.v1)),
                i
        }
        ,
        Fn.prototype.getPointAt = function (t, e) {
            return this.getPoint(t, e)
        }
        ,
        Fn.prototype.copy = function (t) {
            return xn.prototype.copy.call(this, t),
                this.v1.copy(t.v1),
                this.v2.copy(t.v2),
                this
        }
        ,
        Fn.prototype.toJSON = function () {
            var t = xn.prototype.toJSON.call(this);
            return t.v1 = this.v1.toArray(),
                t.v2 = this.v2.toArray(),
                t
        }
        ,
        Fn.prototype.fromJSON = function (t) {
            return xn.prototype.fromJSON.call(this, t),
                this.v1.fromArray(t.v1),
                this.v2.fromArray(t.v2),
                this
        }
        ,
        zn.prototype = Object.create(xn.prototype),
        zn.prototype.constructor = zn,
        zn.prototype.isQuadraticBezierCurve = !0,
        zn.prototype.getPoint = function (t, e) {
            var i = e || new r
                , n = this.v0
                , o = this.v1
                , a = this.v2;
            return i.set(Rn(t, n.x, o.x, a.x), Rn(t, n.y, o.y, a.y)),
                i
        }
        ,
        zn.prototype.copy = function (t) {
            return xn.prototype.copy.call(this, t),
                this.v0.copy(t.v0),
                this.v1.copy(t.v1),
                this.v2.copy(t.v2),
                this
        }
        ,
        zn.prototype.toJSON = function () {
            var t = xn.prototype.toJSON.call(this);
            return t.v0 = this.v0.toArray(),
                t.v1 = this.v1.toArray(),
                t.v2 = this.v2.toArray(),
                t
        }
        ,
        zn.prototype.fromJSON = function (t) {
            return xn.prototype.fromJSON.call(this, t),
                this.v0.fromArray(t.v0),
                this.v1.fromArray(t.v1),
                this.v2.fromArray(t.v2),
                this
        }
        ,
        Gn.prototype = Object.create(xn.prototype),
        Gn.prototype.constructor = Gn,
        Gn.prototype.isQuadraticBezierCurve3 = !0,
        Gn.prototype.getPoint = function (t, e) {
            var i = e || new s
                , n = this.v0
                , r = this.v1
                , o = this.v2;
            return i.set(Rn(t, n.x, r.x, o.x), Rn(t, n.y, r.y, o.y), Rn(t, n.z, r.z, o.z)),
                i
        }
        ,
        Gn.prototype.copy = function (t) {
            return xn.prototype.copy.call(this, t),
                this.v0.copy(t.v0),
                this.v1.copy(t.v1),
                this.v2.copy(t.v2),
                this
        }
        ,
        Gn.prototype.toJSON = function () {
            var t = xn.prototype.toJSON.call(this);
            return t.v0 = this.v0.toArray(),
                t.v1 = this.v1.toArray(),
                t.v2 = this.v2.toArray(),
                t
        }
        ,
        Gn.prototype.fromJSON = function (t) {
            return xn.prototype.fromJSON.call(this, t),
                this.v0.fromArray(t.v0),
                this.v1.fromArray(t.v1),
                this.v2.fromArray(t.v2),
                this
        }
        ,
        jn.prototype = Object.create(xn.prototype),
        jn.prototype.constructor = jn,
        jn.prototype.isSplineCurve = !0,
        jn.prototype.getPoint = function (t, e) {
            var i = e || new r
                , n = this.points
                , o = (n.length - 1) * t
                , a = Math.floor(o)
                , s = o - a
                , h = n[0 === a ? a : a - 1]
                , l = n[a]
                , c = n[a > n.length - 2 ? n.length - 1 : a + 1]
                , u = n[a > n.length - 3 ? n.length - 1 : a + 2];
            return i.set(Tn(s, h.x, l.x, c.x, u.x), Tn(s, h.y, l.y, c.y, u.y)),
                i
        }
        ,
        jn.prototype.copy = function (t) {
            xn.prototype.copy.call(this, t),
                this.points = [];
            for (var e = 0, i = t.points.length; e < i; e++) {
                var n = t.points[e];
                this.points.push(n.clone())
            }
            return this
        }
        ,
        jn.prototype.toJSON = function () {
            var t = xn.prototype.toJSON.call(this);
            t.points = [];
            for (var e = 0, i = this.points.length; e < i; e++) {
                var n = this.points[e];
                t.points.push(n.toArray())
            }
            return t
        }
        ,
        jn.prototype.fromJSON = function (t) {
            xn.prototype.fromJSON.call(this, t),
                this.points = [];
            for (var e = 0, i = t.points.length; e < i; e++) {
                var n = t.points[e];
                this.points.push((new r).fromArray(n))
            }
            return this
        }
        ;
    var Bh = Object.freeze({
        ArcCurve: wn,
        CatmullRomCurve3: En,
        CubicBezierCurve: Nn,
        CubicBezierCurve3: Un,
        EllipseCurve: bn,
        LineCurve: Bn,
        LineCurve3: Fn,
        QuadraticBezierCurve: zn,
        QuadraticBezierCurve3: Gn,
        SplineCurve: jn
    });
    kn.prototype = Object.assign(Object.create(xn.prototype), {
        constructor: kn,
        add: function (t) {
            this.curves.push(t)
        },
        closePath: function () {
            var t = this.curves[0].getPoint(0)
                , e = this.curves[this.curves.length - 1].getPoint(1);
            t.equals(e) || this.curves.push(new Bn(e, t))
        },
        getPoint: function (t) {
            for (var e = t * this.getLength(), i = this.getCurveLengths(), n = 0; n < i.length;) {
                if (i[n] >= e) {
                    var r = i[n] - e
                        , o = this.curves[n]
                        , a = o.getLength()
                        , s = 0 === a ? 0 : 1 - r / a;
                    return o.getPointAt(s)
                }
                n++
            }
            return null
        },
        getLength: function () {
            var t = this.getCurveLengths();
            return t[t.length - 1]
        },
        updateArcLengths: function () {
            this.needsUpdate = !0,
                this.cacheLengths = null,
                this.getCurveLengths()
        },
        getCurveLengths: function () {
            if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
                return this.cacheLengths;
            for (var t = [], e = 0, i = 0, n = this.curves.length; i < n; i++)
                e += this.curves[i].getLength(),
                    t.push(e);
            return this.cacheLengths = t,
                t
        },
        getSpacedPoints: function (t) {
            void 0 === t && (t = 40);
            for (var e = [], i = 0; i <= t; i++)
                e.push(this.getPoint(i / t));
            return this.autoClose && e.push(e[0]),
                e
        },
        getPoints: function (t) {
            t = t || 12;
            for (var e, i = [], n = 0, r = this.curves; n < r.length; n++)
                for (var o = r[n], a = o && o.isEllipseCurve ? 2 * t : o && o.isLineCurve ? 1 : o && o.isSplineCurve ? t * o.points.length : t, s = o.getPoints(a), h = 0; h < s.length; h++) {
                    var l = s[h];
                    e && e.equals(l) || (i.push(l),
                        e = l)
                }
            return this.autoClose && i.length > 1 && !i[i.length - 1].equals(i[0]) && i.push(i[0]),
                i
        },
        copy: function (t) {
            xn.prototype.copy.call(this, t),
                this.curves = [];
            for (var e = 0, i = t.curves.length; e < i; e++) {
                var n = t.curves[e];
                this.curves.push(n.clone())
            }
            return this.autoClose = t.autoClose,
                this
        },
        toJSON: function () {
            var t = xn.prototype.toJSON.call(this);
            t.autoClose = this.autoClose,
                t.curves = [];
            for (var e = 0, i = this.curves.length; e < i; e++) {
                var n = this.curves[e];
                t.curves.push(n.toJSON())
            }
            return t
        },
        fromJSON: function (t) {
            xn.prototype.fromJSON.call(this, t),
                this.autoClose = t.autoClose,
                this.curves = [];
            for (var e = 0, i = t.curves.length; e < i; e++) {
                var n = t.curves[e];
                this.curves.push((new Bh[n.type]).fromJSON(n))
            }
            return this
        }
    }),
        Hn.prototype = Object.assign(Object.create(kn.prototype), {
            constructor: Hn,
            setFromPoints: function (t) {
                this.moveTo(t[0].x, t[0].y);
                for (var e = 1, i = t.length; e < i; e++)
                    this.lineTo(t[e].x, t[e].y)
            },
            moveTo: function (t, e) {
                this.currentPoint.set(t, e)
            },
            lineTo: function (t, e) {
                var i = new Bn(this.currentPoint.clone(), new r(t, e));
                this.curves.push(i),
                    this.currentPoint.set(t, e)
            },
            quadraticCurveTo: function (t, e, i, n) {
                var o = new zn(this.currentPoint.clone(), new r(t, e), new r(i, n));
                this.curves.push(o),
                    this.currentPoint.set(i, n)
            },
            bezierCurveTo: function (t, e, i, n, o, a) {
                var s = new Nn(this.currentPoint.clone(), new r(t, e), new r(i, n), new r(o, a));
                this.curves.push(s),
                    this.currentPoint.set(o, a)
            },
            splineThru: function (t) {
                var e = [this.currentPoint.clone()].concat(t)
                    , i = new jn(e);
                this.curves.push(i),
                    this.currentPoint.copy(t[t.length - 1])
            },
            arc: function (t, e, i, n, r, o) {
                var a = this.currentPoint.x
                    , s = this.currentPoint.y;
                this.absarc(t + a, e + s, i, n, r, o)
            },
            absarc: function (t, e, i, n, r, o) {
                this.absellipse(t, e, i, i, n, r, o)
            },
            ellipse: function (t, e, i, n, r, o, a, s) {
                var h = this.currentPoint.x
                    , l = this.currentPoint.y;
                this.absellipse(t + h, e + l, i, n, r, o, a, s)
            },
            absellipse: function (t, e, i, n, r, o, a, s) {
                var h = new bn(t, e, i, n, r, o, a, s);
                if (this.curves.length > 0) {
                    var l = h.getPoint(0);
                    l.equals(this.currentPoint) || this.lineTo(l.x, l.y)
                }
                this.curves.push(h);
                var c = h.getPoint(1);
                this.currentPoint.copy(c)
            },
            copy: function (t) {
                return kn.prototype.copy.call(this, t),
                    this.currentPoint.copy(t.currentPoint),
                    this
            },
            toJSON: function () {
                var t = kn.prototype.toJSON.call(this);
                return t.currentPoint = this.currentPoint.toArray(),
                    t
            },
            fromJSON: function (t) {
                return kn.prototype.fromJSON.call(this, t),
                    this.currentPoint.fromArray(t.currentPoint),
                    this
            }
        }),
        Vn.prototype = Object.assign(Object.create(Hn.prototype), {
            constructor: Vn,
            getPointsHoles: function (t) {
                for (var e = [], i = 0, n = this.holes.length; i < n; i++)
                    e[i] = this.holes[i].getPoints(t);
                return e
            },
            extractPoints: function (t) {
                return {
                    shape: this.getPoints(t),
                    holes: this.getPointsHoles(t)
                }
            },
            copy: function (t) {
                Hn.prototype.copy.call(this, t),
                    this.holes = [];
                for (var e = 0, i = t.holes.length; e < i; e++) {
                    var n = t.holes[e];
                    this.holes.push(n.clone())
                }
                return this
            },
            toJSON: function () {
                var t = Hn.prototype.toJSON.call(this);
                t.uuid = this.uuid,
                    t.holes = [];
                for (var e = 0, i = this.holes.length; e < i; e++) {
                    var n = this.holes[e];
                    t.holes.push(n.toJSON())
                }
                return t
            },
            fromJSON: function (t) {
                Hn.prototype.fromJSON.call(this, t),
                    this.uuid = t.uuid,
                    this.holes = [];
                for (var e = 0, i = t.holes.length; e < i; e++) {
                    var n = t.holes[e];
                    this.holes.push((new Hn).fromJSON(n))
                }
                return this
            }
        }),
        Wn.prototype = Object.assign(Object.create(ut.prototype), {
            constructor: Wn,
            isLight: !0,
            copy: function (t) {
                return ut.prototype.copy.call(this, t),
                    this.color.copy(t.color),
                    this.intensity = t.intensity,
                    this
            },
            toJSON: function (t) {
                var e = ut.prototype.toJSON.call(this, t);
                return e.object.color = this.color.getHex(),
                    e.object.intensity = this.intensity,
                    void 0 !== this.groundColor && (e.object.groundColor = this.groundColor.getHex()),
                    void 0 !== this.distance && (e.object.distance = this.distance),
                    void 0 !== this.angle && (e.object.angle = this.angle),
                    void 0 !== this.decay && (e.object.decay = this.decay),
                    void 0 !== this.penumbra && (e.object.penumbra = this.penumbra),
                    void 0 !== this.shadow && (e.object.shadow = this.shadow.toJSON()),
                    e
            }
        }),
        Xn.prototype = Object.assign(Object.create(Wn.prototype), {
            constructor: Xn,
            isHemisphereLight: !0,
            copy: function (t) {
                return Wn.prototype.copy.call(this, t),
                    this.groundColor.copy(t.groundColor),
                    this
            }
        }),
        Object.assign(Yn.prototype, {
            copy: function (t) {
                return this.camera = t.camera.clone(),
                    this.bias = t.bias,
                    this.radius = t.radius,
                    this.mapSize.copy(t.mapSize),
                    this
            },
            clone: function () {
                return (new this.constructor).copy(this)
            },
            toJSON: function () {
                var t = {};
                return 0 !== this.bias && (t.bias = this.bias),
                    1 !== this.radius && (t.radius = this.radius),
                    512 === this.mapSize.x && 512 === this.mapSize.y || (t.mapSize = this.mapSize.toArray()),
                    t.camera = this.camera.toJSON(!1).object,
                    delete t.camera.matrix,
                    t
            }
        }),
        qn.prototype = Object.assign(Object.create(Yn.prototype), {
            constructor: qn,
            isSpotLightShadow: !0,
            update: function (t) {
                var e = this.camera
                    , i = 2 * sh.RAD2DEG * t.angle
                    , n = this.mapSize.width / this.mapSize.height
                    , r = t.distance || e.far;
                i === e.fov && n === e.aspect && r === e.far || (e.fov = i,
                    e.aspect = n,
                    e.far = r,
                    e.updateProjectionMatrix())
            }
        }),
        Zn.prototype = Object.assign(Object.create(Wn.prototype), {
            constructor: Zn,
            isSpotLight: !0,
            copy: function (t) {
                return Wn.prototype.copy.call(this, t),
                    this.distance = t.distance,
                    this.angle = t.angle,
                    this.penumbra = t.penumbra,
                    this.decay = t.decay,
                    this.target = t.target.clone(),
                    this.shadow = t.shadow.clone(),
                    this
            }
        }),
        Jn.prototype = Object.assign(Object.create(Wn.prototype), {
            constructor: Jn,
            isPointLight: !0,
            copy: function (t) {
                return Wn.prototype.copy.call(this, t),
                    this.distance = t.distance,
                    this.decay = t.decay,
                    this.shadow = t.shadow.clone(),
                    this
            }
        }),
        Kn.prototype = Object.assign(Object.create(Yn.prototype), {
            constructor: Kn
        }),
        Qn.prototype = Object.assign(Object.create(Wn.prototype), {
            constructor: Qn,
            isDirectionalLight: !0,
            copy: function (t) {
                return Wn.prototype.copy.call(this, t),
                    this.target = t.target.clone(),
                    this.shadow = t.shadow.clone(),
                    this
            }
        }),
        $n.prototype = Object.assign(Object.create(Wn.prototype), {
            constructor: $n,
            isAmbientLight: !0
        }),
        tr.prototype = Object.assign(Object.create(Wn.prototype), {
            constructor: tr,
            isRectAreaLight: !0,
            copy: function (t) {
                return Wn.prototype.copy.call(this, t),
                    this.width = t.width,
                    this.height = t.height,
                    this
            },
            toJSON: function (t) {
                var e = Wn.prototype.toJSON.call(this, t);
                return e.object.width = this.width,
                    e.object.height = this.height,
                    e
            }
        }),
        er.prototype = Object.assign(Object.create(ur.prototype), {
            constructor: er,
            ValueTypeName: "string",
            ValueBufferType: Array,
            DefaultInterpolation: ks,
            InterpolantFactoryMethodLinear: void 0,
            InterpolantFactoryMethodSmooth: void 0
        }),
        ir.prototype = Object.assign(Object.create(ur.prototype), {
            constructor: ir,
            ValueTypeName: "bool",
            ValueBufferType: Array,
            DefaultInterpolation: ks,
            InterpolantFactoryMethodLinear: void 0,
            InterpolantFactoryMethodSmooth: void 0
        }),
        Object.assign(nr.prototype, {
            evaluate: function (t) {
                var e = this.parameterPositions
                    , i = this._cachedIndex
                    , n = e[i]
                    , r = e[i - 1];
                t: {
                    e: {
                        var o;
                        i: {
                            n: if (!(t < n)) {
                                for (var a = i + 2; ;) {
                                    if (void 0 === n) {
                                        if (t < r)
                                            break n;
                                        return i = e.length,
                                            this._cachedIndex = i,
                                            this.afterEnd_(i - 1, t, r)
                                    }
                                    if (i === a)
                                        break;
                                    if (r = n,
                                        n = e[++i],
                                        t < n)
                                        break e
                                }
                                o = e.length;
                                break i
                            }
                            {
                                if (t >= r)
                                    break t;
                                var s = e[1];
                                t < s && (i = 2,
                                    r = s);
                                for (var a = i - 2; ;) {
                                    if (void 0 === r)
                                        return this._cachedIndex = 0,
                                            this.beforeStart_(0, t, n);
                                    if (i === a)
                                        break;
                                    if (n = r,
                                        r = e[--i - 1],
                                        t >= r)
                                        break e
                                }
                                o = i,
                                    i = 0
                            }
                        }
                        for (; i < o;) {
                            var h = i + o >>> 1;
                            t < e[h] ? o = h : i = h + 1
                        }
                        if (n = e[i],
                            void 0 === (r = e[i - 1]))
                            return this._cachedIndex = 0,
                                this.beforeStart_(0, t, n);
                        if (void 0 === n)
                            return i = e.length,
                                this._cachedIndex = i,
                                this.afterEnd_(i - 1, r, t)
                    }
                    this._cachedIndex = i,
                        this.intervalChanged_(i, r, n)
                }
                return this.interpolate_(i, r, t, n)
            },
            settings: null,
            DefaultSettings_: {},
            getSettings_: function () {
                return this.settings || this.DefaultSettings_
            },
            copySampleValue_: function (t) {
                for (var e = this.resultBuffer, i = this.sampleValues, n = this.valueSize, r = t * n, o = 0; o !== n; ++o)
                    e[o] = i[r + o];
                return e
            },
            interpolate_: function () {
                throw new Error("call to abstract method")
            },
            intervalChanged_: function () { }
        }),
        //!\ DECLARE ALIAS AFTER assign prototype !
        Object.assign(nr.prototype, {
            beforeStart_: nr.prototype.copySampleValue_,
            afterEnd_: nr.prototype.copySampleValue_
        }),
        rr.prototype = Object.assign(Object.create(nr.prototype), {
            constructor: rr,
            interpolate_: function (t, e, i, n) {
                for (var r = this.resultBuffer, o = this.sampleValues, s = this.valueSize, h = t * s, l = (i - e) / (n - e), c = h + s; h !== c; h += 4)
                    a.slerpFlat(r, 0, o, h - s, o, h, l);
                return r
            }
        }),
        or.prototype = Object.assign(Object.create(ur.prototype), {
            constructor: or,
            ValueTypeName: "quaternion",
            DefaultInterpolation: Hs,
            InterpolantFactoryMethodLinear: function (t) {
                return new rr(this.times, this.values, this.getValueSize(), t)
            },
            InterpolantFactoryMethodSmooth: void 0
        }),
        ar.prototype = Object.assign(Object.create(ur.prototype), {
            constructor: ar,
            ValueTypeName: "color"
        }),
        sr.prototype = Object.assign(Object.create(ur.prototype), {
            constructor: sr,
            ValueTypeName: "number"
        }),
        hr.prototype = Object.assign(Object.create(nr.prototype), {
            constructor: hr,
            DefaultSettings_: {
                endingStart: Ws,
                endingEnd: Ws
            },
            intervalChanged_: function (t, e, i) {
                var n = this.parameterPositions
                    , r = t - 2
                    , o = t + 1
                    , a = n[r]
                    , s = n[o];
                if (void 0 === a)
                    switch (this.getSettings_().endingStart) {
                        case Xs:
                            r = t,
                                a = 2 * e - i;
                            break;
                        case Ys:
                            r = n.length - 2,
                                a = e + n[r] - n[r + 1];
                            break;
                        default:
                            r = t,
                                a = i
                    }
                if (void 0 === s)
                    switch (this.getSettings_().endingEnd) {
                        case Xs:
                            o = t,
                                s = 2 * i - e;
                            break;
                        case Ys:
                            o = 1,
                                s = i + n[1] - n[0];
                            break;
                        default:
                            o = t - 1,
                                s = e
                    }
                var h = .5 * (i - e)
                    , l = this.valueSize;
                this._weightPrev = h / (e - a),
                    this._weightNext = h / (s - i),
                    this._offsetPrev = r * l,
                    this._offsetNext = o * l
            },
            interpolate_: function (t, e, i, n) {
                for (var r = this.resultBuffer, o = this.sampleValues, a = this.valueSize, s = t * a, h = s - a, l = this._offsetPrev, c = this._offsetNext, u = this._weightPrev, d = this._weightNext, p = (i - e) / (n - e), f = p * p, m = f * p, v = -u * m + 2 * u * f - u * p, g = (1 + u) * m + (-1.5 - 2 * u) * f + (-.5 + u) * p + 1, _ = (-1 - d) * m + (1.5 + d) * f + .5 * p, y = d * m - d * f, x = 0; x !== a; ++x)
                    r[x] = v * o[l + x] + g * o[h + x] + _ * o[s + x] + y * o[c + x];
                return r
            }
        }),
        lr.prototype = Object.assign(Object.create(nr.prototype), {
            constructor: lr,
            interpolate_: function (t, e, i, n) {
                for (var r = this.resultBuffer, o = this.sampleValues, a = this.valueSize, s = t * a, h = s - a, l = (i - e) / (n - e), c = 1 - l, u = 0; u !== a; ++u)
                    r[u] = o[h + u] * c + o[s + u] * l;
                return r
            }
        }),
        cr.prototype = Object.assign(Object.create(nr.prototype), {
            constructor: cr,
            interpolate_: function (t) {
                return this.copySampleValue_(t - 1)
            }
        });
    var Fh = {
        arraySlice: function (t, e, i) {
            return Fh.isTypedArray(t) ? new t.constructor(t.subarray(e, void 0 !== i ? i : t.length)) : t.slice(e, i)
        },
        convertArray: function (t, e, i) {
            return !t || !i && t.constructor === e ? t : "number" == typeof e.BYTES_PER_ELEMENT ? new e(t) : Array.prototype.slice.call(t)
        },
        isTypedArray: function (t) {
            return ArrayBuffer.isView(t) && !(t instanceof DataView)
        },
        getKeyframeOrder: function (t) {
            function e(e, i) {
                return t[e] - t[i]
            }
            for (var i = t.length, n = new Array(i), r = 0; r !== i; ++r)
                n[r] = r;
            return n.sort(e),
                n
        },
        sortedArray: function (t, e, i) {
            for (var n = t.length, r = new t.constructor(n), o = 0, a = 0; a !== n; ++o)
                for (var s = i[o] * e, h = 0; h !== e; ++h)
                    r[a++] = t[s + h];
            return r
        },
        flattenJSON: function (t, e, i, n) {
            for (var r = 1, o = t[0]; void 0 !== o && void 0 === o[n];)
                o = t[r++];
            if (void 0 !== o) {
                var a = o[n];
                if (void 0 !== a)
                    if (Array.isArray(a))
                        do {
                            a = o[n],
                                void 0 !== a && (e.push(o.time),
                                    i.push.apply(i, a)),
                                o = t[r++]
                        } while (void 0 !== o);
                    else if (void 0 !== a.toArray)
                        do {
                            a = o[n],
                                void 0 !== a && (e.push(o.time),
                                    a.toArray(i, i.length)),
                                o = t[r++]
                        } while (void 0 !== o);
                    else
                        do {
                            a = o[n],
                                void 0 !== a && (e.push(o.time),
                                    i.push(a)),
                                o = t[r++]
                        } while (void 0 !== o)
            }
        }
    };
    Object.assign(ur, {
        parse: function (t) {
            if (void 0 === t.type)
                throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
            var e = ur._getTrackTypeForValueTypeName(t.type);
            if (void 0 === t.times) {
                var i = []
                    , n = [];
                Fh.flattenJSON(t.keys, i, n, "value"),
                    t.times = i,
                    t.values = n
            }
            return void 0 !== e.parse ? e.parse(t) : new e(t.name, t.times, t.values, t.interpolation)
        },
        toJSON: function (t) {
            var e, i = t.constructor;
            if (void 0 !== i.toJSON)
                e = i.toJSON(t);
            else {
                e = {
                    name: t.name,
                    times: Fh.convertArray(t.times, Array),
                    values: Fh.convertArray(t.values, Array)
                };
                var n = t.getInterpolation();
                n !== t.DefaultInterpolation && (e.interpolation = n)
            }
            return e.type = t.ValueTypeName,
                e
        },
        _getTrackTypeForValueTypeName: function (t) {
            switch (t.toLowerCase()) {
                case "scalar":
                case "double":
                case "float":
                case "number":
                case "integer":
                    return sr;
                case "vector":
                case "vector2":
                case "vector3":
                case "vector4":
                    return dr;
                case "color":
                    return ar;
                case "quaternion":
                    return or;
                case "bool":
                case "boolean":
                    return ir;
                case "string":
                    return er
            }
            throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + t)
        }
    }),
        Object.assign(ur.prototype, {
            constructor: ur,
            TimeBufferType: Float32Array,
            ValueBufferType: Float32Array,
            DefaultInterpolation: Hs,
            InterpolantFactoryMethodDiscrete: function (t) {
                return new cr(this.times, this.values, this.getValueSize(), t)
            },
            InterpolantFactoryMethodLinear: function (t) {
                return new lr(this.times, this.values, this.getValueSize(), t)
            },
            InterpolantFactoryMethodSmooth: function (t) {
                return new hr(this.times, this.values, this.getValueSize(), t)
            },
            setInterpolation: function (t) {
                var e;
                switch (t) {
                    case ks:
                        e = this.InterpolantFactoryMethodDiscrete;
                        break;
                    case Hs:
                        e = this.InterpolantFactoryMethodLinear;
                        break;
                    case Vs:
                        e = this.InterpolantFactoryMethodSmooth
                }
                if (void 0 === e) {
                    var i = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
                    if (void 0 === this.createInterpolant) {
                        if (t === this.DefaultInterpolation)
                            throw new Error(i);
                        this.setInterpolation(this.DefaultInterpolation)
                    }
                    return void console.warn("THREE.KeyframeTrack:", i)
                }
                this.createInterpolant = e
            },
            getInterpolation: function () {
                switch (this.createInterpolant) {
                    case this.InterpolantFactoryMethodDiscrete:
                        return ks;
                    case this.InterpolantFactoryMethodLinear:
                        return Hs;
                    case this.InterpolantFactoryMethodSmooth:
                        return Vs
                }
            },
            getValueSize: function () {
                return this.values.length / this.times.length
            },
            shift: function (t) {
                if (0 !== t)
                    for (var e = this.times, i = 0, n = e.length; i !== n; ++i)
                        e[i] += t;
                return this
            },
            scale: function (t) {
                if (1 !== t)
                    for (var e = this.times, i = 0, n = e.length; i !== n; ++i)
                        e[i] *= t;
                return this
            },
            trim: function (t, e) {
                for (var i = this.times, n = i.length, r = 0, o = n - 1; r !== n && i[r] < t;)
                    ++r;
                for (; -1 !== o && i[o] > e;)
                    --o;
                if (++o,
                    0 !== r || o !== n) {
                    r >= o && (o = Math.max(o, 1),
                        r = o - 1);
                    var a = this.getValueSize();
                    this.times = Fh.arraySlice(i, r, o),
                        this.values = Fh.arraySlice(this.values, r * a, o * a)
                }
                return this
            },
            validate: function () {
                var t = !0
                    , e = this.getValueSize();
                e - Math.floor(e) != 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this),
                    t = !1);
                var i = this.times
                    , n = this.values
                    , r = i.length;
                0 === r && (console.error("THREE.KeyframeTrack: Track is empty.", this),
                    t = !1);
                for (var o = null, a = 0; a !== r; a++) {
                    var s = i[a];
                    if ("number" == typeof s && isNaN(s)) {
                        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, a, s),
                            t = !1;
                        break
                    }
                    if (null !== o && o > s) {
                        console.error("THREE.KeyframeTrack: Out of order keys.", this, a, s, o),
                            t = !1;
                        break
                    }
                    o = s
                }
                if (void 0 !== n && Fh.isTypedArray(n))
                    for (var a = 0, h = n.length; a !== h; ++a) {
                        var l = n[a];
                        if (isNaN(l)) {
                            console.error("THREE.KeyframeTrack: Value is not a valid number.", this, a, l),
                                t = !1;
                            break
                        }
                    }
                return t
            },
            optimize: function () {
                for (var t = this.times, e = this.values, i = this.getValueSize(), n = this.getInterpolation() === Vs, r = 1, o = t.length - 1, a = 1; a < o; ++a) {
                    var s = !1
                        , h = t[a];
                    if (h !== t[a + 1] && (1 !== a || h !== h[0]))
                        if (n)
                            s = !0;
                        else
                            for (var l = a * i, c = l - i, u = l + i, d = 0; d !== i; ++d) {
                                var p = e[l + d];
                                if (p !== e[c + d] || p !== e[u + d]) {
                                    s = !0;
                                    break
                                }
                            }
                    if (s) {
                        if (a !== r) {
                            t[r] = t[a];
                            for (var f = a * i, m = r * i, d = 0; d !== i; ++d)
                                e[m + d] = e[f + d]
                        }
                        ++r
                    }
                }
                if (o > 0) {
                    t[r] = t[o];
                    for (var f = o * i, m = r * i, d = 0; d !== i; ++d)
                        e[m + d] = e[f + d];
                    ++r
                }
                return r !== t.length && (this.times = Fh.arraySlice(t, 0, r),
                    this.values = Fh.arraySlice(e, 0, r * i)),
                    this
            }
        }),
        dr.prototype = Object.assign(Object.create(ur.prototype), {
            constructor: dr,
            ValueTypeName: "vector"
        }),
        Object.assign(pr, {
            parse: function (t) {
                for (var e = [], i = t.tracks, n = 1 / (t.fps || 1), r = 0, o = i.length; r !== o; ++r)
                    e.push(ur.parse(i[r]).scale(n));
                return new pr(t.name, t.duration, e)
            },
            toJSON: function (t) {
                for (var e = [], i = t.tracks, n = {
                    name: t.name,
                    duration: t.duration,
                    tracks: e
                }, r = 0, o = i.length; r !== o; ++r)
                    e.push(ur.toJSON(i[r]));
                return n
            },
            CreateFromMorphTargetSequence: function (t, e, i, n) {
                for (var r = e.length, o = [], a = 0; a < r; a++) {
                    var s = []
                        , h = [];
                    s.push((a + r - 1) % r, a, (a + 1) % r),
                        h.push(0, 1, 0);
                    var l = Fh.getKeyframeOrder(s);
                    s = Fh.sortedArray(s, 1, l),
                        h = Fh.sortedArray(h, 1, l),
                        n || 0 !== s[0] || (s.push(r),
                            h.push(h[0])),
                        o.push(new sr(".morphTargetInfluences[" + e[a].name + "]", s, h).scale(1 / i))
                }
                return new pr(t, -1, o)
            },
            findByName: function (t, e) {
                var i = t;
                if (!Array.isArray(t)) {
                    var n = t;
                    i = n.geometry && n.geometry.animations || n.animations
                }
                for (var r = 0; r < i.length; r++)
                    if (i[r].name === e)
                        return i[r];
                return null
            },
            CreateClipsFromMorphTargetSequences: function (t, e, i) {
                for (var n = {}, r = /^([\w-]*?)([\d]+)$/, o = 0, a = t.length; o < a; o++) {
                    var s = t[o]
                        , h = s.name.match(r);
                    if (h && h.length > 1) {
                        var l = h[1]
                            , c = n[l];
                        c || (n[l] = c = []),
                            c.push(s)
                    }
                }
                var u = [];
                for (var l in n)
                    u.push(pr.CreateFromMorphTargetSequence(l, n[l], e, i));
                return u
            },
            parseAnimation: function (t, e) {
                if (!t)
                    return console.error("THREE.AnimationClip: No animation in JSONLoader data."),
                        null;
                for (var i = function (t, e, i, n, r) {
                    if (0 !== i.length) {
                        var o = []
                            , a = [];
                        Fh.flattenJSON(i, o, a, n),
                            0 !== o.length && r.push(new t(e, o, a))
                    }
                }, n = [], r = t.name || "default", o = t.length || -1, a = t.fps || 30, s = t.hierarchy || [], h = 0; h < s.length; h++) {
                    var l = s[h].keys;
                    if (l && 0 !== l.length)
                        if (l[0].morphTargets) {
                            for (var c = {}, u = 0; u < l.length; u++)
                                if (l[u].morphTargets)
                                    for (var d = 0; d < l[u].morphTargets.length; d++)
                                        c[l[u].morphTargets[d]] = -1;
                            for (var p in c) {
                                for (var f = [], m = [], d = 0; d !== l[u].morphTargets.length; ++d) {
                                    var v = l[u];
                                    f.push(v.time),
                                        m.push(v.morphTarget === p ? 1 : 0)
                                }
                                n.push(new sr(".morphTargetInfluence[" + p + "]", f, m))
                            }
                            o = c.length * (a || 1)
                        } else {
                            var g = ".bones[" + e[h].name + "]";
                            i(dr, g + ".position", l, "pos", n),
                                i(or, g + ".quaternion", l, "rot", n),
                                i(dr, g + ".scale", l, "scl", n)
                        }
                }
                return 0 === n.length ? null : new pr(r, o, n)
            }
        }),
        Object.assign(pr.prototype, {
            resetDuration: function () {
                for (var t = this.tracks, e = 0, i = 0, n = t.length; i !== n; ++i) {
                    var r = this.tracks[i];
                    e = Math.max(e, r.times[r.times.length - 1])
                }
                this.duration = e
            },
            trim: function () {
                for (var t = 0; t < this.tracks.length; t++)
                    this.tracks[t].trim(0, this.duration);
                return this
            },
            optimize: function () {
                for (var t = 0; t < this.tracks.length; t++)
                    this.tracks[t].optimize();
                return this
            }
        }),
        Object.assign(fr.prototype, {
            load: function (t, e, i, n) {
                var r = this;
                new fn(r.manager).load(t, function (t) {
                    e(r.parse(JSON.parse(t)))
                }, i, n)
            },
            setTextures: function (t) {
                this.textures = t
            },
            parse: function (t) {
                function e(t) {
                    return void 0 === i[t] && console.warn("THREE.MaterialLoader: Undefined texture", t),
                        i[t]
                }
                var i = this.textures
                    , n = new Rh[t.type];
                if (void 0 !== t.uuid && (n.uuid = t.uuid),
                    void 0 !== t.name && (n.name = t.name),
                    void 0 !== t.color && n.color.setHex(t.color),
                    void 0 !== t.roughness && (n.roughness = t.roughness),
                    void 0 !== t.metalness && (n.metalness = t.metalness),
                    void 0 !== t.emissive && n.emissive.setHex(t.emissive),
                    void 0 !== t.specular && n.specular.setHex(t.specular),
                    void 0 !== t.shininess && (n.shininess = t.shininess),
                    void 0 !== t.clearCoat && (n.clearCoat = t.clearCoat),
                    void 0 !== t.clearCoatRoughness && (n.clearCoatRoughness = t.clearCoatRoughness),
                    void 0 !== t.uniforms && (n.uniforms = t.uniforms),
                    void 0 !== t.vertexShader && (n.vertexShader = t.vertexShader),
                    void 0 !== t.fragmentShader && (n.fragmentShader = t.fragmentShader),
                    void 0 !== t.vertexColors && (n.vertexColors = t.vertexColors),
                    void 0 !== t.fog && (n.fog = t.fog),
                    void 0 !== t.flatShading && (n.flatShading = t.flatShading),
                    void 0 !== t.blending && (n.blending = t.blending),
                    void 0 !== t.side && (n.side = t.side),
                    void 0 !== t.opacity && (n.opacity = t.opacity),
                    void 0 !== t.transparent && (n.transparent = t.transparent),
                    void 0 !== t.alphaTest && (n.alphaTest = t.alphaTest),
                    void 0 !== t.depthTest && (n.depthTest = t.depthTest),
                    void 0 !== t.depthWrite && (n.depthWrite = t.depthWrite),
                    void 0 !== t.colorWrite && (n.colorWrite = t.colorWrite),
                    void 0 !== t.wireframe && (n.wireframe = t.wireframe),
                    void 0 !== t.wireframeLinewidth && (n.wireframeLinewidth = t.wireframeLinewidth),
                    void 0 !== t.wireframeLinecap && (n.wireframeLinecap = t.wireframeLinecap),
                    void 0 !== t.wireframeLinejoin && (n.wireframeLinejoin = t.wireframeLinejoin),
                    void 0 !== t.rotation && (n.rotation = t.rotation),
                    1 !== t.linewidth && (n.linewidth = t.linewidth),
                    void 0 !== t.dashSize && (n.dashSize = t.dashSize),
                    void 0 !== t.gapSize && (n.gapSize = t.gapSize),
                    void 0 !== t.scale && (n.scale = t.scale),
                    void 0 !== t.skinning && (n.skinning = t.skinning),
                    void 0 !== t.morphTargets && (n.morphTargets = t.morphTargets),
                    void 0 !== t.dithering && (n.dithering = t.dithering),
                    void 0 !== t.visible && (n.visible = t.visible),
                    void 0 !== t.userData && (n.userData = t.userData),
                    void 0 !== t.shading && (n.flatShading = 1 === t.shading),
                    void 0 !== t.size && (n.size = t.size),
                    void 0 !== t.sizeAttenuation && (n.sizeAttenuation = t.sizeAttenuation),
                    void 0 !== t.map && (n.map = e(t.map)),
                    void 0 !== t.alphaMap && (n.alphaMap = e(t.alphaMap),
                        n.transparent = !0),
                    void 0 !== t.bumpMap && (n.bumpMap = e(t.bumpMap)),
                    void 0 !== t.bumpScale && (n.bumpScale = t.bumpScale),
                    void 0 !== t.normalMap && (n.normalMap = e(t.normalMap)),
                    void 0 !== t.normalScale) {
                    var o = t.normalScale;
                    !1 === Array.isArray(o) && (o = [o, o]),
                        n.normalScale = (new r).fromArray(o)
                }
                return void 0 !== t.displacementMap && (n.displacementMap = e(t.displacementMap)),
                    void 0 !== t.displacementScale && (n.displacementScale = t.displacementScale),
                    void 0 !== t.displacementBias && (n.displacementBias = t.displacementBias),
                    void 0 !== t.roughnessMap && (n.roughnessMap = e(t.roughnessMap)),
                    void 0 !== t.metalnessMap && (n.metalnessMap = e(t.metalnessMap)),
                    void 0 !== t.emissiveMap && (n.emissiveMap = e(t.emissiveMap)),
                    void 0 !== t.emissiveIntensity && (n.emissiveIntensity = t.emissiveIntensity),
                    void 0 !== t.specularMap && (n.specularMap = e(t.specularMap)),
                    void 0 !== t.envMap && (n.envMap = e(t.envMap)),
                    void 0 !== t.reflectivity && (n.reflectivity = t.reflectivity),
                    void 0 !== t.lightMap && (n.lightMap = e(t.lightMap)),
                    void 0 !== t.lightMapIntensity && (n.lightMapIntensity = t.lightMapIntensity),
                    void 0 !== t.aoMap && (n.aoMap = e(t.aoMap)),
                    void 0 !== t.aoMapIntensity && (n.aoMapIntensity = t.aoMapIntensity),
                    void 0 !== t.gradientMap && (n.gradientMap = e(t.gradientMap)),
                    n
            }
        }),
        Object.assign(mr.prototype, {
            load: function (t, e, i, n) {
                var r = this;
                new fn(r.manager).load(t, function (t) {
                    e(r.parse(JSON.parse(t)))
                }, i, n)
            },
            parse: function (t) {
                var e = new Pt
                    , i = t.data.index;
                if (void 0 !== i) {
                    var n = new zh[i.type](i.array);
                    e.setIndex(new vt(n, 1))
                }
                var r = t.data.attributes;
                for (var o in r) {
                    var a = r[o]
                        , n = new zh[a.type](a.array);
                    e.addAttribute(o, new vt(n, a.itemSize, a.normalized))
                }
                var h = t.data.groups || t.data.drawcalls || t.data.offsets;
                if (void 0 !== h)
                    for (var l = 0, c = h.length; l !== c; ++l) {
                        var u = h[l];
                        e.addGroup(u.start, u.count, u.materialIndex)
                    }
                var d = t.data.boundingSphere;
                if (void 0 !== d) {
                    var p = new s;
                    void 0 !== d.center && p.fromArray(d.center),
                        e.boundingSphere = new rt(p, d.radius)
                }
                return e
            }
        });
    var zh = {
        Int8Array: Int8Array,
        Uint8Array: Uint8Array,
        Uint8ClampedArray: "undefined" != typeof Uint8ClampedArray ? Uint8ClampedArray : Uint8Array,
        Int16Array: Int16Array,
        Uint16Array: Uint16Array,
        Int32Array: Int32Array,
        Uint32Array: Uint32Array,
        Float32Array: Float32Array,
        Float64Array: Float64Array
    };
    vr.Handlers = {
        handlers: [],
        add: function (t, e) {
            this.handlers.push(t, e)
        },
        get: function (t) {
            for (var e = this.handlers, i = 0, n = e.length; i < n; i += 2) {
                var r = e[i]
                    , o = e[i + 1];
                if (r.test(t))
                    return o
            }
            return null
        }
    },
        Object.assign(vr.prototype, {
            crossOrigin: void 0,
            initMaterials: function (t, e, i) {
                for (var n = [], r = 0; r < t.length; ++r)
                    n[r] = this.createMaterial(t[r], e, i);
                return n
            },
            createMaterial: function () {
                var t = {
                    NoBlending: la,
                    NormalBlending: ca,
                    AdditiveBlending: ua,
                    SubtractiveBlending: da,
                    MultiplyBlending: pa,
                    CustomBlending: fa
                }
                    , e = new Z
                    , i = new yn
                    , n = new fr;
                return function (r, o, a) {
                    function s(t, e, n, r, s) {
                        var l, c = o + t, u = vr.Handlers.get(c);
                        null !== u ? l = u.load(c) : (i.setCrossOrigin(a),
                            l = i.load(c)),
                            void 0 !== e && (l.repeat.fromArray(e),
                                1 !== e[0] && (l.wrapS = es),
                                1 !== e[1] && (l.wrapT = es)),
                            void 0 !== n && l.offset.fromArray(n),
                            void 0 !== r && ("repeat" === r[0] && (l.wrapS = es),
                                "mirror" === r[0] && (l.wrapS = ns),
                                "repeat" === r[1] && (l.wrapT = es),
                                "mirror" === r[1] && (l.wrapT = ns)),
                            void 0 !== s && (l.anisotropy = s);
                        var d = sh.generateUUID();
                        return h[d] = l,
                            d
                    }
                    var h = {}
                        , l = {
                            uuid: sh.generateUUID(),
                            type: "MeshLambertMaterial"
                        };
                    for (var c in r) {
                        var u = r[c];
                        switch (c) {
                            case "DbgColor":
                            case "DbgIndex":
                            case "opticalDensity":
                            case "illumination":
                                break;
                            case "DbgName":
                                l.name = u;
                                break;
                            case "blending":
                                l.blending = t[u];
                                break;
                            case "colorAmbient":
                            case "mapAmbient":
                                console.warn("THREE.Loader.createMaterial:", c, "is no longer supported.");
                                break;
                            case "colorDiffuse":
                                l.color = e.fromArray(u).getHex();
                                break;
                            case "colorSpecular":
                                l.specular = e.fromArray(u).getHex();
                                break;
                            case "colorEmissive":
                                l.emissive = e.fromArray(u).getHex();
                                break;
                            case "specularCoef":
                                l.shininess = u;
                                break;
                            case "shading":
                                "basic" === u.toLowerCase() && (l.type = "MeshBasicMaterial"),
                                    "phong" === u.toLowerCase() && (l.type = "MeshPhongMaterial"),
                                    "standard" === u.toLowerCase() && (l.type = "MeshStandardMaterial");
                                break;
                            case "mapDiffuse":
                                l.map = s(u, r.mapDiffuseRepeat, r.mapDiffuseOffset, r.mapDiffuseWrap, r.mapDiffuseAnisotropy);
                                break;
                            case "mapDiffuseRepeat":
                            case "mapDiffuseOffset":
                            case "mapDiffuseWrap":
                            case "mapDiffuseAnisotropy":
                                break;
                            case "mapEmissive":
                                l.emissiveMap = s(u, r.mapEmissiveRepeat, r.mapEmissiveOffset, r.mapEmissiveWrap, r.mapEmissiveAnisotropy);
                                break;
                            case "mapEmissiveRepeat":
                            case "mapEmissiveOffset":
                            case "mapEmissiveWrap":
                            case "mapEmissiveAnisotropy":
                                break;
                            case "mapLight":
                                l.lightMap = s(u, r.mapLightRepeat, r.mapLightOffset, r.mapLightWrap, r.mapLightAnisotropy);
                                break;
                            case "mapLightRepeat":
                            case "mapLightOffset":
                            case "mapLightWrap":
                            case "mapLightAnisotropy":
                                break;
                            case "mapAO":
                                l.aoMap = s(u, r.mapAORepeat, r.mapAOOffset, r.mapAOWrap, r.mapAOAnisotropy);
                                break;
                            case "mapAORepeat":
                            case "mapAOOffset":
                            case "mapAOWrap":
                            case "mapAOAnisotropy":
                                break;
                            case "mapBump":
                                l.bumpMap = s(u, r.mapBumpRepeat, r.mapBumpOffset, r.mapBumpWrap, r.mapBumpAnisotropy);
                                break;
                            case "mapBumpScale":
                                l.bumpScale = u;
                                break;
                            case "mapBumpRepeat":
                            case "mapBumpOffset":
                            case "mapBumpWrap":
                            case "mapBumpAnisotropy":
                                break;
                            case "mapNormal":
                                l.normalMap = s(u, r.mapNormalRepeat, r.mapNormalOffset, r.mapNormalWrap, r.mapNormalAnisotropy);
                                break;
                            case "mapNormalFactor":
                                l.normalScale = [u, u];
                                break;
                            case "mapNormalRepeat":
                            case "mapNormalOffset":
                            case "mapNormalWrap":
                            case "mapNormalAnisotropy":
                                break;
                            case "mapSpecular":
                                l.specularMap = s(u, r.mapSpecularRepeat, r.mapSpecularOffset, r.mapSpecularWrap, r.mapSpecularAnisotropy);
                                break;
                            case "mapSpecularRepeat":
                            case "mapSpecularOffset":
                            case "mapSpecularWrap":
                            case "mapSpecularAnisotropy":
                                break;
                            case "mapMetalness":
                                l.metalnessMap = s(u, r.mapMetalnessRepeat, r.mapMetalnessOffset, r.mapMetalnessWrap, r.mapMetalnessAnisotropy);
                                break;
                            case "mapMetalnessRepeat":
                            case "mapMetalnessOffset":
                            case "mapMetalnessWrap":
                            case "mapMetalnessAnisotropy":
                                break;
                            case "mapRoughness":
                                l.roughnessMap = s(u, r.mapRoughnessRepeat, r.mapRoughnessOffset, r.mapRoughnessWrap, r.mapRoughnessAnisotropy);
                                break;
                            case "mapRoughnessRepeat":
                            case "mapRoughnessOffset":
                            case "mapRoughnessWrap":
                            case "mapRoughnessAnisotropy":
                                break;
                            case "mapAlpha":
                                l.alphaMap = s(u, r.mapAlphaRepeat, r.mapAlphaOffset, r.mapAlphaWrap, r.mapAlphaAnisotropy);
                                break;
                            case "mapAlphaRepeat":
                            case "mapAlphaOffset":
                            case "mapAlphaWrap":
                            case "mapAlphaAnisotropy":
                                break;
                            case "flipSided":
                                l.side = ia;
                                break;
                            case "doubleSided":
                                l.side = na;
                                break;
                            case "transparency":
                                console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity"),
                                    l.opacity = u;
                                break;
                            case "depthTest":
                            case "depthWrite":
                            case "colorWrite":
                            case "opacity":
                            case "reflectivity":
                            case "transparent":
                            case "visible":
                            case "wireframe":
                                l[c] = u;
                                break;
                            case "vertexColors":
                                !0 === u && (l.vertexColors = ha),
                                    "face" === u && (l.vertexColors = sa);
                                break;
                            default:
                                console.error("THREE.Loader.createMaterial: Unsupported", c, u)
                        }
                    }
                    return "MeshBasicMaterial" === l.type && delete l.emissive,
                        "MeshPhongMaterial" !== l.type && delete l.specular,
                        l.opacity < 1 && (l.transparent = !0),
                        n.setTextures(h),
                        n.parse(l)
                }
            }()
        });
    var Gh = {
        decodeText: function (t) {
            if ("undefined" != typeof TextDecoder)
                return (new TextDecoder).decode(t);
            for (var e = "", i = 0, n = t.length; i < n; i++)
                e += String.fromCharCode(t[i]);
            return e
        },
        extractUrlBase: function (t) {
            var e = t.split("/");
            return 1 === e.length ? "./" : (e.pop(),
                e.join("/") + "/")
        }
    };
    Object.assign(gr.prototype, {
        load: function (t, e, i, n) {
            var r = this
                , o = this.texturePath && "string" == typeof this.texturePath ? this.texturePath : Gh.extractUrlBase(t)
                , a = new fn(this.manager);
            a.setWithCredentials(this.withCredentials),
                a.load(t, function (i) {
                    var n = JSON.parse(i)
                        , a = n.metadata;
                    if (void 0 !== a) {
                        var s = a.type;
                        if (void 0 !== s) {
                            if ("object" === s.toLowerCase())
                                return void console.error("THREE.JSONLoader: " + t + " should be loaded with THREE.ObjectLoader instead.");
                            if ("scene" === s.toLowerCase())
                                return void console.error("THREE.JSONLoader: " + t + " should be loaded with THREE.SceneLoader instead.")
                        }
                    }
                    var h = r.parse(n, o);
                    e(h.geometry, h.materials)
                }, i, n)
        },
        setTexturePath: function (t) {
            this.texturePath = t
        },
        parse: function () {
            function t(t, e) {
                function i(t, e) {
                    return t & 1 << e
                }
                var n, o, a, h, l, c, u, d, p, f, m, v, g, _, y, x, b, w, S, E, T, M, A, P, R, L, O, I = t.faces, C = t.vertices, D = t.normals, N = t.colors, U = t.scale, B = 0;
                if (void 0 !== t.uvs) {
                    for (n = 0; n < t.uvs.length; n++)
                        t.uvs[n].length && B++;
                    for (n = 0; n < B; n++)
                        e.faceVertexUvs[n] = []
                }
                for (h = 0,
                    l = C.length; h < l;)
                    w = new s,
                        w.x = C[h++] * U,
                        w.y = C[h++] * U,
                        w.z = C[h++] * U,
                        e.vertices.push(w);
                for (h = 0,
                    l = I.length; h < l;)
                    if (f = I[h++],
                        m = i(f, 0),
                        v = i(f, 1),
                        g = i(f, 3),
                        _ = i(f, 4),
                        y = i(f, 5),
                        x = i(f, 6),
                        b = i(f, 7),
                        m) {
                        if (E = new ft,
                            E.a = I[h],
                            E.b = I[h + 1],
                            E.c = I[h + 3],
                            T = new ft,
                            T.a = I[h + 1],
                            T.b = I[h + 2],
                            T.c = I[h + 3],
                            h += 4,
                            v && (p = I[h++],
                                E.materialIndex = p,
                                T.materialIndex = p),
                            a = e.faces.length,
                            g)
                            for (n = 0; n < B; n++)
                                for (P = t.uvs[n],
                                    e.faceVertexUvs[n][a] = [],
                                    e.faceVertexUvs[n][a + 1] = [],
                                    o = 0; o < 4; o++)
                                    d = I[h++],
                                        L = P[2 * d],
                                        O = P[2 * d + 1],
                                        R = new r(L, O),
                                        2 !== o && e.faceVertexUvs[n][a].push(R),
                                        0 !== o && e.faceVertexUvs[n][a + 1].push(R);
                        if (_ && (u = 3 * I[h++],
                            E.normal.set(D[u++], D[u++], D[u]),
                            T.normal.copy(E.normal)),
                            y)
                            for (n = 0; n < 4; n++)
                                u = 3 * I[h++],
                                    A = new s(D[u++], D[u++], D[u]),
                                    2 !== n && E.vertexNormals.push(A),
                                    0 !== n && T.vertexNormals.push(A);
                        if (x && (c = I[h++],
                            M = N[c],
                            E.color.setHex(M),
                            T.color.setHex(M)),
                            b)
                            for (n = 0; n < 4; n++)
                                c = I[h++],
                                    M = N[c],
                                    2 !== n && E.vertexColors.push(new Z(M)),
                                    0 !== n && T.vertexColors.push(new Z(M));
                        e.faces.push(E),
                            e.faces.push(T)
                    } else {
                        if (S = new ft,
                            S.a = I[h++],
                            S.b = I[h++],
                            S.c = I[h++],
                            v && (p = I[h++],
                                S.materialIndex = p),
                            a = e.faces.length,
                            g)
                            for (n = 0; n < B; n++)
                                for (P = t.uvs[n],
                                    e.faceVertexUvs[n][a] = [],
                                    o = 0; o < 3; o++)
                                    d = I[h++],
                                        L = P[2 * d],
                                        O = P[2 * d + 1],
                                        R = new r(L, O),
                                        e.faceVertexUvs[n][a].push(R);
                        if (_ && (u = 3 * I[h++],
                            S.normal.set(D[u++], D[u++], D[u])),
                            y)
                            for (n = 0; n < 3; n++)
                                u = 3 * I[h++],
                                    A = new s(D[u++], D[u++], D[u]),
                                    S.vertexNormals.push(A);
                        if (x && (c = I[h++],
                            S.color.setHex(N[c])),
                            b)
                            for (n = 0; n < 3; n++)
                                c = I[h++],
                                    S.vertexColors.push(new Z(N[c]));
                        e.faces.push(S)
                    }
            }
            function e(t, e) {
                var i = void 0 !== t.influencesPerVertex ? t.influencesPerVertex : 2;
                if (t.skinWeights)
                    for (var n = 0, r = t.skinWeights.length; n < r; n += i) {
                        var o = t.skinWeights[n]
                            , a = i > 1 ? t.skinWeights[n + 1] : 0
                            , s = i > 2 ? t.skinWeights[n + 2] : 0
                            , h = i > 3 ? t.skinWeights[n + 3] : 0;
                        e.skinWeights.push(new c(o, a, s, h))
                    }
                if (t.skinIndices)
                    for (var n = 0, r = t.skinIndices.length; n < r; n += i) {
                        var l = t.skinIndices[n]
                            , u = i > 1 ? t.skinIndices[n + 1] : 0
                            , d = i > 2 ? t.skinIndices[n + 2] : 0
                            , p = i > 3 ? t.skinIndices[n + 3] : 0;
                        e.skinIndices.push(new c(l, u, d, p))
                    }
                e.bones = t.bones,
                    e.bones && e.bones.length > 0 && (e.skinWeights.length !== e.skinIndices.length || e.skinIndices.length !== e.vertices.length) && console.warn("When skinning, number of vertices (" + e.vertices.length + "), skinIndices (" + e.skinIndices.length + "), and skinWeights (" + e.skinWeights.length + ") should match.")
            }
            function i(t, e) {
                var i = t.scale;
                if (void 0 !== t.morphTargets)
                    for (var n = 0, r = t.morphTargets.length; n < r; n++) {
                        e.morphTargets[n] = {},
                            e.morphTargets[n].name = t.morphTargets[n].name,
                            e.morphTargets[n].vertices = [];
                        for (var o = e.morphTargets[n].vertices, a = t.morphTargets[n].vertices, h = 0, l = a.length; h < l; h += 3) {
                            var c = new s;
                            c.x = a[h] * i,
                                c.y = a[h + 1] * i,
                                c.z = a[h + 2] * i,
                                o.push(c)
                        }
                    }
                if (void 0 !== t.morphColors && t.morphColors.length > 0) {
                    console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');
                    for (var u = e.faces, d = t.morphColors[0].colors, n = 0, r = u.length; n < r; n++)
                        u[n].color.fromArray(d, 3 * n)
                }
            }
            function n(t, e) {
                var i = []
                    , n = [];
                void 0 !== t.animation && n.push(t.animation),
                    void 0 !== t.animations && (t.animations.length ? n = n.concat(t.animations) : n.push(t.animations));
                for (var r = 0; r < n.length; r++) {
                    var o = pr.parseAnimation(n[r], e.bones);
                    o && i.push(o)
                }
                if (e.morphTargets) {
                    var a = pr.CreateClipsFromMorphTargetSequences(e.morphTargets, 10);
                    i = i.concat(a)
                }
                i.length > 0 && (e.animations = i)
            }
            return function (r, o) {
                void 0 !== r.data && (r = r.data),
                    void 0 !== r.scale ? r.scale = 1 / r.scale : r.scale = 1;
                var a = new mt;
                return t(r, a),
                    e(r, a),
                    i(r, a),
                    n(r, a),
                    a.computeFaceNormals(),
                    a.computeBoundingSphere(),
                    void 0 === r.materials || 0 === r.materials.length ? {
                        geometry: a
                    } : {
                        geometry: a,
                        materials: vr.prototype.initMaterials(r.materials, o, this.crossOrigin)
                    }
            }
        }()
    }),
        Object.assign(_r.prototype, {
            load: function (t, e, i, n) {
                "" === this.texturePath && (this.texturePath = t.substring(0, t.lastIndexOf("/") + 1));
                var r = this;
                new fn(r.manager).load(t, function (i) {
                    var o = null;
                    try {
                        o = JSON.parse(i)
                    } catch (e) {
                        return void 0 !== n && n(e),
                            void console.error("THREE:ObjectLoader: Can't parse " + t + ".", e.message)
                    }
                    var a = o.metadata;
                    if (void 0 === a || void 0 === a.type || "geometry" === a.type.toLowerCase())
                        return void console.error("THREE.ObjectLoader: Can't load " + t + ". Use THREE.JSONLoader instead.");
                    r.parse(o, e)
                }, i, n)
            },
            setTexturePath: function (t) {
                this.texturePath = t
            },
            setCrossOrigin: function (t) {
                this.crossOrigin = t
            },
            parse: function (t, e) {
                var i = this.parseShape(t.shapes)
                    , n = this.parseGeometries(t.geometries, i)
                    , r = this.parseImages(t.images, function () {
                        void 0 !== e && e(s)
                    })
                    , o = this.parseTextures(t.textures, r)
                    , a = this.parseMaterials(t.materials, o)
                    , s = this.parseObject(t.object, n, a);
                return t.animations && (s.animations = this.parseAnimations(t.animations)),
                    void 0 !== t.images && 0 !== t.images.length || void 0 !== e && e(s),
                    s
            },
            parseShape: function (t) {
                var e = {};
                if (void 0 !== t)
                    for (var i = 0, n = t.length; i < n; i++) {
                        var r = (new Vn).fromJSON(t[i]);
                        e[r.uuid] = r
                    }
                return e
            },
            parseGeometries: function (t, e) {
                var i = {};
                if (void 0 !== t)
                    for (var n = new gr, r = new mr, o = 0, a = t.length; o < a; o++) {
                        var s, h = t[o];
                        switch (h.type) {
                            case "PlaneGeometry":
                            case "PlaneBufferGeometry":
                                s = new Ph[h.type](h.width, h.height, h.widthSegments, h.heightSegments);
                                break;
                            case "BoxGeometry":
                            case "BoxBufferGeometry":
                            case "CubeGeometry":
                                s = new Ph[h.type](h.width, h.height, h.depth, h.widthSegments, h.heightSegments, h.depthSegments);
                                break;
                            case "CircleGeometry":
                            case "CircleBufferGeometry":
                                s = new Ph[h.type](h.radius, h.segments, h.thetaStart, h.thetaLength);
                                break;
                            case "CylinderGeometry":
                            case "CylinderBufferGeometry":
                                s = new Ph[h.type](h.radiusTop, h.radiusBottom, h.height, h.radialSegments, h.heightSegments, h.openEnded, h.thetaStart, h.thetaLength);
                                break;
                            case "ConeGeometry":
                            case "ConeBufferGeometry":
                                s = new Ph[h.type](h.radius, h.height, h.radialSegments, h.heightSegments, h.openEnded, h.thetaStart, h.thetaLength);
                                break;
                            case "SphereGeometry":
                            case "SphereBufferGeometry":
                                s = new Ph[h.type](h.radius, h.widthSegments, h.heightSegments, h.phiStart, h.phiLength, h.thetaStart, h.thetaLength);
                                break;
                            case "DodecahedronGeometry":
                            case "DodecahedronBufferGeometry":
                            case "IcosahedronGeometry":
                            case "IcosahedronBufferGeometry":
                            case "OctahedronGeometry":
                            case "OctahedronBufferGeometry":
                            case "TetrahedronGeometry":
                            case "TetrahedronBufferGeometry":
                                s = new Ph[h.type](h.radius, h.detail);
                                break;
                            case "RingGeometry":
                            case "RingBufferGeometry":
                                s = new Ph[h.type](h.innerRadius, h.outerRadius, h.thetaSegments, h.phiSegments, h.thetaStart, h.thetaLength);
                                break;
                            case "TorusGeometry":
                            case "TorusBufferGeometry":
                                s = new Ph[h.type](h.radius, h.tube, h.radialSegments, h.tubularSegments, h.arc);
                                break;
                            case "TorusKnotGeometry":
                            case "TorusKnotBufferGeometry":
                                s = new Ph[h.type](h.radius, h.tube, h.tubularSegments, h.radialSegments, h.p, h.q);
                                break;
                            case "LatheGeometry":
                            case "LatheBufferGeometry":
                                s = new Ph[h.type](h.points, h.segments, h.phiStart, h.phiLength);
                                break;
                            case "PolyhedronGeometry":
                            case "PolyhedronBufferGeometry":
                                s = new Ph[h.type](h.vertices, h.indices, h.radius, h.details);
                                break;
                            case "ShapeGeometry":
                            case "ShapeBufferGeometry":
                                for (var l = [], o = 0, a = h.shapes.length; o < a; o++) {
                                    var c = e[h.shapes[o]];
                                    l.push(c)
                                }
                                s = new Ph[h.type](l, h.curveSegments);
                                break;
                            case "BufferGeometry":
                                s = r.parse(h);
                                break;
                            case "Geometry":
                                s = n.parse(h, this.texturePath).geometry;
                                break;
                            default:
                                console.warn('THREE.ObjectLoader: Unsupported geometry type "' + h.type + '"');
                                continue
                        }
                        s.uuid = h.uuid,
                            void 0 !== h.name && (s.name = h.name),
                            i[h.uuid] = s
                    }
                return i
            },
            parseMaterials: function (t, e) {
                var i = {};
                if (void 0 !== t) {
                    var n = new fr;
                    n.setTextures(e);
                    for (var r = 0, o = t.length; r < o; r++) {
                        var a = t[r];
                        if ("MultiMaterial" === a.type) {
                            for (var s = [], h = 0; h < a.materials.length; h++)
                                s.push(n.parse(a.materials[h]));
                            i[a.uuid] = s
                        } else
                            i[a.uuid] = n.parse(a)
                    }
                }
                return i
            },
            parseAnimations: function (t) {
                for (var e = [], i = 0; i < t.length; i++) {
                    var n = pr.parse(t[i]);
                    e.push(n)
                }
                return e
            },
            parseImages: function (t, e) {
                var i = this
                    , n = {};
                if (void 0 !== t && t.length > 0) {
                    var r = new pn(e)
                        , o = new gn(r);
                    o.setCrossOrigin(this.crossOrigin);
                    for (var a = 0, s = t.length; a < s; a++) {
                        var h = t[a]
                            , l = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(h.url) ? h.url : i.texturePath + h.url;
                        n[h.uuid] = function (t) {
                            return i.manager.itemStart(t),
                                o.load(t, function () {
                                    i.manager.itemEnd(t)
                                }, void 0, function () {
                                    i.manager.itemEnd(t),
                                        i.manager.itemError(t)
                                })
                        }(l)
                    }
                }
                return n
            },
            parseTextures: function (t, e) {
                function i(t, e) {
                    return "number" == typeof t ? t : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", t),
                        e[t])
                }
                var n = {};
                if (void 0 !== t)
                    for (var r = 0, o = t.length; r < o; r++) {
                        var a = t[r];
                        void 0 === a.image && console.warn('THREE.ObjectLoader: No "image" specified for', a.uuid),
                            void 0 === e[a.image] && console.warn("THREE.ObjectLoader: Undefined image", a.image);
                        var s = new l(e[a.image]);
                        s.needsUpdate = !0,
                            s.uuid = a.uuid,
                            void 0 !== a.name && (s.name = a.name),
                            void 0 !== a.mapping && (s.mapping = i(a.mapping, jh)),
                            void 0 !== a.offset && s.offset.fromArray(a.offset),
                            void 0 !== a.repeat && s.repeat.fromArray(a.repeat),
                            void 0 !== a.center && s.center.fromArray(a.center),
                            void 0 !== a.rotation && (s.rotation = a.rotation),
                            void 0 !== a.wrap && (s.wrapS = i(a.wrap[0], kh),
                                s.wrapT = i(a.wrap[1], kh)),
                            void 0 !== a.minFilter && (s.minFilter = i(a.minFilter, Hh)),
                            void 0 !== a.magFilter && (s.magFilter = i(a.magFilter, Hh)),
                            void 0 !== a.anisotropy && (s.anisotropy = a.anisotropy),
                            void 0 !== a.flipY && (s.flipY = a.flipY),
                            n[a.uuid] = s
                    }
                return n
            },
            parseObject: function () {
                var t = new o;
                return function (e, i, n) {
                    function r(t) {
                        return void 0 === i[t] && console.warn("THREE.ObjectLoader: Undefined geometry", t),
                            i[t]
                    }
                    function o(t) {
                        if (void 0 !== t) {
                            if (Array.isArray(t)) {
                                for (var e = [], i = 0, r = t.length; i < r; i++) {
                                    var o = t[i];
                                    void 0 === n[o] && console.warn("THREE.ObjectLoader: Undefined material", o),
                                        e.push(n[o])
                                }
                                return e
                            }
                            return void 0 === n[t] && console.warn("THREE.ObjectLoader: Undefined material", t),
                                n[t]
                        }
                    }
                    var a;
                    switch (e.type) {
                        case "Scene":
                            a = new Me,
                                void 0 !== e.background && Number.isInteger(e.background) && (a.background = new Z(e.background)),
                                void 0 !== e.fog && ("Fog" === e.fog.type ? a.fog = new Te(e.fog.color, e.fog.near, e.fog.far) : "FogExp2" === e.fog.type && (a.fog = new Ee(e.fog.color, e.fog.density)));
                            break;
                        case "PerspectiveCamera":
                            a = new ge(e.fov, e.aspect, e.near, e.far),
                                void 0 !== e.focus && (a.focus = e.focus),
                                void 0 !== e.zoom && (a.zoom = e.zoom),
                                void 0 !== e.filmGauge && (a.filmGauge = e.filmGauge),
                                void 0 !== e.filmOffset && (a.filmOffset = e.filmOffset),
                                void 0 !== e.view && (a.view = Object.assign({}, e.view));
                            break;
                        case "OrthographicCamera":
                            a = new pt(e.left, e.right, e.top, e.bottom, e.near, e.far);
                            break;
                        case "AmbientLight":
                            a = new $n(e.color, e.intensity);
                            break;
                        case "DirectionalLight":
                            a = new Qn(e.color, e.intensity);
                            break;
                        case "PointLight":
                            a = new Jn(e.color, e.intensity, e.distance, e.decay);
                            break;
                        case "RectAreaLight":
                            a = new tr(e.color, e.intensity, e.width, e.height);
                            break;
                        case "SpotLight":
                            a = new Zn(e.color, e.intensity, e.distance, e.angle, e.penumbra, e.decay);
                            break;
                        case "HemisphereLight":
                            a = new Xn(e.color, e.groundColor, e.intensity);
                            break;
                        case "SkinnedMesh":
                            console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");
                        case "Mesh":
                            var s = r(e.geometry)
                                , h = o(e.material);
                            a = s.bones && s.bones.length > 0 ? new Ce(s, h) : new Ft(s, h);
                            break;
                        case "LOD":
                            a = new Le;
                            break;
                        case "Line":
                            a = new Ne(r(e.geometry), o(e.material), e.mode);
                            break;
                        case "LineLoop":
                            a = new Be(r(e.geometry), o(e.material));
                            break;
                        case "LineSegments":
                            a = new Ue(r(e.geometry), o(e.material));
                            break;
                        case "PointCloud":
                        case "Points":
                            a = new ze(r(e.geometry), o(e.material));
                            break;
                        case "Sprite":
                            a = new Re(o(e.material));
                            break;
                        case "Group":
                            a = new Ge;
                            break;
                        default:
                            a = new ut
                    }
                    if (a.uuid = e.uuid,
                        void 0 !== e.name && (a.name = e.name),
                        void 0 !== e.matrix ? (t.fromArray(e.matrix),
                            t.decompose(a.position, a.quaternion, a.scale)) : (void 0 !== e.position && a.position.fromArray(e.position),
                                void 0 !== e.rotation && a.rotation.fromArray(e.rotation),
                                void 0 !== e.quaternion && a.quaternion.fromArray(e.quaternion),
                                void 0 !== e.scale && a.scale.fromArray(e.scale)),
                        void 0 !== e.castShadow && (a.castShadow = e.castShadow),
                        void 0 !== e.receiveShadow && (a.receiveShadow = e.receiveShadow),
                        e.shadow && (void 0 !== e.shadow.bias && (a.shadow.bias = e.shadow.bias),
                            void 0 !== e.shadow.radius && (a.shadow.radius = e.shadow.radius),
                            void 0 !== e.shadow.mapSize && a.shadow.mapSize.fromArray(e.shadow.mapSize),
                            void 0 !== e.shadow.camera && (a.shadow.camera = this.parseObject(e.shadow.camera))),
                        void 0 !== e.visible && (a.visible = e.visible),
                        void 0 !== e.userData && (a.userData = e.userData),
                        void 0 !== e.children)
                        for (var l = e.children, c = 0; c < l.length; c++)
                            a.add(this.parseObject(l[c], i, n));
                    if ("LOD" === e.type)
                        for (var u = e.levels, d = 0; d < u.length; d++) {
                            var p = u[d]
                                , f = a.getObjectByProperty("uuid", p.object);
                            void 0 !== f && a.addLevel(f, p.distance)
                        }
                    return a
                }
            }()
        });
    var jh = {
        UVMapping: Ya,
        CubeReflectionMapping: qa,
        CubeRefractionMapping: Za,
        EquirectangularReflectionMapping: Ja,
        EquirectangularRefractionMapping: Ka,
        SphericalReflectionMapping: Qa,
        CubeUVReflectionMapping: $a,
        CubeUVRefractionMapping: ts
    }
        , kh = {
            RepeatWrapping: es,
            ClampToEdgeWrapping: is,
            MirroredRepeatWrapping: ns
        }
        , Hh = {
            NearestFilter: rs,
            NearestMipMapNearestFilter: os,
            NearestMipMapLinearFilter: as,
            LinearFilter: ss,
            LinearMipMapNearestFilter: hs,
            LinearMipMapLinearFilter: ls
        };
    yr.prototype = {
        constructor: yr,
        setOptions: function (t) {
            return this.options = t,
                this
        },
        load: function (t, e, i, n) {
            void 0 === t && (t = ""),
                void 0 !== this.path && (t = this.path + t);
            var r = this
                , o = Lh.get(t);
            if (void 0 !== o)
                return r.manager.itemStart(t),
                    setTimeout(function () {
                        e && e(o),
                            r.manager.itemEnd(t)
                    }, 0),
                    o;
            fetch(t).then(function (t) {
                return t.blob()
            }).then(function (t) {
                return createImageBitmap(t, r.options)
            }).then(function (i) {
                Lh.add(t, i),
                    e && e(i),
                    r.manager.itemEnd(t)
            }).catch(function (e) {
                n && n(e),
                    r.manager.itemEnd(t),
                    r.manager.itemError(t)
            })
        },
        setCrossOrigin: function () {
            return this
        },
        setPath: function (t) {
            return this.path = t,
                this
        }
    },
        Object.assign(xr.prototype, {
            moveTo: function (t, e) {
                this.currentPath = new Hn,
                    this.subPaths.push(this.currentPath),
                    this.currentPath.moveTo(t, e)
            },
            lineTo: function (t, e) {
                this.currentPath.lineTo(t, e)
            },
            quadraticCurveTo: function (t, e, i, n) {
                this.currentPath.quadraticCurveTo(t, e, i, n)
            },
            bezierCurveTo: function (t, e, i, n, r, o) {
                this.currentPath.bezierCurveTo(t, e, i, n, r, o)
            },
            splineThru: function (t) {
                this.currentPath.splineThru(t)
            },
            toShapes: function (t, e) {
                function i(t) {
                    for (var e = [], i = 0, n = t.length; i < n; i++) {
                        var r = t[i]
                            , o = new Vn;
                        o.curves = r.curves,
                            e.push(o)
                    }
                    return e
                }
                var n = Ah.isClockWise
                    , r = this.subPaths;
                if (0 === r.length)
                    return [];
                if (!0 === e)
                    return i(r);
                var o, a, s, h = [];
                if (1 === r.length)
                    return a = r[0],
                        s = new Vn,
                        s.curves = a.curves,
                        h.push(s),
                        h;
                var l = !n(r[0].getPoints());
                l = t ? !l : l;
                var c, u = [], d = [], p = [], f = 0;
                d[f] = void 0,
                    p[f] = [];
                for (var m = 0, v = r.length; m < v; m++)
                    a = r[m],
                        c = a.getPoints(),
                        o = n(c),
                        o = t ? !o : o,
                        o ? (!l && d[f] && f++,
                            d[f] = {
                                s: new Vn,
                                p: c
                            },
                            d[f].s.curves = a.curves,
                            l && f++,
                            p[f] = []) : p[f].push({
                                h: a,
                                p: c[0]
                            });
                if (!d[0])
                    return i(r);
                if (d.length > 1) {
                    for (var g = !1, _ = [], y = 0, x = d.length; y < x; y++)
                        u[y] = [];
                    for (var y = 0, x = d.length; y < x; y++)
                        for (var b = p[y], w = 0; w < b.length; w++) {
                            for (var S = b[w], E = !0, T = 0; T < d.length; T++)
                                (function (t, e) {
                                    for (var i = e.length, n = !1, r = i - 1, o = 0; o < i; r = o++) {
                                        var a = e[r]
                                            , s = e[o]
                                            , h = s.x - a.x
                                            , l = s.y - a.y;
                                        if (Math.abs(l) > Number.EPSILON) {
                                            if (l < 0 && (a = e[o],
                                                h = -h,
                                                s = e[r],
                                                l = -l),
                                                t.y < a.y || t.y > s.y)
                                                continue;
                                            if (t.y === a.y) {
                                                if (t.x === a.x)
                                                    return !0
                                            } else {
                                                var c = l * (t.x - a.x) - h * (t.y - a.y);
                                                if (0 === c)
                                                    return !0;
                                                if (c < 0)
                                                    continue;
                                                n = !n
                                            }
                                        } else {
                                            if (t.y !== a.y)
                                                continue;
                                            if (s.x <= t.x && t.x <= a.x || a.x <= t.x && t.x <= s.x)
                                                return !0
                                        }
                                    }
                                    return n
                                }
                                )(S.p, d[T].p) && (y !== T && _.push({
                                    froms: y,
                                    tos: T,
                                    hole: w
                                }),
                                    E ? (E = !1,
                                        u[T].push(S)) : g = !0);
                            E && u[y].push(S)
                        }
                    _.length > 0 && (g || (p = u))
                }
                for (var M, m = 0, A = d.length; m < A; m++) {
                    s = d[m].s,
                        h.push(s),
                        M = p[m];
                    for (var P = 0, R = M.length; P < R; P++)
                        s.holes.push(M[P].h)
                }
                return h
            }
        }),
        Object.assign(br.prototype, {
            isFont: !0,
            generateShapes: function (t, e, i) {
                function n(t, e, i, n) {
                    var o = r.glyphs[t] || r.glyphs["?"];
                    if (o) {
                        var a, s, h, l, c, u, d, p, f, m = new xr, v = [];
                        if (o.o)
                            for (var g = o._cachedOutline || (o._cachedOutline = o.o.split(" ")), _ = 0, y = g.length; _ < y;) {
                                var x = g[_++];
                                switch (x) {
                                    case "m":
                                        a = g[_++] * e + i,
                                            s = g[_++] * e + n,
                                            m.moveTo(a, s);
                                        break;
                                    case "l":
                                        a = g[_++] * e + i,
                                            s = g[_++] * e + n,
                                            m.lineTo(a, s);
                                        break;
                                    case "q":
                                        h = g[_++] * e + i,
                                            l = g[_++] * e + n,
                                            c = g[_++] * e + i,
                                            u = g[_++] * e + n,
                                            m.quadraticCurveTo(c, u, h, l),
                                            f = v[v.length - 1],
                                            f && (f.x,
                                                f.y);
                                        break;
                                    case "b":
                                        h = g[_++] * e + i,
                                            l = g[_++] * e + n,
                                            c = g[_++] * e + i,
                                            u = g[_++] * e + n,
                                            d = g[_++] * e + i,
                                            p = g[_++] * e + n,
                                            m.bezierCurveTo(c, u, d, p, h, l),
                                            f = v[v.length - 1],
                                            f && (f.x,
                                                f.y)
                                }
                            }
                        return {
                            offsetX: o.ha * e,
                            path: m
                        }
                    }
                }
                void 0 === e && (e = 100),
                    void 0 === i && (i = 4);
                for (var r = this.data, o = function (t) {
                    for (var i = String(t).split(""), o = e / r.resolution, a = (r.boundingBox.yMax - r.boundingBox.yMin + r.underlineThickness) * o, s = 0, h = 0, l = [], c = 0; c < i.length; c++) {
                        var u = i[c];
                        if ("\n" === u)
                            s = 0,
                                h -= a;
                        else {
                            var d = n(u, o, s, h);
                            s += d.offsetX,
                                l.push(d.path)
                        }
                    }
                    return l
                }(t), a = [], s = 0, h = o.length; s < h; s++)
                    Array.prototype.push.apply(a, o[s].toShapes());
                return a
            }
        }),
        Object.assign(wr.prototype, {
            load: function (t, e, i, n) {
                var r = this
                    , o = new fn(this.manager);
                o.setPath(this.path),
                    o.load(t, function (t) {
                        var i;
                        try {
                            i = JSON.parse(t)
                        } catch (e) {
                            console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),
                                i = JSON.parse(t.substring(65, t.length - 2))
                        }
                        var n = r.parse(i);
                        e && e(n)
                    }, i, n)
            },
            parse: function (t) {
                return new br(t)
            },
            setPath: function (t) {
                return this.path = t,
                    this
            }
        });
    var Vh, Wh = {
        getContext: function () {
            return void 0 === Vh && (Vh = new (window.AudioContext || window.webkitAudioContext)),
                Vh
        },
        setContext: function (t) {
            Vh = t
        }
    };
    Object.assign(Sr.prototype, {
        load: function (t, e, i, n) {
            var r = new fn(this.manager);
            r.setResponseType("arraybuffer"),
                r.load(t, function (t) {
                    Wh.getContext().decodeAudioData(t, function (t) {
                        e(t)
                    })
                }, i, n)
        }
    }),
        Object.assign(Er.prototype, {
            update: function () {
                var t, e, i, n, r, a, s, h, l = new o, c = new o;
                return function (o) {
                    if (t !== this || e !== o.focus || i !== o.fov || n !== o.aspect * this.aspect || r !== o.near || a !== o.far || s !== o.zoom || h !== this.eyeSep) {
                        t = this,
                            e = o.focus,
                            i = o.fov,
                            n = o.aspect * this.aspect,
                            r = o.near,
                            a = o.far,
                            s = o.zoom;
                        var u = o.projectionMatrix.clone();
                        h = this.eyeSep / 2;
                        var d, p, f = h * r / e, m = r * Math.tan(sh.DEG2RAD * i * .5) / s;
                        c.elements[12] = -h,
                            l.elements[12] = h,
                            d = -m * n + f,
                            p = m * n + f,
                            u.elements[0] = 2 * r / (p - d),
                            u.elements[8] = (p + d) / (p - d),
                            this.cameraL.projectionMatrix.copy(u),
                            d = -m * n - f,
                            p = m * n - f,
                            u.elements[0] = 2 * r / (p - d),
                            u.elements[8] = (p + d) / (p - d),
                            this.cameraR.projectionMatrix.copy(u)
                    }
                    this.cameraL.matrixWorld.copy(o.matrixWorld).multiply(c),
                        this.cameraR.matrixWorld.copy(o.matrixWorld).multiply(l)
                }
            }()
        }),
        Tr.prototype = Object.create(ut.prototype),
        Tr.prototype.constructor = Tr,
        Mr.prototype = Object.assign(Object.create(ut.prototype), {
            constructor: Mr,
            getInput: function () {
                return this.gain
            },
            removeFilter: function () {
                null !== this.filter && (this.gain.disconnect(this.filter),
                    this.filter.disconnect(this.context.destination),
                    this.gain.connect(this.context.destination),
                    this.filter = null)
            },
            getFilter: function () {
                return this.filter
            },
            setFilter: function (t) {
                null !== this.filter ? (this.gain.disconnect(this.filter),
                    this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination),
                    this.filter = t,
                    this.gain.connect(this.filter),
                    this.filter.connect(this.context.destination)
            },
            getMasterVolume: function () {
                return this.gain.gain.value
            },
            setMasterVolume: function (t) {
                this.gain.gain.value = t
            },
            updateMatrixWorld: function () {
                var t = new s
                    , e = new a
                    , i = new s
                    , n = new s;
                return function (r) {
                    ut.prototype.updateMatrixWorld.call(this, r);
                    var o = this.context.listener
                        , a = this.up;
                    this.matrixWorld.decompose(t, e, i),
                        n.set(0, 0, -1).applyQuaternion(e),
                        o.positionX ? (o.positionX.setValueAtTime(t.x, this.context.currentTime),
                            o.positionY.setValueAtTime(t.y, this.context.currentTime),
                            o.positionZ.setValueAtTime(t.z, this.context.currentTime),
                            o.forwardX.setValueAtTime(n.x, this.context.currentTime),
                            o.forwardY.setValueAtTime(n.y, this.context.currentTime),
                            o.forwardZ.setValueAtTime(n.z, this.context.currentTime),
                            o.upX.setValueAtTime(a.x, this.context.currentTime),
                            o.upY.setValueAtTime(a.y, this.context.currentTime),
                            o.upZ.setValueAtTime(a.z, this.context.currentTime)) : (o.setPosition(t.x, t.y, t.z),
                                o.setOrientation(n.x, n.y, n.z, a.x, a.y, a.z))
                }
            }()
        }),
        Ar.prototype = Object.assign(Object.create(ut.prototype), {
            constructor: Ar,
            getOutput: function () {
                return this.gain
            },
            setNodeSource: function (t) {
                return this.hasPlaybackControl = !1,
                    this.sourceType = "audioNode",
                    this.source = t,
                    this.connect(),
                    this
            },
            setBuffer: function (t) {
                return this.buffer = t,
                    this.sourceType = "buffer",
                    this.autoplay && this.play(),
                    this
            },
            play: function () {
                if (!0 === this.isPlaying)
                    return void console.warn("THREE.Audio: Audio is already playing.");
                if (!1 === this.hasPlaybackControl)
                    return void console.warn("THREE.Audio: this Audio has no playback control.");
                var t = this.context.createBufferSource();
                return t.buffer = this.buffer,
                    t.loop = this.loop,
                    t.onended = this.onEnded.bind(this),
                    t.playbackRate.setValueAtTime(this.playbackRate, this.startTime),
                    this.startTime = this.context.currentTime,
                    t.start(this.startTime, this.offset),
                    this.isPlaying = !0,
                    this.source = t,
                    this.connect()
            },
            pause: function () {
                return !1 === this.hasPlaybackControl ? void console.warn("THREE.Audio: this Audio has no playback control.") : (!0 === this.isPlaying && (this.source.stop(),
                    this.offset += (this.context.currentTime - this.startTime) * this.playbackRate,
                    this.isPlaying = !1),
                    this)
            },
            stop: function () {
                return !1 === this.hasPlaybackControl ? void console.warn("THREE.Audio: this Audio has no playback control.") : (this.source.stop(),
                    this.offset = 0,
                    this.isPlaying = !1,
                    this)
            },
            connect: function () {
                if (this.filters.length > 0) {
                    this.source.connect(this.filters[0]);
                    for (var t = 1, e = this.filters.length; t < e; t++)
                        this.filters[t - 1].connect(this.filters[t]);
                    this.filters[this.filters.length - 1].connect(this.getOutput())
                } else
                    this.source.connect(this.getOutput());
                return this
            },
            disconnect: function () {
                if (this.filters.length > 0) {
                    this.source.disconnect(this.filters[0]);
                    for (var t = 1, e = this.filters.length; t < e; t++)
                        this.filters[t - 1].disconnect(this.filters[t]);
                    this.filters[this.filters.length - 1].disconnect(this.getOutput())
                } else
                    this.source.disconnect(this.getOutput());
                return this
            },
            getFilters: function () {
                return this.filters
            },
            setFilters: function (t) {
                return t || (t = []),
                    !0 === this.isPlaying ? (this.disconnect(),
                        this.filters = t,
                        this.connect()) : this.filters = t,
                    this
            },
            getFilter: function () {
                return this.getFilters()[0]
            },
            setFilter: function (t) {
                return this.setFilters(t ? [t] : [])
            },
            setPlaybackRate: function (t) {
                return !1 === this.hasPlaybackControl ? void console.warn("THREE.Audio: this Audio has no playback control.") : (this.playbackRate = t,
                    !0 === this.isPlaying && this.source.playbackRate.setValueAtTime(this.playbackRate, this.context.currentTime),
                    this)
            },
            getPlaybackRate: function () {
                return this.playbackRate
            },
            onEnded: function () {
                this.isPlaying = !1
            },
            getLoop: function () {
                return !1 === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."),
                    !1) : this.loop
            },
            setLoop: function (t) {
                return !1 === this.hasPlaybackControl ? void console.warn("THREE.Audio: this Audio has no playback control.") : (this.loop = t,
                    !0 === this.isPlaying && (this.source.loop = this.loop),
                    this)
            },
            getVolume: function () {
                return this.gain.gain.value
            },
            setVolume: function (t) {
                return this.gain.gain.value = t,
                    this
            }
        }),
        Pr.prototype = Object.assign(Object.create(Ar.prototype), {
            constructor: Pr,
            getOutput: function () {
                return this.panner
            },
            getRefDistance: function () {
                return this.panner.refDistance
            },
            setRefDistance: function (t) {
                this.panner.refDistance = t
            },
            getRolloffFactor: function () {
                return this.panner.rolloffFactor
            },
            setRolloffFactor: function (t) {
                this.panner.rolloffFactor = t
            },
            getDistanceModel: function () {
                return this.panner.distanceModel
            },
            setDistanceModel: function (t) {
                this.panner.distanceModel = t
            },
            getMaxDistance: function () {
                return this.panner.maxDistance
            },
            setMaxDistance: function (t) {
                this.panner.maxDistance = t
            },
            updateMatrixWorld: function () {
                var t = new s;
                return function (e) {
                    ut.prototype.updateMatrixWorld.call(this, e),
                        t.setFromMatrixPosition(this.matrixWorld),
                        this.panner.setPosition(t.x, t.y, t.z)
                }
            }()
        }),
        Object.assign(Rr.prototype, {
            getFrequencyData: function () {
                return this.analyser.getByteFrequencyData(this.data),
                    this.data
            },
            getAverageFrequency: function () {
                for (var t = 0, e = this.getFrequencyData(), i = 0; i < e.length; i++)
                    t += e[i];
                return t / e.length
            }
        }),
        Object.assign(Lr.prototype, {
            accumulate: function (t, e) {
                var i = this.buffer
                    , n = this.valueSize
                    , r = t * n + n
                    , o = this.cumulativeWeight;
                if (0 === o) {
                    for (var a = 0; a !== n; ++a)
                        i[r + a] = i[a];
                    o = e
                } else {
                    o += e;
                    var s = e / o;
                    this._mixBufferRegion(i, r, 0, s, n)
                }
                this.cumulativeWeight = o
            },
            apply: function (t) {
                var e = this.valueSize
                    , i = this.buffer
                    , n = t * e + e
                    , r = this.cumulativeWeight
                    , o = this.binding;
                if (this.cumulativeWeight = 0,
                    r < 1) {
                    var a = 3 * e;
                    this._mixBufferRegion(i, n, a, 1 - r, e)
                }
                for (var s = e, h = e + e; s !== h; ++s)
                    if (i[s] !== i[s + e]) {
                        o.setValue(i, n);
                        break
                    }
            },
            saveOriginalState: function () {
                var t = this.binding
                    , e = this.buffer
                    , i = this.valueSize
                    , n = 3 * i;
                t.getValue(e, n);
                for (var r = i, o = n; r !== o; ++r)
                    e[r] = e[n + r % i];
                this.cumulativeWeight = 0
            },
            restoreOriginalState: function () {
                var t = 3 * this.valueSize;
                this.binding.setValue(this.buffer, t)
            },
            _select: function (t, e, i, n, r) {
                if (n >= .5)
                    for (var o = 0; o !== r; ++o)
                        t[e + o] = t[i + o]
            },
            _slerp: function (t, e, i, n) {
                a.slerpFlat(t, e, t, e, t, i, n)
            },
            _lerp: function (t, e, i, n, r) {
                for (var o = 1 - n, a = 0; a !== r; ++a) {
                    var s = e + a;
                    t[s] = t[s] * o + t[i + a] * n
                }
            }
        }),
        Object.assign(Or.prototype, {
            getValue: function (t, e) {
                this.bind();
                var i = this._targetGroup.nCachedObjects_
                    , n = this._bindings[i];
                void 0 !== n && n.getValue(t, e)
            },
            setValue: function (t, e) {
                for (var i = this._bindings, n = this._targetGroup.nCachedObjects_, r = i.length; n !== r; ++n)
                    i[n].setValue(t, e)
            },
            bind: function () {
                for (var t = this._bindings, e = this._targetGroup.nCachedObjects_, i = t.length; e !== i; ++e)
                    t[e].bind()
            },
            unbind: function () {
                for (var t = this._bindings, e = this._targetGroup.nCachedObjects_, i = t.length; e !== i; ++e)
                    t[e].unbind()
            }
        }),
        Object.assign(Ir, {
            Composite: Or,
            create: function (t, e, i) {
                return t && t.isAnimationObjectGroup ? new Ir.Composite(t, e, i) : new Ir(t, e, i)
            },
            sanitizeNodeName: function (t) {
                return t.replace(/\s/g, "_").replace(/[^\w-]/g, "")
            },
            parseTrackName: function () {
                var t = /((?:[\w-]+[\/:])*)/
                    , e = /([\w-\.]+)?/
                    , i = /(?:\.([\w-]+)(?:\[(.+)\])?)?/
                    , n = /\.([\w-]+)(?:\[(.+)\])?/
                    , r = new RegExp("^" + t.source + e.source + i.source + n.source + "$")
                    , o = ["material", "materials", "bones"];
                return function (t) {
                    var e = r.exec(t);
                    if (!e)
                        throw new Error("PropertyBinding: Cannot parse trackName: " + t);
                    var i = {
                        nodeName: e[2],
                        objectName: e[3],
                        objectIndex: e[4],
                        propertyName: e[5],
                        propertyIndex: e[6]
                    }
                        , n = i.nodeName && i.nodeName.lastIndexOf(".");
                    if (void 0 !== n && -1 !== n) {
                        var a = i.nodeName.substring(n + 1);
                        -1 !== o.indexOf(a) && (i.nodeName = i.nodeName.substring(0, n),
                            i.objectName = a)
                    }
                    if (null === i.propertyName || 0 === i.propertyName.length)
                        throw new Error("PropertyBinding: can not parse propertyName from trackName: " + t);
                    return i
                }
            }(),
            findNode: function (t, e) {
                if (!e || "" === e || "root" === e || "." === e || -1 === e || e === t.name || e === t.uuid)
                    return t;
                if (t.skeleton) {
                    var i = function (t) {
                        for (var i = 0; i < t.bones.length; i++) {
                            var n = t.bones[i];
                            if (n.name === e)
                                return n
                        }
                        return null
                    }(t.skeleton);
                    if (i)
                        return i
                }
                if (t.children) {
                    var n = function (t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            if (r.name === e || r.uuid === e)
                                return r;
                            var o = n(r.children);
                            if (o)
                                return o
                        }
                        return null
                    }
                        , r = n(t.children);
                    if (r)
                        return r
                }
                return null
            }
        }),
        Object.assign(Ir.prototype, {
            _getValue_unavailable: function () { },
            _setValue_unavailable: function () { },
            BindingType: {
                Direct: 0,
                EntireArray: 1,
                ArrayElement: 2,
                HasFromToArray: 3
            },
            Versioning: {
                None: 0,
                NeedsUpdate: 1,
                MatrixWorldNeedsUpdate: 2
            },
            GetterByBindingType: [function (t, e) {
                t[e] = this.node[this.propertyName]
            }
                , function (t, e) {
                    for (var i = this.resolvedProperty, n = 0, r = i.length; n !== r; ++n)
                        t[e++] = i[n]
                }
                , function (t, e) {
                    t[e] = this.resolvedProperty[this.propertyIndex]
                }
                , function (t, e) {
                    this.resolvedProperty.toArray(t, e)
                }
            ],
            SetterByBindingTypeAndVersioning: [[function (t, e) {
                this.targetObject[this.propertyName] = t[e]
            }
                , function (t, e) {
                    this.targetObject[this.propertyName] = t[e],
                        this.targetObject.needsUpdate = !0
                }
                , function (t, e) {
                    this.targetObject[this.propertyName] = t[e],
                        this.targetObject.matrixWorldNeedsUpdate = !0
                }
            ], [function (t, e) {
                for (var i = this.resolvedProperty, n = 0, r = i.length; n !== r; ++n)
                    i[n] = t[e++]
            }
                , function (t, e) {
                    for (var i = this.resolvedProperty, n = 0, r = i.length; n !== r; ++n)
                        i[n] = t[e++];
                    this.targetObject.needsUpdate = !0
                }
                , function (t, e) {
                    for (var i = this.resolvedProperty, n = 0, r = i.length; n !== r; ++n)
                        i[n] = t[e++];
                    this.targetObject.matrixWorldNeedsUpdate = !0
                }
            ], [function (t, e) {
                this.resolvedProperty[this.propertyIndex] = t[e]
            }
                , function (t, e) {
                    this.resolvedProperty[this.propertyIndex] = t[e],
                        this.targetObject.needsUpdate = !0
                }
                , function (t, e) {
                    this.resolvedProperty[this.propertyIndex] = t[e],
                        this.targetObject.matrixWorldNeedsUpdate = !0
                }
            ], [function (t, e) {
                this.resolvedProperty.fromArray(t, e)
            }
                , function (t, e) {
                    this.resolvedProperty.fromArray(t, e),
                        this.targetObject.needsUpdate = !0
                }
                , function (t, e) {
                    this.resolvedProperty.fromArray(t, e),
                        this.targetObject.matrixWorldNeedsUpdate = !0
                }
            ]],
            getValue: function (t, e) {
                this.bind(),
                    this.getValue(t, e)
            },
            setValue: function (t, e) {
                this.bind(),
                    this.setValue(t, e)
            },
            bind: function () {
                var t = this.node
                    , e = this.parsedPath
                    , i = e.objectName
                    , n = e.propertyName
                    , r = e.propertyIndex;
                if (t || (t = Ir.findNode(this.rootNode, e.nodeName) || this.rootNode,
                    this.node = t),
                    this.getValue = this._getValue_unavailable,
                    this.setValue = this._setValue_unavailable,
                    !t)
                    return void console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
                if (i) {
                    var o = e.objectIndex;
                    switch (i) {
                        case "materials":
                            if (!t.material)
                                return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                            if (!t.material.materials)
                                return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                            t = t.material.materials;
                            break;
                        case "bones":
                            if (!t.skeleton)
                                return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                            t = t.skeleton.bones;
                            for (var a = 0; a < t.length; a++)
                                if (t[a].name === o) {
                                    o = a;
                                    break
                                }
                            break;
                        default:
                            if (void 0 === t[i])
                                return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                            t = t[i]
                    }
                    if (void 0 !== o) {
                        if (void 0 === t[o])
                            return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, t);
                        t = t[o]
                    }
                }
                var s = t[n];
                if (void 0 === s) {
                    var h = e.nodeName;
                    return void console.error("THREE.PropertyBinding: Trying to update property for track: " + h + "." + n + " but it wasn't found.", t)
                }
                var l = this.Versioning.None;
                void 0 !== t.needsUpdate ? (l = this.Versioning.NeedsUpdate,
                    this.targetObject = t) : void 0 !== t.matrixWorldNeedsUpdate && (l = this.Versioning.MatrixWorldNeedsUpdate,
                        this.targetObject = t);
                var c = this.BindingType.Direct;
                if (void 0 !== r) {
                    if ("morphTargetInfluences" === n) {
                        if (!t.geometry)
                            return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                        if (t.geometry.isBufferGeometry) {
                            if (!t.geometry.morphAttributes)
                                return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                            for (var a = 0; a < this.node.geometry.morphAttributes.position.length; a++)
                                if (t.geometry.morphAttributes.position[a].name === r) {
                                    r = a;
                                    break
                                }
                        } else {
                            if (!t.geometry.morphTargets)
                                return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.", this);
                            for (var a = 0; a < this.node.geometry.morphTargets.length; a++)
                                if (t.geometry.morphTargets[a].name === r) {
                                    r = a;
                                    break
                                }
                        }
                    }
                    c = this.BindingType.ArrayElement,
                        this.resolvedProperty = s,
                        this.propertyIndex = r
                } else
                    void 0 !== s.fromArray && void 0 !== s.toArray ? (c = this.BindingType.HasFromToArray,
                        this.resolvedProperty = s) : Array.isArray(s) ? (c = this.BindingType.EntireArray,
                            this.resolvedProperty = s) : this.propertyName = n;
                this.getValue = this.GetterByBindingType[c],
                    this.setValue = this.SetterByBindingTypeAndVersioning[c][l]
            },
            unbind: function () {
                this.node = null,
                    this.getValue = this._getValue_unbound,
                    this.setValue = this._setValue_unbound
            }
        }),
        //!\ DECLARE ALIAS AFTER assign prototype !
        Object.assign(Ir.prototype, {
            _getValue_unbound: Ir.prototype.getValue,
            _setValue_unbound: Ir.prototype.setValue
        }),
        Object.assign(Cr.prototype, {
            isAnimationObjectGroup: !0,
            add: function () {
                for (var t = this._objects, e = t.length, i = this.nCachedObjects_, n = this._indicesByUUID, r = this._paths, o = this._parsedPaths, a = this._bindings, s = a.length, h = 0, l = arguments.length; h !== l; ++h) {
                    var c = arguments[h]
                        , u = c.uuid
                        , d = n[u]
                        , p = void 0;
                    if (void 0 === d) {
                        d = e++,
                            n[u] = d,
                            t.push(c);
                        for (var f = 0, m = s; f !== m; ++f)
                            a[f].push(new Ir(c, r[f], o[f]))
                    } else if (d < i) {
                        p = t[d];
                        var v = --i
                            , g = t[v];
                        n[g.uuid] = d,
                            t[d] = g,
                            n[u] = v,
                            t[v] = c;
                        for (var f = 0, m = s; f !== m; ++f) {
                            var _ = a[f]
                                , y = _[v]
                                , x = _[d];
                            _[d] = y,
                                void 0 === x && (x = new Ir(c, r[f], o[f])),
                                _[v] = x
                        }
                    } else
                        t[d] !== p && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")
                }
                this.nCachedObjects_ = i
            },
            remove: function () {
                for (var t = this._objects, e = this.nCachedObjects_, i = this._indicesByUUID, n = this._bindings, r = n.length, o = 0, a = arguments.length; o !== a; ++o) {
                    var s = arguments[o]
                        , h = s.uuid
                        , l = i[h];
                    if (void 0 !== l && l >= e) {
                        var c = e++
                            , u = t[c];
                        i[u.uuid] = l,
                            t[l] = u,
                            i[h] = c,
                            t[c] = s;
                        for (var d = 0, p = r; d !== p; ++d) {
                            var f = n[d]
                                , m = f[c]
                                , v = f[l];
                            f[l] = m,
                                f[c] = v
                        }
                    }
                }
                this.nCachedObjects_ = e
            },
            uncache: function () {
                for (var t = this._objects, e = t.length, i = this.nCachedObjects_, n = this._indicesByUUID, r = this._bindings, o = r.length, a = 0, s = arguments.length; a !== s; ++a) {
                    var h = arguments[a]
                        , l = h.uuid
                        , c = n[l];
                    if (void 0 !== c)
                        if (delete n[l],
                            c < i) {
                            var u = --i
                                , d = t[u]
                                , p = --e
                                , f = t[p];
                            n[d.uuid] = c,
                                t[c] = d,
                                n[f.uuid] = u,
                                t[u] = f,
                                t.pop();
                            for (var m = 0, v = o; m !== v; ++m) {
                                var g = r[m]
                                    , _ = g[u]
                                    , y = g[p];
                                g[c] = _,
                                    g[u] = y,
                                    g.pop()
                            }
                        } else {
                            var p = --e
                                , f = t[p];
                            n[f.uuid] = c,
                                t[c] = f,
                                t.pop();
                            for (var m = 0, v = o; m !== v; ++m) {
                                var g = r[m];
                                g[c] = g[p],
                                    g.pop()
                            }
                        }
                }
                this.nCachedObjects_ = i
            },
            subscribe_: function (t, e) {
                var i = this._bindingsIndicesByPath
                    , n = i[t]
                    , r = this._bindings;
                if (void 0 !== n)
                    return r[n];
                var o = this._paths
                    , a = this._parsedPaths
                    , s = this._objects
                    , h = s.length
                    , l = this.nCachedObjects_
                    , c = new Array(h);
                n = r.length,
                    i[t] = n,
                    o.push(t),
                    a.push(e),
                    r.push(c);
                for (var u = l, d = s.length; u !== d; ++u) {
                    var p = s[u];
                    c[u] = new Ir(p, t, e)
                }
                return c
            },
            unsubscribe_: function (t) {
                var e = this._bindingsIndicesByPath
                    , i = e[t];
                if (void 0 !== i) {
                    var n = this._paths
                        , r = this._parsedPaths
                        , o = this._bindings
                        , a = o.length - 1
                        , s = o[a];
                    e[t[a]] = i,
                        o[i] = s,
                        o.pop(),
                        r[i] = r[a],
                        r.pop(),
                        n[i] = n[a],
                        n.pop()
                }
            }
        }),
        Object.assign(Dr.prototype, {
            play: function () {
                return this._mixer._activateAction(this),
                    this
            },
            stop: function () {
                return this._mixer._deactivateAction(this),
                    this.reset()
            },
            reset: function () {
                return this.paused = !1,
                    this.enabled = !0,
                    this.time = 0,
                    this._loopCount = -1,
                    this._startTime = null,
                    this.stopFading().stopWarping()
            },
            isRunning: function () {
                return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this)
            },
            isScheduled: function () {
                return this._mixer._isActiveAction(this)
            },
            startAt: function (t) {
                return this._startTime = t,
                    this
            },
            setLoop: function (t, e) {
                return this.loop = t,
                    this.repetitions = e,
                    this
            },
            setEffectiveWeight: function (t) {
                return this.weight = t,
                    this._effectiveWeight = this.enabled ? t : 0,
                    this.stopFading()
            },
            getEffectiveWeight: function () {
                return this._effectiveWeight
            },
            fadeIn: function (t) {
                return this._scheduleFading(t, 0, 1)
            },
            fadeOut: function (t) {
                return this._scheduleFading(t, 1, 0)
            },
            crossFadeFrom: function (t, e, i) {
                if (t.fadeOut(e),
                    this.fadeIn(e),
                    i) {
                    var n = this._clip.duration
                        , r = t._clip.duration
                        , o = r / n
                        , a = n / r;
                    t.warp(1, o, e),
                        this.warp(a, 1, e)
                }
                return this
            },
            crossFadeTo: function (t, e, i) {
                return t.crossFadeFrom(this, e, i)
            },
            stopFading: function () {
                var t = this._weightInterpolant;
                return null !== t && (this._weightInterpolant = null,
                    this._mixer._takeBackControlInterpolant(t)),
                    this
            },
            setEffectiveTimeScale: function (t) {
                return this.timeScale = t,
                    this._effectiveTimeScale = this.paused ? 0 : t,
                    this.stopWarping()
            },
            getEffectiveTimeScale: function () {
                return this._effectiveTimeScale
            },
            setDuration: function (t) {
                return this.timeScale = this._clip.duration / t,
                    this.stopWarping()
            },
            syncWith: function (t) {
                return this.time = t.time,
                    this.timeScale = t.timeScale,
                    this.stopWarping()
            },
            halt: function (t) {
                return this.warp(this._effectiveTimeScale, 0, t)
            },
            warp: function (t, e, i) {
                var n = this._mixer
                    , r = n.time
                    , o = this._timeScaleInterpolant
                    , a = this.timeScale;
                null === o && (o = n._lendControlInterpolant(),
                    this._timeScaleInterpolant = o);
                var s = o.parameterPositions
                    , h = o.sampleValues;
                return s[0] = r,
                    s[1] = r + i,
                    h[0] = t / a,
                    h[1] = e / a,
                    this
            },
            stopWarping: function () {
                var t = this._timeScaleInterpolant;
                return null !== t && (this._timeScaleInterpolant = null,
                    this._mixer._takeBackControlInterpolant(t)),
                    this
            },
            getMixer: function () {
                return this._mixer
            },
            getClip: function () {
                return this._clip
            },
            getRoot: function () {
                return this._localRoot || this._mixer._root
            },
            _update: function (t, e, i, n) {
                if (!this.enabled)
                    return void this._updateWeight(t);
                var r = this._startTime;
                if (null !== r) {
                    var o = (t - r) * i;
                    if (o < 0 || 0 === i)
                        return;
                    this._startTime = null,
                        e = i * o
                }
                e *= this._updateTimeScale(t);
                var a = this._updateTime(e)
                    , s = this._updateWeight(t);
                if (s > 0)
                    for (var h = this._interpolants, l = this._propertyBindings, c = 0, u = h.length; c !== u; ++c)
                        h[c].evaluate(a),
                            l[c].accumulate(n, s)
            },
            _updateWeight: function (t) {
                var e = 0;
                if (this.enabled) {
                    e = this.weight;
                    var i = this._weightInterpolant;
                    if (null !== i) {
                        var n = i.evaluate(t)[0];
                        e *= n,
                            t > i.parameterPositions[1] && (this.stopFading(),
                                0 === n && (this.enabled = !1))
                    }
                }
                return this._effectiveWeight = e,
                    e
            },
            _updateTimeScale: function (t) {
                var e = 0;
                if (!this.paused) {
                    e = this.timeScale;
                    var i = this._timeScaleInterpolant;
                    if (null !== i) {
                        e *= i.evaluate(t)[0],
                            t > i.parameterPositions[1] && (this.stopWarping(),
                                0 === e ? this.paused = !0 : this.timeScale = e)
                    }
                }
                return this._effectiveTimeScale = e,
                    e
            },
            _updateTime: function (t) {
                var e = this.time + t;
                if (0 === t)
                    return e;
                var i = this._clip.duration
                    , n = this.loop
                    , r = this._loopCount;
                if (n === zs) {
                    -1 === r && (this._loopCount = 0,
                        this._setEndings(!0, !0, !1));
                    t: {
                        if (e >= i)
                            e = i;
                        else {
                            if (!(e < 0))
                                break t;
                            e = 0
                        }
                        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1,
                            this._mixer.dispatchEvent({
                                type: "finished",
                                action: this,
                                direction: t < 0 ? -1 : 1
                            })
                    }
                } else {
                    var o = n === js;
                    if (-1 === r && (t >= 0 ? (r = 0,
                        this._setEndings(!0, 0 === this.repetitions, o)) : this._setEndings(0 === this.repetitions, !0, o)),
                        e >= i || e < 0) {
                        var a = Math.floor(e / i);
                        e -= i * a,
                            r += Math.abs(a);
                        var s = this.repetitions - r;
                        if (s < 0)
                            this.clampWhenFinished ? this.paused = !0 : this.enabled = !1,
                                e = t > 0 ? i : 0,
                                this._mixer.dispatchEvent({
                                    type: "finished",
                                    action: this,
                                    direction: t > 0 ? 1 : -1
                                });
                        else {
                            if (0 === s) {
                                var h = t < 0;
                                this._setEndings(h, !h, o)
                            } else
                                this._setEndings(!1, !1, o);
                            this._loopCount = r,
                                this._mixer.dispatchEvent({
                                    type: "loop",
                                    action: this,
                                    loopDelta: a
                                })
                        }
                    }
                    if (o && 1 == (1 & r))
                        return this.time = e,
                            i - e
                }
                return this.time = e,
                    e
            },
            _setEndings: function (t, e, i) {
                var n = this._interpolantSettings;
                i ? (n.endingStart = Xs,
                    n.endingEnd = Xs) : (n.endingStart = t ? this.zeroSlopeAtStart ? Xs : Ws : Ys,
                        n.endingEnd = e ? this.zeroSlopeAtEnd ? Xs : Ws : Ys)
            },
            _scheduleFading: function (t, e, i) {
                var n = this._mixer
                    , r = n.time
                    , o = this._weightInterpolant;
                null === o && (o = n._lendControlInterpolant(),
                    this._weightInterpolant = o);
                var a = o.parameterPositions
                    , s = o.sampleValues;
                return a[0] = r,
                    s[0] = e,
                    a[1] = r + t,
                    s[1] = i,
                    this
            }
        }),
        Nr.prototype = Object.assign(Object.create(n.prototype), {
            constructor: Nr,
            _bindAction: function (t, e) {
                var i = t._localRoot || this._root
                    , n = t._clip.tracks
                    , r = n.length
                    , o = t._propertyBindings
                    , a = t._interpolants
                    , s = i.uuid
                    , h = this._bindingsByRootAndName
                    , l = h[s];
                void 0 === l && (l = {},
                    h[s] = l);
                for (var c = 0; c !== r; ++c) {
                    var u = n[c]
                        , d = u.name
                        , p = l[d];
                    if (void 0 !== p)
                        o[c] = p;
                    else {
                        if (void 0 !== (p = o[c])) {
                            null === p._cacheIndex && (++p.referenceCount,
                                this._addInactiveBinding(p, s, d));
                            continue
                        }
                        var f = e && e._propertyBindings[c].binding.parsedPath;
                        p = new Lr(Ir.create(i, d, f), u.ValueTypeName, u.getValueSize()),
                            ++p.referenceCount,
                            this._addInactiveBinding(p, s, d),
                            o[c] = p
                    }
                    a[c].resultBuffer = p.buffer
                }
            },
            _activateAction: function (t) {
                if (!this._isActiveAction(t)) {
                    if (null === t._cacheIndex) {
                        var e = (t._localRoot || this._root).uuid
                            , i = t._clip.uuid
                            , n = this._actionsByClip[i];
                        this._bindAction(t, n && n.knownActions[0]),
                            this._addInactiveAction(t, i, e)
                    }
                    for (var r = t._propertyBindings, o = 0, a = r.length; o !== a; ++o) {
                        var s = r[o];
                        0 == s.useCount++ && (this._lendBinding(s),
                            s.saveOriginalState())
                    }
                    this._lendAction(t)
                }
            },
            _deactivateAction: function (t) {
                if (this._isActiveAction(t)) {
                    for (var e = t._propertyBindings, i = 0, n = e.length; i !== n; ++i) {
                        var r = e[i];
                        0 == --r.useCount && (r.restoreOriginalState(),
                            this._takeBackBinding(r))
                    }
                    this._takeBackAction(t)
                }
            },
            _initMemoryManager: function () {
                this._actions = [],
                    this._nActiveActions = 0,
                    this._actionsByClip = {},
                    this._bindings = [],
                    this._nActiveBindings = 0,
                    this._bindingsByRootAndName = {},
                    this._controlInterpolants = [],
                    this._nActiveControlInterpolants = 0;
                var t = this;
                this.stats = {
                    actions: {
                        get total() {
                            return t._actions.length
                        },
                        get inUse() {
                            return t._nActiveActions
                        }
                    },
                    bindings: {
                        get total() {
                            return t._bindings.length
                        },
                        get inUse() {
                            return t._nActiveBindings
                        }
                    },
                    controlInterpolants: {
                        get total() {
                            return t._controlInterpolants.length
                        },
                        get inUse() {
                            return t._nActiveControlInterpolants
                        }
                    }
                }
            },
            _isActiveAction: function (t) {
                var e = t._cacheIndex;
                return null !== e && e < this._nActiveActions
            },
            _addInactiveAction: function (t, e, i) {
                var n = this._actions
                    , r = this._actionsByClip
                    , o = r[e];
                if (void 0 === o)
                    o = {
                        knownActions: [t],
                        actionByRoot: {}
                    },
                        t._byClipCacheIndex = 0,
                        r[e] = o;
                else {
                    var a = o.knownActions;
                    t._byClipCacheIndex = a.length,
                        a.push(t)
                }
                t._cacheIndex = n.length,
                    n.push(t),
                    o.actionByRoot[i] = t
            },
            _removeInactiveAction: function (t) {
                var e = this._actions
                    , i = e[e.length - 1]
                    , n = t._cacheIndex;
                i._cacheIndex = n,
                    e[n] = i,
                    e.pop(),
                    t._cacheIndex = null;
                var r = t._clip.uuid
                    , o = this._actionsByClip
                    , a = o[r]
                    , s = a.knownActions
                    , h = s[s.length - 1]
                    , l = t._byClipCacheIndex;
                h._byClipCacheIndex = l,
                    s[l] = h,
                    s.pop(),
                    t._byClipCacheIndex = null,
                    delete a.actionByRoot[(t._localRoot || this._root).uuid],
                    0 === s.length && delete o[r],
                    this._removeInactiveBindingsForAction(t)
            },
            _removeInactiveBindingsForAction: function (t) {
                for (var e = t._propertyBindings, i = 0, n = e.length; i !== n; ++i) {
                    var r = e[i];
                    0 == --r.referenceCount && this._removeInactiveBinding(r)
                }
            },
            _lendAction: function (t) {
                var e = this._actions
                    , i = t._cacheIndex
                    , n = this._nActiveActions++
                    , r = e[n];
                t._cacheIndex = n,
                    e[n] = t,
                    r._cacheIndex = i,
                    e[i] = r
            },
            _takeBackAction: function (t) {
                var e = this._actions
                    , i = t._cacheIndex
                    , n = --this._nActiveActions
                    , r = e[n];
                t._cacheIndex = n,
                    e[n] = t,
                    r._cacheIndex = i,
                    e[i] = r
            },
            _addInactiveBinding: function (t, e, i) {
                var n = this._bindingsByRootAndName
                    , r = n[e]
                    , o = this._bindings;
                void 0 === r && (r = {},
                    n[e] = r),
                    r[i] = t,
                    t._cacheIndex = o.length,
                    o.push(t)
            },
            _removeInactiveBinding: function (t) {
                var e = this._bindings
                    , i = t.binding
                    , n = i.rootNode.uuid
                    , r = i.path
                    , o = this._bindingsByRootAndName
                    , a = o[n]
                    , s = e[e.length - 1]
                    , h = t._cacheIndex;
                s._cacheIndex = h,
                    e[h] = s,
                    e.pop(),
                    delete a[r];
                t: {
                    for (var l in a)
                        break t;
                    delete o[n]
                }
            },
            _lendBinding: function (t) {
                var e = this._bindings
                    , i = t._cacheIndex
                    , n = this._nActiveBindings++
                    , r = e[n];
                t._cacheIndex = n,
                    e[n] = t,
                    r._cacheIndex = i,
                    e[i] = r
            },
            _takeBackBinding: function (t) {
                var e = this._bindings
                    , i = t._cacheIndex
                    , n = --this._nActiveBindings
                    , r = e[n];
                t._cacheIndex = n,
                    e[n] = t,
                    r._cacheIndex = i,
                    e[i] = r
            },
            _lendControlInterpolant: function () {
                var t = this._controlInterpolants
                    , e = this._nActiveControlInterpolants++
                    , i = t[e];
                return void 0 === i && (i = new lr(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer),
                    i.__cacheIndex = e,
                    t[e] = i),
                    i
            },
            _takeBackControlInterpolant: function (t) {
                var e = this._controlInterpolants
                    , i = t.__cacheIndex
                    , n = --this._nActiveControlInterpolants
                    , r = e[n];
                t.__cacheIndex = n,
                    e[n] = t,
                    r.__cacheIndex = i,
                    e[i] = r
            },
            _controlInterpolantsResultBuffer: new Float32Array(1),
            clipAction: function (t, e) {
                var i = e || this._root
                    , n = i.uuid
                    , r = "string" == typeof t ? pr.findByName(i, t) : t
                    , o = null !== r ? r.uuid : t
                    , a = this._actionsByClip[o]
                    , s = null;
                if (void 0 !== a) {
                    var h = a.actionByRoot[n];
                    if (void 0 !== h)
                        return h;
                    s = a.knownActions[0],
                        null === r && (r = s._clip)
                }
                if (null === r)
                    return null;
                var l = new Dr(this, r, e);
                return this._bindAction(l, s),
                    this._addInactiveAction(l, o, n),
                    l
            },
            existingAction: function (t, e) {
                var i = e || this._root
                    , n = i.uuid
                    , r = "string" == typeof t ? pr.findByName(i, t) : t
                    , o = r ? r.uuid : t
                    , a = this._actionsByClip[o];
                return void 0 !== a ? a.actionByRoot[n] || null : null
            },
            stopAllAction: function () {
                var t = this._actions
                    , e = this._nActiveActions
                    , i = this._bindings
                    , n = this._nActiveBindings;
                this._nActiveActions = 0,
                    this._nActiveBindings = 0;
                for (var r = 0; r !== e; ++r)
                    t[r].reset();
                for (var r = 0; r !== n; ++r)
                    i[r].useCount = 0;
                return this
            },
            update: function (t) {
                t *= this.timeScale;
                for (var e = this._actions, i = this._nActiveActions, n = this.time += t, r = Math.sign(t), o = this._accuIndex ^= 1, a = 0; a !== i; ++a) {
                    e[a]._update(n, t, r, o)
                }
                for (var s = this._bindings, h = this._nActiveBindings, a = 0; a !== h; ++a)
                    s[a].apply(o);
                return this
            },
            getRoot: function () {
                return this._root
            },
            uncacheClip: function (t) {
                var e = this._actions
                    , i = t.uuid
                    , n = this._actionsByClip
                    , r = n[i];
                if (void 0 !== r) {
                    for (var o = r.knownActions, a = 0, s = o.length; a !== s; ++a) {
                        var h = o[a];
                        this._deactivateAction(h);
                        var l = h._cacheIndex
                            , c = e[e.length - 1];
                        h._cacheIndex = null,
                            h._byClipCacheIndex = null,
                            c._cacheIndex = l,
                            e[l] = c,
                            e.pop(),
                            this._removeInactiveBindingsForAction(h)
                    }
                    delete n[i]
                }
            },
            uncacheRoot: function (t) {
                var e = t.uuid
                    , i = this._actionsByClip;
                for (var n in i) {
                    var r = i[n].actionByRoot
                        , o = r[e];
                    void 0 !== o && (this._deactivateAction(o),
                        this._removeInactiveAction(o))
                }
                var a = this._bindingsByRootAndName
                    , s = a[e];
                if (void 0 !== s)
                    for (var h in s) {
                        var l = s[h];
                        l.restoreOriginalState(),
                            this._removeInactiveBinding(l)
                    }
            },
            uncacheAction: function (t, e) {
                var i = this.existingAction(t, e);
                null !== i && (this._deactivateAction(i),
                    this._removeInactiveAction(i))
            }
        }),
        Ur.prototype.clone = function () {
            return new Ur(void 0 === this.value.clone ? this.value : this.value.clone())
        }
        ,
        Br.prototype = Object.assign(Object.create(Pt.prototype), {
            constructor: Br,
            isInstancedBufferGeometry: !0,
            copy: function (t) {
                return Pt.prototype.copy.call(this, t),
                    this.maxInstancedCount = t.maxInstancedCount,
                    this
            },
            clone: function () {
                return (new this.constructor).copy(this)
            }
        }),
        Object.defineProperties(Fr.prototype, {
            count: {
                get: function () {
                    return this.data.count
                }
            },
            array: {
                get: function () {
                    return this.data.array
                }
            }
        }),
        Object.assign(Fr.prototype, {
            isInterleavedBufferAttribute: !0,
            setX: function (t, e) {
                return this.data.array[t * this.data.stride + this.offset] = e,
                    this
            },
            setY: function (t, e) {
                return this.data.array[t * this.data.stride + this.offset + 1] = e,
                    this
            },
            setZ: function (t, e) {
                return this.data.array[t * this.data.stride + this.offset + 2] = e,
                    this
            },
            setW: function (t, e) {
                return this.data.array[t * this.data.stride + this.offset + 3] = e,
                    this
            },
            getX: function (t) {
                return this.data.array[t * this.data.stride + this.offset]
            },
            getY: function (t) {
                return this.data.array[t * this.data.stride + this.offset + 1]
            },
            getZ: function (t) {
                return this.data.array[t * this.data.stride + this.offset + 2]
            },
            getW: function (t) {
                return this.data.array[t * this.data.stride + this.offset + 3]
            },
            setXY: function (t, e, i) {
                return t = t * this.data.stride + this.offset,
                    this.data.array[t + 0] = e,
                    this.data.array[t + 1] = i,
                    this
            },
            setXYZ: function (t, e, i, n) {
                return t = t * this.data.stride + this.offset,
                    this.data.array[t + 0] = e,
                    this.data.array[t + 1] = i,
                    this.data.array[t + 2] = n,
                    this
            },
            setXYZW: function (t, e, i, n, r) {
                return t = t * this.data.stride + this.offset,
                    this.data.array[t + 0] = e,
                    this.data.array[t + 1] = i,
                    this.data.array[t + 2] = n,
                    this.data.array[t + 3] = r,
                    this
            }
        }),
        Object.defineProperty(zr.prototype, "needsUpdate", {
            set: function (t) {
                !0 === t && this.version++
            }
        }),
        Object.assign(zr.prototype, {
            isInterleavedBuffer: !0,
            setArray: function (t) {
                if (Array.isArray(t))
                    throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
                this.count = void 0 !== t ? t.length / this.stride : 0,
                    this.array = t
            },
            setDynamic: function (t) {
                return this.dynamic = t,
                    this
            },
            copy: function (t) {
                return this.array = new t.array.constructor(t.array),
                    this.count = t.count,
                    this.stride = t.stride,
                    this.dynamic = t.dynamic,
                    this
            },
            copyAt: function (t, e, i) {
                t *= this.stride,
                    i *= e.stride;
                for (var n = 0, r = this.stride; n < r; n++)
                    this.array[t + n] = e.array[i + n];
                return this
            },
            set: function (t, e) {
                return void 0 === e && (e = 0),
                    this.array.set(t, e),
                    this
            },
            clone: function () {
                return (new this.constructor).copy(this)
            },
            onUpload: function (t) {
                return this.onUploadCallback = t,
                    this
            }
        }),
        Gr.prototype = Object.assign(Object.create(zr.prototype), {
            constructor: Gr,
            isInstancedInterleavedBuffer: !0,
            copy: function (t) {
                return zr.prototype.copy.call(this, t),
                    this.meshPerAttribute = t.meshPerAttribute,
                    this
            }
        }),
        jr.prototype = Object.assign(Object.create(vt.prototype), {
            constructor: jr,
            isInstancedBufferAttribute: !0,
            copy: function (t) {
                return vt.prototype.copy.call(this, t),
                    this.meshPerAttribute = t.meshPerAttribute,
                    this
            }
        }),
        Object.assign(kr.prototype, {
            linePrecision: 1,
            set: function (t, e) {
                this.ray.set(t, e)
            },
            setFromCamera: function (t, e) {
                e && e.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(e.matrixWorld),
                    this.ray.direction.set(t.x, t.y, .5).unproject(e).sub(this.ray.origin).normalize()) : e && e.isOrthographicCamera ? (this.ray.origin.set(t.x, t.y, (e.near + e.far) / (e.near - e.far)).unproject(e),
                        this.ray.direction.set(0, 0, -1).transformDirection(e.matrixWorld)) : console.error("THREE.Raycaster: Unsupported camera type.")
            },
            intersectObject: function (t, e) {
                var i = [];
                return Vr(t, this, i, e),
                    i.sort(Hr),
                    i
            },
            intersectObjects: function (t, e) {
                var i = [];
                if (!1 === Array.isArray(t))
                    return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),
                        i;
                for (var n = 0, r = t.length; n < r; n++)
                    Vr(t[n], this, i, e);
                return i.sort(Hr),
                    i
            }
        }),
        Object.assign(Wr.prototype, {
            start: function () {
                this.startTime = ("undefined" == typeof performance ? Date : performance).now(),
                    this.oldTime = this.startTime,
                    this.elapsedTime = 0,
                    this.running = !0
            },
            stop: function () {
                this.getElapsedTime(),
                    this.running = !1,
                    this.autoStart = !1
            },
            getElapsedTime: function () {
                return this.getDelta(),
                    this.elapsedTime
            },
            getDelta: function () {
                var t = 0;
                if (this.autoStart && !this.running)
                    return this.start(),
                        0;
                if (this.running) {
                    var e = ("undefined" == typeof performance ? Date : performance).now();
                    t = (e - this.oldTime) / 1e3,
                        this.oldTime = e,
                        this.elapsedTime += t
                }
                return t
            }
        }),
        Object.assign(Xr.prototype, {
            set: function (t, e, i) {
                return this.radius = t,
                    this.phi = e,
                    this.theta = i,
                    this
            },
            clone: function () {
                return (new this.constructor).copy(this)
            },
            copy: function (t) {
                return this.radius = t.radius,
                    this.phi = t.phi,
                    this.theta = t.theta,
                    this
            },
            makeSafe: function () {
                return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)),
                    this
            },
            setFromVector3: function (t) {
                return this.radius = t.length(),
                    0 === this.radius ? (this.theta = 0,
                        this.phi = 0) : (this.theta = Math.atan2(t.x, t.z),
                            this.phi = Math.acos(sh.clamp(t.y / this.radius, -1, 1))),
                    this
            }
        }),
        Object.assign(Yr.prototype, {
            set: function (t, e, i) {
                return this.radius = t,
                    this.theta = e,
                    this.y = i,
                    this
            },
            clone: function () {
                return (new this.constructor).copy(this)
            },
            copy: function (t) {
                return this.radius = t.radius,
                    this.theta = t.theta,
                    this.y = t.y,
                    this
            },
            setFromVector3: function (t) {
                return this.radius = Math.sqrt(t.x * t.x + t.z * t.z),
                    this.theta = Math.atan2(t.x, t.z),
                    this.y = t.y,
                    this
            }
        }),
        qr.prototype = Object.create(ut.prototype),
        qr.prototype.constructor = qr,
        qr.prototype.isImmediateRenderObject = !0,
        Zr.prototype = Object.create(Ue.prototype),
        Zr.prototype.constructor = Zr,
        Zr.prototype.update = function () {
            var t = new s
                , e = new s
                , i = new h;
            return function () {
                var n = ["a", "b", "c"];
                this.object.updateMatrixWorld(!0),
                    i.getNormalMatrix(this.object.matrixWorld);
                var r = this.object.matrixWorld
                    , o = this.geometry.attributes.position
                    , a = this.object.geometry;
                if (a && a.isGeometry)
                    for (var s = a.vertices, h = a.faces, l = 0, c = 0, u = h.length; c < u; c++)
                        for (var d = h[c], p = 0, f = d.vertexNormals.length; p < f; p++) {
                            var m = s[d[n[p]]]
                                , v = d.vertexNormals[p];
                            t.copy(m).applyMatrix4(r),
                                e.copy(v).applyMatrix3(i).normalize().multiplyScalar(this.size).add(t),
                                o.setXYZ(l, t.x, t.y, t.z),
                                l += 1,
                                o.setXYZ(l, e.x, e.y, e.z),
                                l += 1
                        }
                else if (a && a.isBufferGeometry)
                    for (var g = a.attributes.position, _ = a.attributes.normal, l = 0, p = 0, f = g.count; p < f; p++)
                        t.set(g.getX(p), g.getY(p), g.getZ(p)).applyMatrix4(r),
                            e.set(_.getX(p), _.getY(p), _.getZ(p)),
                            e.applyMatrix3(i).normalize().multiplyScalar(this.size).add(t),
                            o.setXYZ(l, t.x, t.y, t.z),
                            l += 1,
                            o.setXYZ(l, e.x, e.y, e.z),
                            l += 1;
                o.needsUpdate = !0
            }
        }(),
        Jr.prototype = Object.create(ut.prototype),
        Jr.prototype.constructor = Jr,
        Jr.prototype.dispose = function () {
            this.cone.geometry.dispose(),
                this.cone.material.dispose()
        }
        ,
        Jr.prototype.update = function () {
            var t = new s
                , e = new s;
            return function () {
                this.light.updateMatrixWorld();
                var i = this.light.distance ? this.light.distance : 1e3
                    , n = i * Math.tan(this.light.angle);
                this.cone.scale.set(n, n, i),
                    t.setFromMatrixPosition(this.light.matrixWorld),
                    e.setFromMatrixPosition(this.light.target.matrixWorld),
                    this.cone.lookAt(e.sub(t)),
                    void 0 !== this.color ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color)
            }
        }(),
        Qr.prototype = Object.create(Ue.prototype),
        Qr.prototype.constructor = Qr,
        Qr.prototype.updateMatrixWorld = function () {
            var t = new s
                , e = new o
                , i = new o;
            return function (n) {
                var r = this.bones
                    , o = this.geometry
                    , a = o.getAttribute("position");
                i.getInverse(this.root.matrixWorld);
                for (var s = 0, h = 0; s < r.length; s++) {
                    var l = r[s];
                    l.parent && l.parent.isBone && (e.multiplyMatrices(i, l.matrixWorld),
                        t.setFromMatrixPosition(e),
                        a.setXYZ(h, t.x, t.y, t.z),
                        e.multiplyMatrices(i, l.parent.matrixWorld),
                        t.setFromMatrixPosition(e),
                        a.setXYZ(h + 1, t.x, t.y, t.z),
                        h += 2)
                }
                o.getAttribute("position").needsUpdate = !0,
                    ut.prototype.updateMatrixWorld.call(this, n)
            }
        }(),
        $r.prototype = Object.create(Ft.prototype),
        $r.prototype.constructor = $r,
        $r.prototype.dispose = function () {
            this.geometry.dispose(),
                this.material.dispose()
        }
        ,
        $r.prototype.update = function () {
            void 0 !== this.color ? this.material.color.set(this.color) : this.material.color.copy(this.light.color)
        }
        ,
        to.prototype = Object.create(ut.prototype),
        to.prototype.constructor = to,
        to.prototype.dispose = function () {
            this.children[0].geometry.dispose(),
                this.children[0].material.dispose()
        }
        ,
        to.prototype.update = function () {
            var t = .5 * this.light.width
                , e = .5 * this.light.height
                , i = this.line.geometry.attributes.position
                , n = i.array;
            n[0] = t,
                n[1] = -e,
                n[2] = 0,
                n[3] = t,
                n[4] = e,
                n[5] = 0,
                n[6] = -t,
                n[7] = e,
                n[8] = 0,
                n[9] = -t,
                n[10] = -e,
                n[11] = 0,
                n[12] = t,
                n[13] = -e,
                n[14] = 0,
                i.needsUpdate = !0,
                void 0 !== this.color ? this.line.material.color.set(this.color) : this.line.material.color.copy(this.light.color)
        }
        ,
        eo.prototype = Object.create(ut.prototype),
        eo.prototype.constructor = eo,
        eo.prototype.dispose = function () {
            this.children[0].geometry.dispose(),
                this.children[0].material.dispose()
        }
        ,
        eo.prototype.update = function () {
            var t = new s
                , e = new Z
                , i = new Z;
            return function () {
                var n = this.children[0];
                if (void 0 !== this.color)
                    this.material.color.set(this.color);
                else {
                    var r = n.geometry.getAttribute("color");
                    e.copy(this.light.color),
                        i.copy(this.light.groundColor);
                    for (var o = 0, a = r.count; o < a; o++) {
                        var s = o < a / 2 ? e : i;
                        r.setXYZ(o, s.r, s.g, s.b)
                    }
                    r.needsUpdate = !0
                }
                n.lookAt(t.setFromMatrixPosition(this.light.matrixWorld).negate())
            }
        }(),
        io.prototype = Object.create(Ue.prototype),
        io.prototype.constructor = io,
        no.prototype = Object.create(Ue.prototype),
        no.prototype.constructor = no,
        ro.prototype = Object.create(Ue.prototype),
        ro.prototype.constructor = ro,
        ro.prototype.update = function () {
            var t = new s
                , e = new s
                , i = new h;
            return function () {
                this.object.updateMatrixWorld(!0),
                    i.getNormalMatrix(this.object.matrixWorld);
                for (var n = this.object.matrixWorld, r = this.geometry.attributes.position, o = this.object.geometry, a = o.vertices, s = o.faces, h = 0, l = 0, c = s.length; l < c; l++) {
                    var u = s[l]
                        , d = u.normal;
                    t.copy(a[u.a]).add(a[u.b]).add(a[u.c]).divideScalar(3).applyMatrix4(n),
                        e.copy(d).applyMatrix3(i).normalize().multiplyScalar(this.size).add(t),
                        r.setXYZ(h, t.x, t.y, t.z),
                        h += 1,
                        r.setXYZ(h, e.x, e.y, e.z),
                        h += 1
                }
                r.needsUpdate = !0
            }
        }(),
        oo.prototype = Object.create(ut.prototype),
        oo.prototype.constructor = oo,
        oo.prototype.dispose = function () {
            this.lightPlane.geometry.dispose(),
                this.lightPlane.material.dispose(),
                this.targetLine.geometry.dispose(),
                this.targetLine.material.dispose()
        }
        ,
        oo.prototype.update = function () {
            var t = new s
                , e = new s
                , i = new s;
            return function () {
                t.setFromMatrixPosition(this.light.matrixWorld),
                    e.setFromMatrixPosition(this.light.target.matrixWorld),
                    i.subVectors(e, t),
                    this.lightPlane.lookAt(i),
                    void 0 !== this.color ? (this.lightPlane.material.color.set(this.color),
                        this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color),
                            this.targetLine.material.color.copy(this.light.color)),
                    this.targetLine.lookAt(i),
                    this.targetLine.scale.z = i.length()
            }
        }(),
        ao.prototype = Object.create(Ue.prototype),
        ao.prototype.constructor = ao,
        ao.prototype.update = function () {
            function t(t, o, a, s) {
                n.set(o, a, s).unproject(r);
                var h = i[t];
                if (void 0 !== h)
                    for (var l = e.getAttribute("position"), c = 0, u = h.length; c < u; c++)
                        l.setXYZ(h[c], n.x, n.y, n.z)
            }
            var e, i, n = new s, r = new dt;
            return function () {
                e = this.geometry,
                    i = this.pointMap;
                r.projectionMatrix.copy(this.camera.projectionMatrix),
                    t("c", 0, 0, -1),
                    t("t", 0, 0, 1),
                    t("n1", -1, -1, -1),
                    t("n2", 1, -1, -1),
                    t("n3", -1, 1, -1),
                    t("n4", 1, 1, -1),
                    t("f1", -1, -1, 1),
                    t("f2", 1, -1, 1),
                    t("f3", -1, 1, 1),
                    t("f4", 1, 1, 1),
                    t("u1", .7, 1.1, -1),
                    t("u2", -.7, 1.1, -1),
                    t("u3", 0, 2, -1),
                    t("cf1", -1, 0, 1),
                    t("cf2", 1, 0, 1),
                    t("cf3", 0, -1, 1),
                    t("cf4", 0, 1, 1),
                    t("cn1", -1, 0, -1),
                    t("cn2", 1, 0, -1),
                    t("cn3", 0, -1, -1),
                    t("cn4", 0, 1, -1),
                    e.getAttribute("position").needsUpdate = !0
            }
        }(),
        so.prototype = Object.create(Ue.prototype),
        so.prototype.constructor = so,
        so.prototype.update = function () {
            var t = new nt;
            return function (e) {
                if (void 0 !== e && console.warn("THREE.BoxHelper: .update() has no longer arguments."),
                    void 0 !== this.object && t.setFromObject(this.object),
                    !t.isEmpty()) {
                    var i = t.min
                        , n = t.max
                        , r = this.geometry.attributes.position
                        , o = r.array;
                    o[0] = n.x,
                        o[1] = n.y,
                        o[2] = n.z,
                        o[3] = i.x,
                        o[4] = n.y,
                        o[5] = n.z,
                        o[6] = i.x,
                        o[7] = i.y,
                        o[8] = n.z,
                        o[9] = n.x,
                        o[10] = i.y,
                        o[11] = n.z,
                        o[12] = n.x,
                        o[13] = n.y,
                        o[14] = i.z,
                        o[15] = i.x,
                        o[16] = n.y,
                        o[17] = i.z,
                        o[18] = i.x,
                        o[19] = i.y,
                        o[20] = i.z,
                        o[21] = n.x,
                        o[22] = i.y,
                        o[23] = i.z,
                        r.needsUpdate = !0,
                        this.geometry.computeBoundingSphere()
                }
            }
        }(),
        so.prototype.setFromObject = function (t) {
            return this.object = t,
                this.update(),
                this
        }
        ,
        ho.prototype = Object.create(Ue.prototype),
        ho.prototype.constructor = ho,
        ho.prototype.updateMatrixWorld = function (t) {
            var e = this.box;
            e.isEmpty() || (e.getCenter(this.position),
                e.getSize(this.scale),
                this.scale.multiplyScalar(.5),
                ut.prototype.updateMatrixWorld.call(this, t))
        }
        ,
        lo.prototype = Object.create(Ne.prototype),
        lo.prototype.constructor = lo,
        lo.prototype.updateMatrixWorld = function (t) {
            var e = -this.plane.constant;
            Math.abs(e) < 1e-8 && (e = 1e-8),
                this.scale.set(.5 * this.size, .5 * this.size, e),
                this.lookAt(this.plane.normal),
                ut.prototype.updateMatrixWorld.call(this, t)
        }
        ;
    var Xh, Yh;
    co.prototype = Object.create(ut.prototype),
        co.prototype.constructor = co,
        co.prototype.setDirection = function () {
            var t, e = new s;
            return function (i) {
                i.y > .99999 ? this.quaternion.set(0, 0, 0, 1) : i.y < -.99999 ? this.quaternion.set(1, 0, 0, 0) : (e.set(i.z, 0, -i.x).normalize(),
                    t = Math.acos(i.y),
                    this.quaternion.setFromAxisAngle(e, t))
            }
        }(),
        co.prototype.setLength = function (t, e, i) {
            void 0 === e && (e = .2 * t),
                void 0 === i && (i = .2 * e),
                this.line.scale.set(1, Math.max(0, t - e), 1),
                this.line.updateMatrix(),
                this.cone.scale.set(i, e, i),
                this.cone.position.y = t,
                this.cone.updateMatrix()
        }
        ,
        co.prototype.setColor = function (t) {
            this.line.material.color.copy(t),
                this.cone.material.color.copy(t)
        }
        ,
        uo.prototype = Object.create(Ue.prototype),
        uo.prototype.constructor = uo;
    var qh = {
        createMultiMaterialObject: function (t, e) {
            for (var i = new Ge, n = 0, r = e.length; n < r; n++)
                i.add(new Ft(t, e[n]));
            return i
        },
        detach: function (t, e, i) {
            t.applyMatrix(e.matrixWorld),
                e.remove(t),
                i.add(t)
        },
        attach: function (t, e, i) {
            t.applyMatrix((new o).getInverse(i.matrixWorld)),
                e.remove(t),
                i.add(t)
        }
    }
        , Zh = 0
        , Jh = 1;
    xn.create = function (t, e) {
        return console.log("THREE.Curve.create() has been deprecated"),
            t.prototype = Object.create(xn.prototype),
            t.prototype.constructor = t,
            t.prototype.getPoint = e,
            t
    }
        ,
        Object.assign(kn.prototype, {
            createPointsGeometry: function (t) {
                console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
                var e = this.getPoints(t);
                return this.createGeometry(e)
            },
            createSpacedPointsGeometry: function (t) {
                console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
                var e = this.getSpacedPoints(t);
                return this.createGeometry(e)
            },
            createGeometry: function (t) {
                console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
                for (var e = new mt, i = 0, n = t.length; i < n; i++) {
                    var r = t[i];
                    e.vertices.push(new s(r.x, r.y, r.z || 0))
                }
                return e
            }
        }),
        Object.assign(Hn.prototype, {
            fromPoints: function (t) {
                console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),
                    this.setFromPoints(t)
            }
        }),
        Co.prototype = Object.create(En.prototype),
        Do.prototype = Object.create(En.prototype),
        No.prototype = Object.create(En.prototype),
        Object.assign(No.prototype, {
            initFromArray: function () {
                console.error("THREE.Spline: .initFromArray() has been removed.")
            },
            getControlPointsArray: function () {
                console.error("THREE.Spline: .getControlPointsArray() has been removed.")
            },
            reparametrizeByArcLength: function () {
                console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")
            }
        }),
        io.prototype.setColors = function () {
            console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")
        }
        ,
        Qr.prototype.update = function () {
            console.error("THREE.SkeletonHelper: update() no longer needs to be called.")
        }
        ,
        Object.assign(vr.prototype, {
            extractUrlBase: function (t) {
                return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),
                    Gh.extractUrlBase(t)
            }
        }),
        Object.assign(J.prototype, {
            center: function (t) {
                return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),
                    this.getCenter(t)
            },
            empty: function () {
                return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),
                    this.isEmpty()
            },
            isIntersectionBox: function (t) {
                return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),
                    this.intersectsBox(t)
            },
            size: function (t) {
                return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),
                    this.getSize(t)
            }
        }),
        Object.assign(nt.prototype, {
            center: function (t) {
                return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),
                    this.getCenter(t)
            },
            empty: function () {
                return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),
                    this.isEmpty()
            },
            isIntersectionBox: function (t) {
                return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),
                    this.intersectsBox(t)
            },
            isIntersectionSphere: function (t) {
                return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),
                    this.intersectsSphere(t)
            },
            size: function (t) {
                return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),
                    this.getSize(t)
            }
        }),
        Ut.prototype.center = function (t) {
            return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),
                this.getCenter(t)
        }
        ,
        Object.assign(sh, {
            random16: function () {
                return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),
                    Math.random()
            },
            nearestPowerOfTwo: function (t) {
                return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),
                    sh.floorPowerOfTwo(t)
            },
            nextPowerOfTwo: function (t) {
                return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),
                    sh.ceilPowerOfTwo(t)
            }
        }),
        Object.assign(h.prototype, {
            flattenToArrayOffset: function (t, e) {
                return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),
                    this.toArray(t, e)
            },
            multiplyVector3: function (t) {
                return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),
                    t.applyMatrix3(this)
            },
            multiplyVector3Array: function () {
                console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")
            },
            applyToBuffer: function (t) {
                return console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),
                    this.applyToBufferAttribute(t)
            },
            applyToVector3Array: function () {
                console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")
            }
        }),
        Object.assign(o.prototype, {
            extractPosition: function (t) {
                return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),
                    this.copyPosition(t)
            },
            flattenToArrayOffset: function (t, e) {
                return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),
                    this.toArray(t, e)
            },
            getPosition: function () {
                var t;
                return function () {
                    return void 0 === t && (t = new s),
                        console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),
                        t.setFromMatrixColumn(this, 3)
                }
            }(),
            setRotationFromQuaternion: function (t) {
                return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),
                    this.makeRotationFromQuaternion(t)
            },
            multiplyToArray: function () {
                console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")
            },
            multiplyVector3: function (t) {
                return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),
                    t.applyMatrix4(this)
            },
            multiplyVector4: function (t) {
                return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),
                    t.applyMatrix4(this)
            },
            multiplyVector3Array: function () {
                console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")
            },
            rotateAxis: function (t) {
                console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),
                    t.transformDirection(this)
            },
            crossVector: function (t) {
                return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),
                    t.applyMatrix4(this)
            },
            translate: function () {
                console.error("THREE.Matrix4: .translate() has been removed.")
            },
            rotateX: function () {
                console.error("THREE.Matrix4: .rotateX() has been removed.")
            },
            rotateY: function () {
                console.error("THREE.Matrix4: .rotateY() has been removed.")
            },
            rotateZ: function () {
                console.error("THREE.Matrix4: .rotateZ() has been removed.")
            },
            rotateByAxis: function () {
                console.error("THREE.Matrix4: .rotateByAxis() has been removed.")
            },
            applyToBuffer: function (t) {
                return console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),
                    this.applyToBufferAttribute(t)
            },
            applyToVector3Array: function () {
                console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")
            },
            makeFrustum: function (t, e, i, n, r, o) {
                return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),
                    this.makePerspective(t, e, n, i, r, o)
            }
        }),
        ot.prototype.isIntersectionLine = function (t) {
            return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),
                this.intersectsLine(t)
        }
        ,
        a.prototype.multiplyVector3 = function (t) {
            return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),
                t.applyQuaternion(this)
        }
        ,
        Object.assign(Nt.prototype, {
            isIntersectionBox: function (t) {
                return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),
                    this.intersectsBox(t)
            },
            isIntersectionPlane: function (t) {
                return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),
                    this.intersectsPlane(t)
            },
            isIntersectionSphere: function (t) {
                return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),
                    this.intersectsSphere(t)
            }
        }),
        Object.assign(Vn.prototype, {
            extractAllPoints: function (t) {
                return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),
                    this.extractPoints(t)
            },
            extrude: function (t) {
                return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),
                    new Bi(this, t)
            },
            makeGeometry: function (t) {
                return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),
                    new Yi(this, t)
            }
        }),
        Object.assign(r.prototype, {
            fromAttribute: function (t, e, i) {
                return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),
                    this.fromBufferAttribute(t, e, i)
            },
            distanceToManhattan: function (t) {
                return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),
                    this.manhattanDistanceTo(t)
            },
            lengthManhattan: function () {
                return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),
                    this.manhattanLength()
            }
        }),
        Object.assign(s.prototype, {
            setEulerFromRotationMatrix: function () {
                console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")
            },
            setEulerFromQuaternion: function () {
                console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")
            },
            getPositionFromMatrix: function (t) {
                return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),
                    this.setFromMatrixPosition(t)
            },
            getScaleFromMatrix: function (t) {
                return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),
                    this.setFromMatrixScale(t)
            },
            getColumnFromMatrix: function (t, e) {
                return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),
                    this.setFromMatrixColumn(e, t)
            },
            applyProjection: function (t) {
                return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),
                    this.applyMatrix4(t)
            },
            fromAttribute: function (t, e, i) {
                return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),
                    this.fromBufferAttribute(t, e, i)
            },
            distanceToManhattan: function (t) {
                return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),
                    this.manhattanDistanceTo(t)
            },
            lengthManhattan: function () {
                return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),
                    this.manhattanLength()
            }
        }),
        Object.assign(c.prototype, {
            fromAttribute: function (t, e, i) {
                return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),
                    this.fromBufferAttribute(t, e, i)
            },
            lengthManhattan: function () {
                return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),
                    this.manhattanLength()
            }
        }),
        mt.prototype.computeTangents = function () {
            console.warn("THREE.Geometry: .computeTangents() has been removed.")
        }
        ,
        Object.assign(ut.prototype, {
            getChildByName: function (t) {
                return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),
                    this.getObjectByName(t)
            },
            renderDepth: function () {
                console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")
            },
            translate: function (t, e) {
                return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),
                    this.translateOnAxis(e, t)
            }
        }),
        Object.defineProperties(ut.prototype, {
            eulerOrder: {
                get: function () {
                    return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),
                        this.rotation.order
                },
                set: function (t) {
                    console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),
                        this.rotation.order = t
                }
            },
            useQuaternion: {
                get: function () {
                    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")
                },
                set: function () {
                    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")
                }
            }
        }),
        Object.defineProperties(Le.prototype, {
            objects: {
                get: function () {
                    return console.warn("THREE.LOD: .objects has been renamed to .levels."),
                        this.levels
                }
            }
        }),
        Object.defineProperty(Oe.prototype, "useVertexTexture", {
            get: function () {
                console.warn("THREE.Skeleton: useVertexTexture has been removed.")
            },
            set: function () {
                console.warn("THREE.Skeleton: useVertexTexture has been removed.")
            }
        }),
        Object.defineProperty(xn.prototype, "__arcLengthDivisions", {
            get: function () {
                return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),
                    this.arcLengthDivisions
            },
            set: function (t) {
                console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),
                    this.arcLengthDivisions = t
            }
        }),
        ge.prototype.setLens = function (t, e) {
            console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),
                void 0 !== e && (this.filmGauge = e),
                this.setFocalLength(t)
        }
        ,
        Object.defineProperties(Wn.prototype, {
            onlyShadow: {
                set: function () {
                    console.warn("THREE.Light: .onlyShadow has been removed.")
                }
            },
            shadowCameraFov: {
                set: function (t) {
                    console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),
                        this.shadow.camera.fov = t
                }
            },
            shadowCameraLeft: {
                set: function (t) {
                    console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),
                        this.shadow.camera.left = t
                }
            },
            shadowCameraRight: {
                set: function (t) {
                    console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),
                        this.shadow.camera.right = t
                }
            },
            shadowCameraTop: {
                set: function (t) {
                    console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),
                        this.shadow.camera.top = t
                }
            },
            shadowCameraBottom: {
                set: function (t) {
                    console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),
                        this.shadow.camera.bottom = t
                }
            },
            shadowCameraNear: {
                set: function (t) {
                    console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),
                        this.shadow.camera.near = t
                }
            },
            shadowCameraFar: {
                set: function (t) {
                    console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),
                        this.shadow.camera.far = t
                }
            },
            shadowCameraVisible: {
                set: function () {
                    console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")
                }
            },
            shadowBias: {
                set: function (t) {
                    console.warn("THREE.Light: .shadowBias is now .shadow.bias."),
                        this.shadow.bias = t
                }
            },
            shadowDarkness: {
                set: function () {
                    console.warn("THREE.Light: .shadowDarkness has been removed.")
                }
            },
            shadowMapWidth: {
                set: function (t) {
                    console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),
                        this.shadow.mapSize.width = t
                }
            },
            shadowMapHeight: {
                set: function (t) {
                    console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),
                        this.shadow.mapSize.height = t
                }
            }
        }),
        Object.defineProperties(vt.prototype, {
            length: {
                get: function () {
                    return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),
                        this.array.length
                }
            }
        }),
        Object.assign(Pt.prototype, {
            addIndex: function (t) {
                console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),
                    this.setIndex(t)
            },
            addDrawCall: function (t, e, i) {
                void 0 !== i && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),
                    console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),
                    this.addGroup(t, e)
            },
            clearDrawCalls: function () {
                console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),
                    this.clearGroups()
            },
            computeTangents: function () {
                console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")
            },
            computeOffsets: function () {
                console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")
            }
        }),
        Object.defineProperties(Pt.prototype, {
            drawcalls: {
                get: function () {
                    return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),
                        this.groups
                }
            },
            offsets: {
                get: function () {
                    return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),
                        this.groups
                }
            }
        }),
        Object.defineProperties(Ur.prototype, {
            dynamic: {
                set: function () {
                    console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")
                }
            },
            onUpdate: {
                value: function () {
                    return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),
                        this
                }
            }
        }),
        Object.defineProperties(tt.prototype, {
            wrapAround: {
                get: function () {
                    console.warn("THREE.Material: .wrapAround has been removed.")
                },
                set: function () {
                    console.warn("THREE.Material: .wrapAround has been removed.")
                }
            },
            wrapRGB: {
                get: function () {
                    return console.warn("THREE.Material: .wrapRGB has been removed."),
                        new Z
                }
            },
            shading: {
                get: function () {
                    console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.")
                },
                set: function (t) {
                    console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."),
                        this.flatShading = t === ra
                }
            }
        }),
        Object.defineProperties(hn.prototype, {
            metal: {
                get: function () {
                    return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),
                        !1
                },
                set: function () {
                    console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")
                }
            }
        }),
        Object.defineProperties(Dt.prototype, {
            derivatives: {
                get: function () {
                    return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),
                        this.extensions.derivatives
                },
                set: function (t) {
                    console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),
                        this.extensions.derivatives = t
                }
            }
        }),
        Object.assign(Se.prototype, {
            getCurrentRenderTarget: function () {
                return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),
                    this.getRenderTarget()
            },
            getMaxAnisotropy: function () {
                return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),
                    this.capabilities.getMaxAnisotropy()
            },
            getPrecision: function () {
                return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),
                    this.capabilities.precision
            },
            resetGLState: function () {
                return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),
                    this.state.reset()
            },
            supportsFloatTextures: function () {
                return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),
                    this.extensions.get("OES_texture_float")
            },
            supportsHalfFloatTextures: function () {
                return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),
                    this.extensions.get("OES_texture_half_float")
            },
            supportsStandardDerivatives: function () {
                return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),
                    this.extensions.get("OES_standard_derivatives")
            },
            supportsCompressedTextureS3TC: function () {
                return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),
                    this.extensions.get("WEBGL_compressed_texture_s3tc")
            },
            supportsCompressedTexturePVRTC: function () {
                return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),
                    this.extensions.get("WEBGL_compressed_texture_pvrtc")
            },
            supportsBlendMinMax: function () {
                return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),
                    this.extensions.get("EXT_blend_minmax")
            },
            supportsVertexTextures: function () {
                return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),
                    this.capabilities.vertexTextures
            },
            supportsInstancedArrays: function () {
                return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),
                    this.extensions.get("ANGLE_instanced_arrays")
            },
            enableScissorTest: function (t) {
                console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),
                    this.setScissorTest(t)
            },
            initMaterial: function () {
                console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")
            },
            addPrePlugin: function () {
                console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")
            },
            addPostPlugin: function () {
                console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")
            },
            updateShadowMap: function () {
                console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")
            }
        }),
        Object.defineProperties(Se.prototype, {
            shadowMapEnabled: {
                get: function () {
                    return this.shadowMap.enabled
                },
                set: function (t) {
                    console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),
                        this.shadowMap.enabled = t
                }
            },
            shadowMapType: {
                get: function () {
                    return this.shadowMap.type
                },
                set: function (t) {
                    console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),
                        this.shadowMap.type = t
                }
            },
            shadowMapCullFace: {
                get: function () {
                    return this.shadowMap.cullFace
                },
                set: function (t) {
                    console.warn("THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace."),
                        this.shadowMap.cullFace = t
                }
            }
        }),
        Object.defineProperties(st.prototype, {
            cullFace: {
                get: function () {
                    return this.renderReverseSided ? qo : Yo
                },
                set: function (t) {
                    var e = t !== Yo;
                    console.warn("WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to " + e + "."),
                        this.renderReverseSided = e
                }
            }
        }),
        Object.defineProperties(u.prototype, {
            wrapS: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),
                        this.texture.wrapS
                },
                set: function (t) {
                    console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),
                        this.texture.wrapS = t
                }
            },
            wrapT: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),
                        this.texture.wrapT
                },
                set: function (t) {
                    console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),
                        this.texture.wrapT = t
                }
            },
            magFilter: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),
                        this.texture.magFilter
                },
                set: function (t) {
                    console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),
                        this.texture.magFilter = t
                }
            },
            minFilter: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),
                        this.texture.minFilter
                },
                set: function (t) {
                    console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),
                        this.texture.minFilter = t
                }
            },
            anisotropy: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),
                        this.texture.anisotropy
                },
                set: function (t) {
                    console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),
                        this.texture.anisotropy = t
                }
            },
            offset: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),
                        this.texture.offset
                },
                set: function (t) {
                    console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),
                        this.texture.offset = t
                }
            },
            repeat: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),
                        this.texture.repeat
                },
                set: function (t) {
                    console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),
                        this.texture.repeat = t
                }
            },
            format: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),
                        this.texture.format
                },
                set: function (t) {
                    console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),
                        this.texture.format = t
                }
            },
            type: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),
                        this.texture.type
                },
                set: function (t) {
                    console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),
                        this.texture.type = t
                }
            },
            generateMipmaps: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),
                        this.texture.generateMipmaps
                },
                set: function (t) {
                    console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),
                        this.texture.generateMipmaps = t
                }
            }
        }),
        Object.assign(ye.prototype, {
            getStandingMatrix: function () {
                console.warn("THREE.WebVRManager: .getStandingMatrix() has been removed.")
            }
        }),
        Object.defineProperties(ye.prototype, {
            standing: {
                set: function () {
                    console.warn("THREE.WebVRManager: .standing has been removed.")
                }
            }
        }),
        Ar.prototype.load = function (t) {
            console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
            var e = this;
            return (new Sr).load(t, function (t) {
                e.setBuffer(t)
            }),
                this
        }
        ,
        Rr.prototype.getData = function () {
            return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),
                this.getFrequencyData()
        }
        ,
        Tr.prototype.updateCubeMap = function (t, e) {
            return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),
                this.update(t, e)
        }
        ;
    var Kh = {
        merge: function (t, e, i) {
            console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");
            var n;
            e.isMesh && (e.matrixAutoUpdate && e.updateMatrix(),
                n = e.matrix,
                e = e.geometry),
                t.merge(e, n, i)
        },
        center: function (t) {
            return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."),
                t.center()
        }
    }
        , Qh = {
            crossOrigin: void 0,
            loadTexture: function (t, e, i, n) {
                console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
                var r = new yn;
                r.setCrossOrigin(this.crossOrigin);
                var o = r.load(t, i, void 0, n);
                return e && (o.mapping = e),
                    o
            },
            loadTextureCube: function (t, e, i, n) {
                console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
                var r = new _n;
                r.setCrossOrigin(this.crossOrigin);
                var o = r.load(t, i, void 0, n);
                return e && (o.mapping = e),
                    o
            },
            loadCompressedTexture: function () {
                console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")
            },
            loadCompressedTextureCube: function () {
                console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")
            }
        }
}
    , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
    function (t, e, i) {
        /////////////////////// library
        "use strict";
        function n() { }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            n.intToFloatRGB = function (t) {
                return {
                    r: (t >>> 16 & 255) / 255,
                    g: (t >>> 8 & 255) / 255,
                    b: (255 & t) / 255
                }
            }
            ,
            n.intToStringHexRGB = function (t) {
                return "#" + t.toString(16)
            }
            ,
            e.default = n
    }
    , , , , , , , , , , function (t, e, i) {
        "use strict";
        function n(t, e) {
            if (!(t instanceof e))
                throw new TypeError("Cannot call a class as a function")
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var r = function () {
            function t(t, e) {
                for (var i = 0; i < e.length; i++) {
                    var n = e[i];
                    n.enumerable = n.enumerable || !1,
                        n.configurable = !0,
                        "value" in n && (n.writable = !0),
                        Object.defineProperty(t, n.key, n)
                }
            }
            return function (e, i, n) {
                return i && t(e.prototype, i),
                    n && t(e, n),
                    e
            }
        }()
            , o = []
            , a = !1
            , s = null
            , h = null
            , l = null
            , c = null
            , u = !0
            , d = void 0
            , p = void 0
            , f = void 0
            , m = function () {
                function t() {
                    if (n(this, t),
                        window.AudioContext || window.webkitAudioContext) {
                        var e = window.AudioContext || window.webkitAudioContext;
                        new e
                    }
                }
                return r(t, [{
                    key: "addClickSound",
                    value: function (t) {
                        s = new Audio(t)
                    }
                }, {
                    key: "addExplosionSound",
                    value: function (t) {
                        c = new Audio(t)
                    }
                }, {
                    key: "addHoverSound",
                    value: function (t) {
                        h = new Audio(t)
                    }
                }, {
                    key: "addShowSound",
                    value: function (t) {
                        l = new Audio(t)
                    }
                }, {
                    key: "addSound",
                    value: function (t) {
                        var e = new Audio(t.src);
                        e.loop = t.loop || !1;
                        var i = void 0 !== t.x && void 0 !== t.y || !1
                            , n = void 0 !== t.volume ? t.volume : 1;
                        e.volume = n,
                            o.push({
                                audio: e,
                                mutable: i,
                                volume: n,
                                x: t.x || 0,
                                y: t.y || 0
                            })
                    }
                }, {
                    key: "isSoundOn",
                    value: function () {
                        return u
                    }
                }, {
                    key: "toggleSound",
                    value: function () {
                        u = !u
                    }
                }, {
                    key: "isPaused",
                    value: function () {
                        return a
                    }
                }, {
                    key: "pauseAllSounds",
                    value: function () {
                        for (a = !0,
                            d = 0; d < o.length; d++)
                            o[d].audio.pause();
                        s.volume = 0,
                            h.volume = 0,
                            l.volume = 0,
                            c.volume = 0
                    }
                }, {
                    key: "playAllSounds",
                    value: function () {
                        for (a = !1,
                            d = 0; d < o.length; d++)
                            o[d].audio.play();
                        s.volume = .45,
                            h.volume = .75,
                            l.volume = .5,
                            c.volume = 1
                    }
                }, {
                    key: "playClickSound",
                    value: function () {
                        s && (s.currentTime = 0,
                            s.play())
                    }
                }, {
                    key: "playExplosionSound",
                    value: function () {
                        c && (c.currentTime = 0,
                            c.play())
                    }
                }, {
                    key: "playHoverSound",
                    value: function () {
                        h && (h.currentTime = 0,
                            h.play())
                    }
                }, {
                    key: "playShowSound",
                    value: function () {
                        l && (l.currentTime = 0,
                            l.play())
                    }
                }, {
                    key: "setHeadphonesPosition",
                    value: function (t, e) {
                        for (d = 0; d < o.length; d++) {
                            var i = o[d];
                            if (i.mutable) {
                                p = t - i.x,
                                    f = e - i.y;
                                var n = Math.sqrt(p * p + f * f);
                                i.audio.volume = n > 3 ? 0 : i.volume - .8 * n / 3 * i.volume
                            }
                        }
                    }
                }]),
                    t
            }();
        e.default = new m
    }
    , , , , , , , , , , , , , , , function (t, e, i) {
        "use strict";
        function n(t) {
            this.type = t
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            n.ERROR = 1,
            n.LOAD = 2,
            n.LOAD_PROGRESS_CHANGE = 3,
            n.PROGRESS_CHANGE = 4,
            e.default = n
    }
    , , , , , , , , , , , , , , , , , , , , , , , , , , , , function (t, e, i) {
        "use strict";
        function n(t, e) {
            if (!(t instanceof e))
                throw new TypeError("Cannot call a class as a function")
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.FrameSequence = void 0;
        var r = function () {
            function t(t, e) {
                for (var i = 0; i < e.length; i++) {
                    var n = e[i];
                    n.enumerable = n.enumerable || !1,
                        n.configurable = !0,
                        "value" in n && (n.writable = !0),
                        Object.defineProperty(t, n.key, n)
                }
            }
            return function (e, i, n) {
                return i && t(e.prototype, i),
                    n && t(e, n),
                    e
            }
        }()
            , o = i(4)
            , a = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(o)
            , s = i(375)
            , h = function (t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }(s)
            , l = function () {
                function t(e) {
                    n(this, t),
                        this._tickCount = 0,
                        this._frameCount = 0,
                        this._numberOfIdleTicks = Math.round(60 / e.rate),
                        this._uvs = this._getUvs(e.numberOfNumberOfVerticalFrames, e.numberOfHorizontalFrames, e.numberOfEmptyFrames),
                        this._numberOfFrames = this._uvs.length / 8,
                        this._vertexIndexes = [0, 1, 2, 3];
                    var i = new a.PlaneBufferGeometry(e.width, e.height, 1, 1);
                    i.addAttribute("a_vertexIndex", new a.BufferAttribute(new Float32Array(this._vertexIndexes), 1));
                    var r = new a.ShaderMaterial(new h.default({
                        colorMap: e.colorMap || null,
                        frameColorMap: e.frameColorMap,
                        uvs: this._uvs,
                        transparent: !0,
                        depthTest: !1,
                        depthWrite: !1
                    }));
                    this._u_frameIndex = r.uniforms.u_frameIndex,
                        this.object3D = new a.Mesh(i, r)
                }
                return r(t, [{
                    key: "_getUvs",
                    value: function (t, e, i) {
                        for (var n = [], r = 1 / e, o = 1 / t, a = 0; a < t; a++)
                            for (var s = 0; s < e; s++)
                                n.push(s * r),
                                    n.push(1 - a * o),
                                    n.push(s * r + r),
                                    n.push(1 - a * o),
                                    n.push(s * r),
                                    n.push(1 - a * o - o),
                                    n.push(s * r + r),
                                    n.push(1 - a * o - o);
                        return i && (n.length = n.length - 8 * i),
                            n
                    }
                }, {
                    key: "tick",
                    value: function () {
                        this._tickCount === this._numberOfIdleTicks && (this._tickCount = 0,
                            this._frameCount++,
                            this._frameCount >= this._numberOfFrames && (this._frameCount = 0),
                            this._u_frameIndex.value = this._frameCount,
                            this._u_frameIndex.needsUpdate = !0),
                            this._tickCount++
                    }
                }]),
                    t
            }();
        e.FrameSequence = l
    }
    , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function (t, e, i) {
        "use strict";
        function n(t) {
            t.position = t.position || {
                x: 0,
                y: 0,
                z: 0
            },
                t.axis = t.axis || "z";
            for (var e = new o.BufferGeometry, i = t.material || null, n = [], r = 0; r < 360; r += 4) {
                var a = Math.cos(r / 180 * Math.PI) * t.radius
                    , s = Math.sin(r / 180 * Math.PI) * t.radius;
                "x" === t.axis ? n.push(0, a, s) : "y" === t.axis ? n.push(a, 0, s) : "z" === t.axis && n.push(a, s, 0)
            }
            e.addAttribute("position", new o.BufferAttribute(new Float32Array(n), 3)),
                i || (i = new o.LineBasicMaterial({
                    color: t.color,
                    transparent: void 0 !== t.opacity,
                    opacity: t.opacity || 1
                })),
                this.object3D = new o.LineLoop(e, i),
                this.object3D.translateX(t.position.x),
                this.object3D.translateY(t.position.y),
                this.object3D.translateZ(t.position.z),
                this.object3D.renderOrder = t.renderOrder || 0,
                this.boundingSphere = new o.Sphere(new o.Vector3(t.position.x, t.position.y, t.position.z), t.radius)
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.Circle = void 0;
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r);
        e.Circle = n
    }
    , function (t, e, i) {
        "use strict";
        function n() { }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r)
            , a = i(43)
            , s = function (t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }(a);
        n.fillCircle = function (t, e) {
            var i = document.createElement("canvas");
            i.width = i.height = 4 * t,
                i.style.background = "transparent";
            var n = i.getContext("2d");
            return n.fillStyle = s.default.intToStringHexRGB(e),
                n.beginPath(),
                n.arc(2 * t, 2 * t, t, 0, 2 * Math.PI),
                n.fill(),
                new o.CanvasTexture(i)
        }
            ,
            n.circleMask = function (t) {
                var e = document.createElement("canvas");
                e.width = e.height = t;
                var i = e.getContext("2d");
                return i.fillStyle = "#000",
                    i.fillRect(0, 0, e.width, e.height),
                    i.fillStyle = "#fff",
                    i.beginPath(),
                    i.arc(t / 2, t / 2, t / 2 - 2, 0, 2 * Math.PI),
                    i.fill(),
                    new o.CanvasTexture(e)
            }
            ,
            e.default = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            var e = null;
            if (t.glowColor) {
                var i = o.default.intToFloatRGB(t.glowColor);
                e = "vec4(" + i.r + ", " + i.g + ", " + i.b + ", 1.0)"
            }
            this.uniforms = {
                u_colorMap: {
                    value: t.colorMap
                }
            },
                this.vertexShader = ["varying vec2 v_uv;", function (t) {
                    return t ? ["varying vec3 v_normal;", "varying vec3 v_position;"].join("") : ""
                }(e), "void main()", "{", "gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "v_uv = uv;", function (t) {
                    return t ? ["v_normal = normalMatrix * normal;", "v_position = vec3(modelMatrix * vec4(position, 1.0));"].join("") : ""
                }(e), "}"].join(""),
                this.fragmentShader = ["uniform sampler2D u_colorMap;", "varying vec2 v_uv;", function (t) {
                    return t ? ["const vec4 GLOW_COLOR = " + t + ";", "const float GLOW_EDGE = 0.7;", "const float GLOW_EDGE_MULTIPLIER = 1.0 / GLOW_EDGE;", "varying vec3 v_normal;", "varying vec3 v_position;"].join("") : ""
                }(e), "void main()", "{", function (t) {
                    return t ? ["gl_FragColor = mix(texture2D(u_colorMap, v_uv), GLOW_COLOR, clamp(GLOW_EDGE - dot(normalize(cameraPosition - v_position), v_normal), 0.0, 1.0) * GLOW_EDGE_MULTIPLIER);"].join("") : "gl_FragColor = texture2D(u_colorMap, v_uv);"
                }(e), "}"].join(""),
                this.transparent = t.transparent,
                this.depthTest = t.depthTest,
                this.depthWrite = t.depthTest
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.PlanetShader = void 0;
        var r = i(43)
            , o = function (t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }(r);
        e.PlanetShader = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t, e) {
            if (!(t instanceof e))
                throw new TypeError("Cannot call a class as a function")
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var r = function t(e) {
            n(this, t),
                this.uniforms = {
                    u_texture: {
                        value: e.texture
                    },
                    u_frameOffsets: {
                        value: e.frameOffsets
                    },
                    u_frameIndex: {
                        value: 0
                    }
                },
                this.vertexShader = ["uniform float u_frameOffsets[" + e.frameOffsets.length + "];", "uniform int u_frameIndex;", "varying float v_offsetX;", "varying float v_offsetY;", "void main()", "{", "   gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "   gl_PointSize = 40.0;", "   v_offsetX = u_frameOffsets[u_frameIndex * 2];", "   v_offsetY = u_frameOffsets[u_frameIndex * 2 + 1];", "}"].join("\n"),
                this.fragmentShader = ["uniform sampler2D u_texture;", "varying float v_offsetX;", "varying float v_offsetY;", "void main()", "{", "   gl_FragColor = texture2D(u_texture, vec2(gl_PointCoord.x * 0.25 + v_offsetX, (1.0 - gl_PointCoord.y) * 0.25 + v_offsetY));", "}"].join("\n"),
                this.transparent = !0,
                this.depthTest = !1,
                this.depthWrite = !1
        };
        e.RedLightsShader = r
    }
    , function (t, e, i) {
        "use strict";
        function n() {
            this._eventListeners = []
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            n.prototype.addEventListener = function (t, e) {
                for (var i = 0; i < this._eventListeners.length; i++)
                    if (this._eventListeners[i].type === t && this._eventListeners[i].listener === e)
                        return;
                this._eventListeners.push({
                    type: t,
                    listener: e
                })
            }
            ,
            n.prototype.dispatchEvent = function (t) {
                for (var e = 0; e < this._eventListeners.length; e++)
                    this._eventListeners[e].type === t.type && this._eventListeners[e].listener(t)
            }
            ,
            n.prototype.removeEventListener = function (t, e) {
                for (var i = 0; i < this._eventListeners.length; i++)
                    if (this._eventListeners[i].type === t && this._eventListeners[i].listener === e) {
                        this._eventListeners.splice(i, 1);
                        break
                    }
            }
            ,
            e.default = n
    }
    , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function (t, e, i) {
        i(48),
            t.exports = i(351)
    } // code
    , function (t, e, i) {
        "use strict";
        function n(t) {
            return t && t.__esModule ? t : {
                default: t
            }
        }
        i(352);
        var r = i(353)
            , o = n(r)
            , a = i(460)
            , s = n(a)
            , h = document.querySelector("html");
        h.classList.remove("webgl"),
            h.classList.remove("no-webgl"),
            s.default.webgl ? (h.classList.add("webgl"),
                window.academy["3d"] = new o.default) : h.classList.add("no-webgl")
    }
    , function (t, e) { }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            return t && t.__esModule ? t : {
                default: t
            }
        }
        function r(t) {
            if (t && t.__esModule)
                return t;
            var e = {};
            if (null != t)
                for (var i in t)
                    Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
            return e.default = t,
                e
        }
        function o() {
            ce.set(0, 0, 0);
            var t = void 0
                , e = void 0;
            for (t = 0; t < Ot.length; t++)
                e = Ot[t],
                    e.visible && (ce.setFromMatrixPosition(e.object3D.matrixWorld),
                        ce.project(tt),
                        F = ce.x * ut + ut | 0,
                        z = -ce.y * dt + dt | 0,
                        e.domElementStyle.transform = "translate3d(" + F + "px," + z + "px,0)",
                        e.rotational && (G = (qt - z - e.rotationalElementOffsetTop) / U * 30,
                            j = (Yt - F - e.rotationalElementOffsetLeft) / D * 30,
                            e.rotationalElementStyle.transform = "rotateY(" + j + "deg) rotateX(" + -G + "deg) rotateZ(0)"));
            var i = void 0;
            for (t = 0; t < At.length; t++)
                if (i = At[t],
                    i.visible)
                    if (i.boundingSphere.containsPoint(mt)) {
                        if (!i.domElementClassList.contains("visible")) {
                            i.domElementClassList.add("visible");
                            var n = i.domElement.querySelector(".spacer");
                            if (n) {
                                var r = n.textContent
                                    , o = new I.default(n);
                                o.to(r, 2)
                            }
                            ue && i.hasShowSound && P.default.playShowSound()
                        }
                    } else
                        i.domElementClassList.remove("visible")
        }
        function a() {
            H.setFromMatrix(V.identity().multiplyMatrices(tt.projectionMatrix, tt.matrixWorldInverse));
            var t = void 0
                , e = void 0;
            for (t = 0; t < Et.length; t++)
                e = Et[t],
                    H.intersectsSphere(e.boundingSphere) ? e.visible || (e.visible = !0,
                        at.add(e.object3D)) : e.visible && (e.visible = !1,
                            at.remove(e.object3D));
            for (t = 0; t < Tt.length; t++)
                e = Tt[t],
                    H.intersectsSphere(e.boundingSphere) ? e.visible || (e.visible = !0,
                        at.add(e.object3D)) : e.visible && (e.visible = !1,
                            at.remove(e.object3D));
            for (t = 0; t < wt.length; t++)
                e = wt[t],
                    H.intersectsSphere(e.boundingSphere) ? e.visible || (e.visible = !0,
                        e.object3D.lookAt(et),
                        at.add(e.object3D)) : e.visible && (e.visible = !1,
                            at.remove(e.object3D));
            for (t = 0; t < St.length; t++)
                e = St[t],
                    H.intersectsSphere(e.boundingSphere) ? e.visible || (e.visible = !0,
                        e.object3D.lookAt(et),
                        at.add(e.object3D)) : e.visible && (e.visible = !1,
                            at.remove(e.object3D));
            for (t = 0; t < Mt.length; t++)
                e = Mt[t],
                    H.intersectsSphere(e.boundingSphere) ? e.visible || (e.visible = !0,
                        e.assemble(),
                        at.add(e.object3D)) : e.visible && (e.visible = !1,
                            at.remove(e.object3D));
            var i = void 0;
            for (t = 0; t < At.length; t++)
                i = At[t],
                    i.hidden ? i.visible = !1 : i.visible = H.intersectsSphere(i.boundingSphere);
            yt.visible = H.intersectsSphere(yt.boundingSphere)
        }
        function s() {
            if (pt.setPointer(pt.pointer + le * he),
                (k = pt.pointer) < Ct[0])
                -1 !== Dt && (Dt = -1,
                    Ut = !0);
            else
                for (var t = Ct.length - 1; t >= 0; t--)
                    if (k >= Ct[t]) {
                        if (Dt === t)
                            break;
                        Dt = t,
                            Ut = !0;
                        break
                    }
            var e = et.x
                , i = et.y;
            if (k > ee ? (mt.x = pt.pointerPosition.x,
                mt.y = pt.pointerPosition.y) : (mt.x = vt.x,
                    mt.y = vt.y,
                    ft.engineOff()),
                gt.y = pt.pointerRotationY,
                k < J ? (et.x = it.x,
                    et.y = it.y) : k > K ? (et.x = nt.x,
                        et.y = nt.y) : (et.x = pt.pointerPosition.x,
                            et.y = pt.pointerPosition.y),
                k < $)
                ft.setScale(1);
            else {
                var n = (ie - k) / (ie - $);
                n < Q && (n = Q),
                    ft.setScale(n)
            }
            var r = .5 * (et.y - i)
                , o = .5 * (et.x - e);
            bt.rotateOnWorldAxis(q, -r),
                bt.rotateOnWorldAxis(Z, o),
                xt.rotateOnWorldAxis(q, .5 * -r),
                xt.rotateOnWorldAxis(Z, .5 * o),
                It = !0,
                a()
        }
        function h(t) {
            Gt || (Ft = !0,
                Math.max(-1, Math.min(1, t.wheelDelta || -t.detail)) < 0 ? (Wt = !0,
                    Xt = !1) : (Wt = !1,
                        Xt = !0))
        }
        function l(t) {
            t.preventDefault(),
                t.stopPropagation();
            var e = Bt.check(t);
            if (!1 !== e) {
                if (Gt)
                    return;
                Ft = !0,
                    e < 0 ? (Wt = !0,
                        Xt = !1) : (Wt = !1,
                            Xt = !0)
            }
        }
        function c() {
            if (!ne)
                return le = 0,
                    he = 0,
                    void (se = Kt);
            se <= Qt ? (le = (Math.sin(se) + 1) * te,
                se += $t) : (le = te,
                    se = Qt)
        }
        function u() {
            if (pt.pointerMinMaxValue)
                return le = 0,
                    he = 0,
                    void (se = Kt);
            se -= $t,
                se > Kt ? le = (Math.sin(se) + 1) * te : (le = 0,
                    he = 0,
                    se = Kt)
        }
        function d(t) {
            w.default.call(this),
                this._init = this._init.bind(this),
                this._keyDown = this._keyDown.bind(this),
                this._keyUp = this._keyUp.bind(this),
                this._loadProgressChange = this._loadProgressChange.bind(this),
                this._resize = this._resize.bind(this),
                this._tick = this._tick.bind(this),
                this._ASSET_IMAGE_ASTEROID_PIECES = "IMAGE_ASTEROID_PIECES",
                this._ASSET_IMAGE_GROUP_1 = "IMAGE_GROUP_1",
                this._ASSET_IMAGE_GROUP_2 = "IMAGE_GROUP_2",
                this._ASSET_IMAGE_GROUP_3 = "IMAGE_GROUP_3",
                this._ASSET_IMAGE_GROUP_5 = "IMAGE_GROUP_5",
                this._ASSET_IMAGE_BLACK_HOLE = "BLACK_HOLE",
                this._ASSET_IMAGE_CLOUDS = "IMAGE_CLOUDS",
                this._ASSET_IMAGE_GLOWS = "IMAGE_GLOWS",
                this._ASSET_IMAGE_GLOWS_MERCURY = "IMAGE_GLOWS_MERCURY",
                this._ASSET_IMAGE_PAPER_PLANE = "PAPER_PLANE",
                this._ASSET_IMAGE_PLANET_EARTH = "IMAGE_PLANET_EARTH",
                this._ASSET_IMAGE_PLANET_ICE = "IMAGE_PLANET_ICE",
                this._ASSET_IMAGE_PLANET_JUPITER = "IMAGE_PLANET_JUPITER",
                this._ASSET_IMAGE_PLANET_MARS = "IMAGE_PLANET_MARS",
                this._ASSET_IMAGE_PLANET_MERCURY = "IMAGE_PLANET_MERCURY",
                this._ASSET_IMAGE_PLANET_NEPTUNE = "IMAGE_PLANET_NEPTUNE",
                this._ASSET_IMAGE_PLANET_SAND = "IMAGE_PLANET_SAND",
                this._ASSET_IMAGE_PLANET_SATURN = "IMAGE_PLANET_SATURN",
                this._ASSET_IMAGE_SATELLITE_1 = "IMAGE_SATELLITE_1",
                this._ASSET_IMAGE_SATELLITE_2 = "IMAGE_SATELLITE_2",
                this._ASSET_IMAGE_SPACESHIP = "IMAGE_SPACESHIP",
                this._ASSET_IMAGE_SPACESHIP_FLAME = "IMAGE_SPACESHIP_FLAME",
                this._ASSET_IMAGE_STARS = "IMAGE_STARS",
                this._ASSET_IMAGE_SUN = "IMAGE_SUN",
                this._ASSET_IMAGE_UNIVERSE_LEFT = "IMAGE_UNIVERSE_LEFT",
                this._ASSET_IMAGE_UNIVERSE_RIGHT = "IMAGE_UNIVERSE_RIGHT",
                this._ASSET_IMAGE_UNIVERSE_TOP = "IMAGE_UNIVERSE_TOP",
                this._ASSET_IMAGE_UNIVERSE_BOTTOM = "IMAGE_UNIVERSE_BOTTOM",
                this._ASSET_IMAGE_UNIVERSE_FRONT = "IMAGE_UNIVERSE_FRONT",
                this._ASSET_IMAGE_UNIVERSE_BACK = "IMAGE_UNIVERSE_BACK",
                this._ASSET_IMAGE_SPACESHIP_1 = "IMAGE_SPACESHIP_1",
                this._ASSET_IMAGE_SPACESHIP_1_FRAMES = "IMAGE_SPACESHIP_1_FRAMES",
                this._ASSET_IMAGE_SPACESHIP_2 = "IMAGE_SPACESHIP_2",
                this._ASSET_IMAGE_SPACESHIP_2_BLUE_LIGHTS_FRAMES_1 = "IMAGE_SPACESHIP_2_BLUE_LIGHTS_FRAMES_1",
                this._ASSET_IMAGE_SPACESHIP_2_BLUE_LIGHTS_FRAMES_2 = "IMAGE_SPACESHIP_2_BLUE_LIGHTS_FRAMES_2",
                this._ASSET_IMAGE_SPACESHIP_2_BLUE_LIGHTS_FRAMES_3 = "IMAGE_SPACESHIP_2_BLUE_LIGHTS_FRAMES_3",
                this._ASSET_IMAGE_SPACESHIP_2_RED_LIGHTS_FRAMES = "IMAGE_SPACESHIP_2_RED_LIGHTS_FRAMES",
                this._ASSET_IMAGE_SPACESHIP_3 = "IMAGE_SPACESHIP_3",
                this._ASSET_IMAGE_SPACESHIP_3_BLUE_LIGHTS_FRAMES_1 = "IMAGE_SPACESHIP_3_BLUE_LIGHTS_FRAMES_1",
                this._ASSET_IMAGE_SPACESHIP_3_BLUE_LIGHTS_FRAMES_2 = "IMAGE_SPACESHIP_3_BLUE_LIGHTS_FRAMES_2",
                this._ASSET_IMAGE_SPACESHIP_3_BLUE_LIGHTS_FRAMES_3 = "IMAGE_SPACESHIP_3_BLUE_LIGHTS_FRAMES_3",
                this._ASSET_IMAGE_ENTERPRISE_FRAMES = "IMAGE_ENTERPRISE_FRAMES",
                this._ASSET_IMAGE_STARCLOUDS = "IMAGE_STARCLOUDS",
                this._ASSET_IMAGE_LASER_MISSILE = "IMAGE_LASER_MISSILE",
                this._ASSET_IMAGE_LASER_MISSILE_SPARKLES = "IMAGE_LASER_MISSILE_SPARKLES",
                this._ASSET_OBJECT_BORDER_1 = "OBJECT_BORDER_1",
                this._ASSET_OBJECT_BORDER_2 = "OBJECT_BORDER_2",
                this._ASSET_OBJECT_SPACESHIP = "OBJECT_SPACESHIP",
                this._ASSET_OBJECT_SPUTNIK = "OBJECT_SPUTNIK",
                this._ASSET_OBJECT_PAPER_PLANE = "OBJECT_PAPER_PLANE",
                this._ASSET_OBJECT_LASER_MISSILE_BLUE = "OBJECT_LASER_MISSILE_BLUE",
                this._ASSET_OBJECT_LASER_MISSILE_RED = "OBJECT_LASER_MISSILE_RED",
                this._ASSET_AUDIO_BACKGROUND = "AUDIO_BACKGROUND",
                this._ASSET_AUDIO_ASTRONAUTS = "AUDIO_ASTRONAUTS",
                this._ASSET_AUDIO_PLANET_ICE = "AUDIO_PLANET_ICE",
                this._ASSET_AUDIO_PLANET_MERCURY = "AUDIO_PLANET_MERCURY",
                this._ASSET_AUDIO_LINK_HOVER = "AUDIO_LINK_HOVER",
                this._ASSET_AUDIO_LINK_SHOW = "AUDIO_LINK_SHOW",
                this._ASSET_AUDIO_LINK_CLICK = "AUDIO_LINK_CLICK",
                this._ASSET_AUDIO_BLACK_HOLE = "AUDIO_BLACK_HOLE",
                this._ASSET_AUDIO_SPACESHIP_2 = "AUDIO_SPACESHIP_2",
                this._ASSET_AUDIO_SPACESHIP_3 = "AUDIO_SPACESHIP_3",
                this._ASSET_AUDIO_ASTEROID_EXPLOSION = "AUDIO_ASTEROID_EXPLOSION",
                this._ASSET_AUDIO_LASER_RED = "AUDIO_LASER_RED",
                this._ASSET_AUDIO_LASER_BLUE = "AUDIO_LASER_BLUE",
                this._PLANET_ICE_ORBIT_RADIUS = 1.016,
                this._PLANET_SAND_ORBIT_RADIUS = 1.017,
                this._ROTATION_SPEEDS = [.0022, .0018, .0014, .001, 6e-4],
                this._TRANSLATION_AMPLITUDES = [.125, .1, .075, .05, .025],
                this._TRANSLATION_SPEEDS = [.0088, .0072, .0056, .004, .0024],
                this._DISTANCE_Z_1 = 3.5,
                this._DISTANCE_Z_2 = .5,
                this._DISTANCE_Z_3 = -1,
                this._DISTANCE_Z_4 = -3,
                this._DISTANCE_Z_5 = -7
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var p = i(4)
            , f = r(p)
            , m = i(354)
            , v = r(m)
            , g = i(385)
            , _ = n(g)
            , y = i(68)
            , x = n(y)
            , b = i(136)
            , w = n(b)
            , S = i(388)
            , E = i(134)
            , T = i(389)
            , M = n(T)
            , A = i(53)
            , P = n(A)
            , R = i(390)
            , L = n(R)
            , O = i(392)
            , I = n(O)
            , C = document.querySelector(".content")
            , D = void 0
            , N = void 0
            , U = void 0
            , B = void 0
            , F = void 0
            , z = void 0
            , G = void 0
            , j = void 0
            , k = null
            , H = new f.Frustum
            , V = new f.Matrix4
            , W = !1
            , X = !1
            , Y = Math.PI / 2
            , q = new f.Vector3(1, 0, 0)
            , Z = new f.Vector3(0, 1, 0)
            , J = .013
            , K = .941
            , Q = .001
            , $ = .85
            , tt = null
            , et = null
            , it = null
            , nt = null
            , rt = null
            , ot = null
            , at = null
            , st = null
            , ht = null
            , lt = null
            , ct = null
            , ut = 0
            , dt = 0
            , pt = null
            , ft = null
            , mt = null
            , vt = null
            , gt = null
            , _t = null
            , yt = null
            , xt = null
            , bt = null
            , wt = []
            , St = []
            , Et = []
            , Tt = []
            , Mt = []
            , At = []
            , Pt = null
            , Rt = []
            , Lt = !0
            , Ot = null
            , It = !1
            , Ct = [.03719605220129784, .11502758005673477, .18807319055224855, .24929568946701286, .32363354826927726, .42934100808231074, .6746622767138655, .7871314445000447]
            , Dt = -1
            , Nt = new x.default(x.default.PROGRESS_CHANGE)
            , Ut = !1
            , Bt = new S.Lethargy(20, 5, .05)
            , Ft = !1
            , zt = 0
            , Gt = !1
            , jt = !1
            , kt = !1
            , Ht = !1
            , Vt = !1
            , Wt = !1
            , Xt = !1
            , Yt = 0
            , qt = 0
            , Zt = !1
            , Jt = !0
            , Kt = -Y
            , Qt = 0
            , $t = Y / 40
            , te = .0014
            , ee = .034
            , ie = .983
            , ne = !0
            , re = 0
            , oe = !1
            , ae = !1
            , se = Kt
            , he = 0
            , le = 0
            , ce = new f.Vector3
            , ue = !1;
        d.prototype = Object.create(w.default.prototype),
            d.prototype.constructor = d,
            d.prototype.pause = function () {
                W = !0
            }
            ,
            d.prototype.play = function () {
                W && (W = !1,
                    X && this._tick())
            }
            ,
            d.prototype.run = function () {
                // init asset
                this._initRenderer(),
                    this._loader = new _.default,
                    this._loader.addEventListener(x.default.LOAD_PROGRESS_CHANGE, this._loadProgressChange),
                    this._loader.addEventListener(x.default.LOAD, this._init),
                    this._loader.addImageAsset(this._ASSET_IMAGE_ASTEROID_PIECES, i(395)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_BLACK_HOLE, i(396)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_GROUP_1, i(397)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_GROUP_2, i(398)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_GROUP_3, i(399)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_GROUP_5, i(400)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_CLOUDS, i(401)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_GLOWS, i(402)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_GLOWS_MERCURY, i(403)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_PAPER_PLANE, i(404)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_PLANET_EARTH, i(405)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_PLANET_JUPITER, i(406)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_PLANET_ICE, i(407)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_PLANET_MARS, i(408)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_PLANET_MERCURY, i(409)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_PLANET_NEPTUNE, i(410)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_PLANET_SAND, i(411)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_PLANET_SATURN, i(412)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_SATELLITE_1, i(413)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_SATELLITE_2, i(414)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_SPACESHIP_FLAME, i(415)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_STARS, i(416)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_SUN, i(417)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_UNIVERSE_BACK, i(418)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_UNIVERSE_FRONT, i(419)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_UNIVERSE_BOTTOM, i(420)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_UNIVERSE_TOP, i(421)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_UNIVERSE_RIGHT, i(422)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_UNIVERSE_LEFT, i(423)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_SPACESHIP_1, i(424)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_SPACESHIP_1_FRAMES, i(425)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_SPACESHIP_2, i(426)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_SPACESHIP_2_BLUE_LIGHTS_FRAMES_1, i(427)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_SPACESHIP_2_BLUE_LIGHTS_FRAMES_2, i(428)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_SPACESHIP_2_BLUE_LIGHTS_FRAMES_3, i(429)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_SPACESHIP_2_RED_LIGHTS_FRAMES, i(430)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_SPACESHIP_3, i(431)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_SPACESHIP_3_BLUE_LIGHTS_FRAMES_1, i(432)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_SPACESHIP_3_BLUE_LIGHTS_FRAMES_2, i(433)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_SPACESHIP_3_BLUE_LIGHTS_FRAMES_3, i(434)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_ENTERPRISE_FRAMES, i(435)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_STARCLOUDS, i(436)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_LASER_MISSILE, i(437)),
                    this._loader.addImageAsset(this._ASSET_IMAGE_LASER_MISSILE_SPARKLES, i(438)),
                    this._loader.addAudioAsset(this._ASSET_AUDIO_BACKGROUND, i(439)),
                    this._loader.addAudioAsset(this._ASSET_AUDIO_ASTRONAUTS, i(440)),
                    this._loader.addAudioAsset(this._ASSET_AUDIO_PLANET_ICE, i(441)),
                    this._loader.addAudioAsset(this._ASSET_AUDIO_PLANET_MERCURY, i(442)),
                    this._loader.addAudioAsset(this._ASSET_AUDIO_LINK_HOVER, i(443)),
                    this._loader.addAudioAsset(this._ASSET_AUDIO_LINK_SHOW, i(444)),
                    this._loader.addAudioAsset(this._ASSET_AUDIO_LINK_CLICK, i(445)),
                    this._loader.addAudioAsset(this._ASSET_AUDIO_BLACK_HOLE, i(446)),
                    this._loader.addAudioAsset(this._ASSET_AUDIO_SPACESHIP_2, i(447)),
                    this._loader.addAudioAsset(this._ASSET_AUDIO_SPACESHIP_3, i(448)),
                    this._loader.addAudioAsset(this._ASSET_AUDIO_ASTEROID_EXPLOSION, i(449)),
                    this._loader.addAudioAsset(this._ASSET_AUDIO_LASER_RED, i(450)),
                    this._loader.addAudioAsset(this._ASSET_AUDIO_LASER_BLUE, i(451)),
                    this._loader.addObjectAsset(this._ASSET_OBJECT_BORDER_1, i(452)),
                    this._loader.addObjectAsset(this._ASSET_OBJECT_BORDER_2, i(453)),
                    this._loader.addObjectAsset(this._ASSET_OBJECT_SPACESHIP, i(454), i(455)),
                    this._loader.addObjectAsset(this._ASSET_OBJECT_SPUTNIK, i(456)),
                    this._loader.addObjectAsset(this._ASSET_OBJECT_LASER_MISSILE_BLUE, i(457)),
                    this._loader.addObjectAsset(this._ASSET_OBJECT_LASER_MISSILE_RED, i(458)),
                    this._loader.load()
            }
            ,
            d.prototype._init = function () {
                this._loader.removeEventListener(x.default.LOAD_PROGRESS_CHANGE, this._loadProgressChange),
                    this._loader.removeEventListener(x.default.LOAD, this._init),
                    this._globalMatrixX = new f.Matrix4,
                    this._globalMatrixY = new f.Matrix4,
                    this._initScenes(),
                    this._initCameras(),
                    this._initLights(),
                    this._initMaterials(),
                    this._initUniverse(),
                    this._initStars(),
                    this._initStarclouds(),
                    this._initPlanets(),
                    this._initSatellites(),
                    this._initGlows(),
                    this._initOrbits(),
                    this._initSun(),
                    this._initGalaxy(),
                    this._initSpaceshipPath(),
                    this._initCollisions(),
                    this._initSpaceship(),
                    this._initLaser(),
                    this._initSpaceships(),
                    this._initBlackHole(),
                    this._initAsteroids(),
                    this._initSputnik(),
                    this._initBorders(),
                    this._initHTMLElementPositions(),
                    this._initTrustHint(),
                    this._initAstronauts(),
                    this._initCertificateWaves(),
                    this._initEventListeners(),
                    this._initSounds(),
                    this._initSoundButton(),
                    this._resize(),
                    this._renderAllObjects(),
                    et.x = it.x,
                    et.y = it.y,
                    lt.render(at, tt),
                    a(),
                    this._tick();
                for (var t = 0; t < Ot.length; t++) {
                    var e = Ot[t];
                    ce.setFromMatrixPosition(e.object3D.matrixWorld),
                        ce.project(tt),
                        e.domElementStyle.transform = "translate3d(" + (ce.x * ut + ut | 0) + "px," + (-ce.y * dt + dt | 0) + "px,0)"
                }
                X = !0,
                    this.dispatchEvent(new x.default(x.default.LOAD))
            }
            ,
            d.prototype._initCameras = function () {
                ot = new f.PerspectiveCamera(90, 6840 / 5320, .001, 1e5),
                    rt = new f.PerspectiveCamera(30, 6840 / 5320, .1, 1e3),
                    rt.translateZ(-150),
                    tt = new f.PerspectiveCamera(30, 6840 / 5320, .1, 1e3),
                    et = tt.position,
                    et.z = 20,
                    this._tanFov = Math.tan(Math.PI / 180 * tt.fov / 2)
            }
            ,
            d.prototype._initRenderer = function () {
                lt = new f.WebGLRenderer({
                    antialias: !0
                }),
                    lt.autoClear = !1,
                    lt.setSize(window.innerWidth, window.innerHeight),
                    lt.setClearColor(2037036, 1),
                    lt.setPixelRatio(1),
                    lt.domElement.classList.add("canvas"),
                    document.querySelector(".render-page").appendChild(lt.domElement),
                    ct = lt.context.canvas
            }
            ,
            d.prototype._initScenes = function () {
                ht = new f.Scene,
                    st = new f.Scene,
                    at = new f.Scene
            }
            ,
            d.prototype._initCollisions = function () {
                //load content
                for (var t = [{
                    domElement: document.querySelector(".container-feature-lessons"),
                    position: pt.getPositionAt(.295),
                    radius: 1.3
                }, {
                    domElement: document.querySelector(".container-feature-students"),
                    position: pt.getPositionAt(.399),
                    radius: 1.3
                }, {
                    domElement: document.querySelector(".container-feature-salary"),
                    position: pt.getPositionAt(.528),
                    radius: 1.3
                }, {
                    domElement: document.querySelector(".container-feature-job"),
                    position: pt.getPositionAt(.64),
                    radius: 1.3
                }, {
                    domElement: document.querySelector(".container-feature-workers"),
                    position: pt.getPositionAt(.765),
                    radius: 1.3
                }, {
                    domElement: document.querySelector(".container-web"),
                    position: pt.getPositionAt(.081),
                    radius: 1.2
                }, {
                    domElement: document.querySelector(".container-mobile"),
                    position: pt.getPositionAt(.155),
                    radius: 1.2
                }, {
                    domElement: document.querySelector(".container-business"),
                    position: pt.getPositionAt(.223),
                    radius: 1.2
                }, {
                    domElement: document.querySelector(".container-net"),
                    position: pt.getPositionAt(.294),
                    radius: 1.2
                }, {
                    domElement: document.querySelector(".container-qa"),
                    position: pt.getPositionAt(.359),
                    radius: 1.2
                }, {
                    domElement: document.querySelector(".container-lectures"),
                    position: pt.getPositionAt(.44),
                    radius: 1.2
                }, {
                    domElement: document.querySelector(".container-astronaut-1"),
                    position: pt.getPositionAt(.574),
                    radius: 1.2
                }, {
                    domElement: document.querySelector(".container-astronaut-2"),
                    position: pt.getPositionAt(.61),
                    radius: 1.2
                }, {
                    domElement: document.querySelector(".container-astronaut-3"),
                    position: pt.getPositionAt(.67),
                    radius: 1.2
                },
                {
                    domElement: document.querySelector(".container-history"),
                    position: pt.getPositionAt(.69),
                    radius: 1.2
                },
                {
                    domElement: document.querySelector(".container-faq"),
                    position: pt.getPositionAt(.81),
                    radius: 1.2
                }, {
                    domElement: document.querySelector(".container-request"),
                    position: {
                        x: -1.268696,
                        y: -4.61241
                    },
                    radius: 2
                }, {
                    domElement: document.querySelector(".container-shooting-hint-first"),
                    position: pt.getPositionAt(.24),
                    radius: 1.2
                }, {
                    domElement: document.querySelector(".container-shooting-hint-second"),
                    position: pt.getPositionAt(.45),
                    radius: 1.2
                }, {
                    domElement: document.querySelector(".container-shooting-hint-third"),
                    position: pt.getPositionAt(.84),
                    radius: 1.2
                }], e = 0; e < t.length; e++) {
                    var i = t[e]
                        , n = i.domElement
                        , r = n.querySelector(".text-3d");
                    r && (r.style.left = Math.round(-r.offsetWidth / 2) + "px",
                        r.style.top = Math.round(-r.offsetHeight / 2) + "px");
                    var o = {
                        hasShowSound: !!r,
                        domElementClassList: n.classList,
                        boundingSphere: new f.Sphere(new f.Vector3(i.position.x, i.position.y, 0), i.radius),
                        hidden: !1,
                        domElement: n
                    };
                    r && r.classList.contains("text-3d-shooting-hint") && Rt.push(o),
                        At.push(o)
                }
            }
            ,
            d.prototype._initAsteroids = function () {
                var t = [[0, 1, .25, 1, 0, .75, .25, .75], [.25, 1, .5, 1, .25, .75, .5, .75], [0, .75, .25, .75, 0, .5, .25, .5], [.25, .75, .5, .75, .25, .5, .5, .5]];
                Et.push(new v.Sprite({
                    material: this._material1,
                    uv: t[1],
                    width: .4,
                    height: .4,
                    rotationSpeed: this._ROTATION_SPEEDS[0],
                    swingAmplitude: this._TRANSLATION_AMPLITUDES[0],
                    swingSpeed: this._TRANSLATION_SPEEDS[0],
                    position: {
                        x: -5.74025,
                        y: 3.88155,
                        z: this._DISTANCE_Z_1
                    }
                })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[2],
                        width: .175,
                        height: .175,
                        rotationSpeed: -this._ROTATION_SPEEDS[3],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[3],
                        swingSpeed: this._TRANSLATION_SPEEDS[3],
                        position: {
                            x: -5.30454,
                            y: 3.90081,
                            z: this._DISTANCE_Z_4
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[2],
                        width: .1,
                        height: .1,
                        rotationSpeed: this._ROTATION_SPEEDS[4],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[4],
                        swingSpeed: this._TRANSLATION_SPEEDS[4],
                        position: {
                            x: -5.35268,
                            y: 4.31245,
                            z: this._DISTANCE_Z_5
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[1],
                        width: .25,
                        height: .25,
                        rotationSpeed: -this._ROTATION_SPEEDS[2],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[2],
                        swingSpeed: this._TRANSLATION_SPEEDS[2],
                        position: {
                            x: -3.44775,
                            y: 4.88051,
                            z: this._DISTANCE_Z_3
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[0],
                        width: .225,
                        height: .225,
                        rotationSpeed: this._ROTATION_SPEEDS[3],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[3],
                        swingSpeed: this._TRANSLATION_SPEEDS[3],
                        position: {
                            x: -3.01822,
                            y: 4.2662,
                            z: this._DISTANCE_Z_4
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[2],
                        width: .1,
                        height: .1,
                        rotationSpeed: -this._ROTATION_SPEEDS[4],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[4],
                        swingSpeed: this._TRANSLATION_SPEEDS[4],
                        position: {
                            x: -2.71735,
                            y: 5.09528,
                            z: this._DISTANCE_Z_5
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[1],
                        width: .35,
                        height: .35,
                        rotationSpeed: this._ROTATION_SPEEDS[1],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[1],
                        swingSpeed: this._TRANSLATION_SPEEDS[1],
                        position: {
                            x: -3.02678,
                            y: 3.1171,
                            z: this._DISTANCE_Z_2
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[2],
                        width: .45,
                        height: .45,
                        rotationSpeed: -this._ROTATION_SPEEDS[0],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[0],
                        swingSpeed: this._TRANSLATION_SPEEDS[0],
                        renderOrder: 100,
                        position: {
                            x: -5.68654,
                            y: 1.28207,
                            z: this._DISTANCE_Z_1
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[0],
                        width: .35,
                        height: .35,
                        rotationSpeed: this._ROTATION_SPEEDS[0],
                        swingAmplitude: .02,
                        swingSpeed: .01,
                        position: {
                            x: -.554428,
                            y: 1.48882,
                            z: this._DISTANCE_Z_1
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[2],
                        width: .35,
                        height: .35,
                        rotationSpeed: -this._ROTATION_SPEEDS[0],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[0],
                        swingSpeed: this._TRANSLATION_SPEEDS[0],
                        position: {
                            x: 1.93976,
                            y: -1.43756,
                            z: this._DISTANCE_Z_1
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[1],
                        width: .35,
                        height: .35,
                        rotationSpeed: -this._ROTATION_SPEEDS[1],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[1],
                        swingSpeed: this._TRANSLATION_SPEEDS[1],
                        position: {
                            x: -2.5898,
                            y: -.737859,
                            z: this._DISTANCE_Z_2
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[2],
                        width: .225,
                        height: .225,
                        rotationSpeed: this._ROTATION_SPEEDS[1],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[1],
                        swingSpeed: this._TRANSLATION_SPEEDS[1],
                        position: {
                            x: -1.3995,
                            y: -2.62525,
                            z: 0
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[0],
                        width: .225,
                        height: .225,
                        rotationSpeed: -this._ROTATION_SPEEDS[2],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[2],
                        swingSpeed: this._TRANSLATION_SPEEDS[2],
                        position: {
                            x: -2.74317,
                            y: -3.0493,
                            z: this._DISTANCE_Z_3
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[1],
                        width: .25,
                        height: .25,
                        rotationSpeed: this._ROTATION_SPEEDS[1],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[1],
                        swingSpeed: this._TRANSLATION_SPEEDS[1],
                        position: {
                            x: -1.75953,
                            y: -3.32287,
                            z: this._DISTANCE_Z_2
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[2],
                        width: .2,
                        height: .2,
                        rotationSpeed: -this._ROTATION_SPEEDS[2],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[2],
                        swingSpeed: this._TRANSLATION_SPEEDS[2],
                        position: {
                            x: -3.188,
                            y: -4.31833,
                            z: this._DISTANCE_Z_3
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[0],
                        width: .225,
                        height: .225,
                        rotationSpeed: this._ROTATION_SPEEDS[2],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[2],
                        swingSpeed: this._TRANSLATION_SPEEDS[2],
                        position: {
                            x: .789436,
                            y: -3.4575,
                            z: this._DISTANCE_Z_3
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[1],
                        width: .15,
                        height: .15,
                        rotationSpeed: -this._ROTATION_SPEEDS[2],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[2],
                        swingSpeed: this._TRANSLATION_SPEEDS[2],
                        position: {
                            x: -1.3601,
                            y: .970037,
                            z: this._DISTANCE_Z_3
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[2],
                        width: .175,
                        height: .175,
                        rotationSpeed: this._ROTATION_SPEEDS[1],
                        swingAmplitude: .02,
                        swingSpeed: .02,
                        position: {
                            x: -.98,
                            y: .61,
                            z: this._DISTANCE_Z_2
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[1],
                        width: .15,
                        height: .15,
                        rotationSpeed: -this._ROTATION_SPEEDS[2],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[2],
                        swingSpeed: this._TRANSLATION_SPEEDS[2],
                        position: {
                            x: .183674,
                            y: 1.84822,
                            z: this._DISTANCE_Z_3
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[2],
                        width: .175,
                        height: .175,
                        rotationSpeed: this._ROTATION_SPEEDS[1],
                        swingAmplitude: .02,
                        swingSpeed: .02,
                        position: {
                            x: .519175,
                            y: 1.81571,
                            z: this._DISTANCE_Z_2
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[1],
                        width: .25,
                        height: .25,
                        rotationSpeed: -this._ROTATION_SPEEDS[1],
                        swingAmplitude: .04,
                        swingSpeed: .012,
                        position: {
                            x: .274225,
                            y: 1.27705,
                            z: this._DISTANCE_Z_2
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[1],
                        width: .15,
                        height: .15,
                        rotationSpeed: this._ROTATION_SPEEDS[2],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[2],
                        swingSpeed: this._TRANSLATION_SPEEDS[2],
                        position: {
                            x: 2.21455,
                            y: -2.86844,
                            z: this._DISTANCE_Z_3
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[1],
                        width: .25,
                        height: .25,
                        rotationSpeed: -this._ROTATION_SPEEDS[1],
                        swingAmplitude: .03,
                        swingSpeed: this._TRANSLATION_SPEEDS[1],
                        position: {
                            x: 2.6673,
                            y: -2.56475,
                            z: this._DISTANCE_Z_2
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[2],
                        width: .225,
                        height: .225,
                        rotationSpeed: this._ROTATION_SPEEDS[1],
                        swingAmplitude: .02,
                        swingSpeed: .02,
                        position: {
                            x: 3.54,
                            y: 1.54639,
                            z: .2
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[1],
                        width: .2,
                        height: .2,
                        rotationSpeed: -this._ROTATION_SPEEDS[2],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[2],
                        swingSpeed: this._TRANSLATION_SPEEDS[2],
                        position: {
                            x: 2.43326,
                            y: -3.11641,
                            z: this._DISTANCE_Z_3
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[2],
                        width: .175,
                        height: .175,
                        rotationSpeed: this._ROTATION_SPEEDS[2],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[2],
                        swingSpeed: this._TRANSLATION_SPEEDS[2],
                        position: {
                            x: 4.15305,
                            y: 1.73101,
                            z: this._DISTANCE_Z_3
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[2],
                        width: .225,
                        height: .225,
                        rotationSpeed: -this._ROTATION_SPEEDS[2],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[2],
                        swingSpeed: this._TRANSLATION_SPEEDS[2],
                        position: {
                            x: 4.71489,
                            y: -.686009,
                            z: this._DISTANCE_Z_3
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[1],
                        width: .175,
                        height: .175,
                        rotationSpeed: this._ROTATION_SPEEDS[1],
                        swingAmplitude: .02,
                        swingSpeed: .02,
                        position: {
                            x: 5.16648,
                            y: -1.02267,
                            z: this._DISTANCE_Z_2
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[1],
                        width: .35,
                        height: .35,
                        rotationSpeed: -this._ROTATION_SPEEDS[1],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[1],
                        swingSpeed: this._TRANSLATION_SPEEDS[1],
                        renderOrder: 30,
                        position: {
                            x: 1.11402,
                            y: -3.74865,
                            z: this._DISTANCE_Z_2
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[1],
                        width: .44,
                        height: .44,
                        swingAmplitude: .013,
                        swingSpeed: .02,
                        rotation: 2 * Math.PI,
                        position: {
                            x: -2.58076,
                            y: -2.0828,
                            z: this._DISTANCE_Z_2
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[2],
                        width: .18,
                        height: .18,
                        rotationSpeed: this._ROTATION_SPEEDS[4],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[4],
                        swingSpeed: this._TRANSLATION_SPEEDS[4],
                        position: {
                            x: 5.31428,
                            y: 1.65646,
                            z: -1
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[0],
                        width: .237,
                        height: .237,
                        rotationSpeed: -this._ROTATION_SPEEDS[4],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[4],
                        swingSpeed: this._TRANSLATION_SPEEDS[4],
                        position: {
                            x: 5.21204,
                            y: 1.20856,
                            z: 0
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[2],
                        width: .269,
                        height: .269,
                        rotationSpeed: this._ROTATION_SPEEDS[3],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[3],
                        swingSpeed: this._TRANSLATION_SPEEDS[3],
                        position: {
                            x: 5.70376,
                            y: .833684,
                            z: .5
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[0],
                        width: .379,
                        height: .379,
                        rotationSpeed: -this._ROTATION_SPEEDS[3],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[3],
                        swingSpeed: this._TRANSLATION_SPEEDS[3],
                        position: {
                            x: 5.93988,
                            y: 1.55909,
                            z: 1
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[2],
                        width: .163,
                        height: .163,
                        rotationSpeed: this._ROTATION_SPEEDS[2],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[2],
                        swingSpeed: this._TRANSLATION_SPEEDS[2],
                        position: {
                            x: 5.84576,
                            y: .411337,
                            z: -2
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[1],
                        width: .26,
                        height: .26,
                        rotationSpeed: this._ROTATION_SPEEDS[3],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[3],
                        swingSpeed: this._TRANSLATION_SPEEDS[3],
                        position: {
                            x: 4.4337,
                            y: -1.40295,
                            z: this._DISTANCE_Z_4
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[0],
                        width: .26,
                        height: .26,
                        rotationSpeed: this._ROTATION_SPEEDS[3],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[3],
                        swingSpeed: this._TRANSLATION_SPEEDS[3],
                        position: {
                            x: 3.29797,
                            y: -3.16613,
                            z: this._DISTANCE_Z_4
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[0],
                        width: .5,
                        height: .5,
                        rotationSpeed: this._ROTATION_SPEEDS[0],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[0],
                        swingSpeed: this._TRANSLATION_SPEEDS[0],
                        position: {
                            x: 4.45424,
                            y: -3.31705,
                            z: this._DISTANCE_Z_1
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[0],
                        width: .18,
                        height: .18,
                        rotationSpeed: -this._ROTATION_SPEEDS[3],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[3],
                        swingSpeed: this._TRANSLATION_SPEEDS[3],
                        position: {
                            x: 1.37718,
                            y: -3.26254,
                            z: this._DISTANCE_Z_4
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[1],
                        width: .22,
                        height: .22,
                        rotationSpeed: -this._ROTATION_SPEEDS[4],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[4],
                        swingSpeed: this._TRANSLATION_SPEEDS[4],
                        position: {
                            x: -1.66825,
                            y: -.210679,
                            z: this._DISTANCE_Z_5
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material1,
                        uv: t[1],
                        width: .26,
                        height: .26,
                        rotationSpeed: -this._ROTATION_SPEEDS[4],
                        swingAmplitude: this._TRANSLATION_AMPLITUDES[4],
                        swingSpeed: this._TRANSLATION_SPEEDS[4],
                        position: {
                            x: -1.30555,
                            y: -.734044,
                            z: this._DISTANCE_Z_5
                        }
                    })),
                    Mt.push(new v.Asteroid({
                        map: this._loader.getAsset(this._ASSET_IMAGE_ASTEROID_PIECES),
                        position: {
                            x: -2.182744240359662,
                            y: .4443365166949866,
                            z: 0
                        }
                    })),
                    Mt.push(new v.Asteroid({
                        map: this._loader.getAsset(this._ASSET_IMAGE_ASTEROID_PIECES),
                        position: {
                            x: 1.9700823131582774,
                            y: 1.4142807798391188,
                            z: 0
                        }
                    })),
                    Mt.push(new v.Asteroid({
                        map: this._loader.getAsset(this._ASSET_IMAGE_ASTEROID_PIECES),
                        position: {
                            x: .6410409945261689,
                            y: -2.7100151453228793,
                            z: 0
                        }
                    }))
            }
            ,
            d.prototype._initAstronauts = function () {
                Et.push(new v.Sprite({
                    material: this._material2,
                    uv: [0, 1, .5, 1, 0, .5, .5, .5],
                    width: .522,
                    height: .522,
                    swingAmplitude: .01,
                    swingSpeed: .02,
                    position: {
                        x: 3.36,
                        y: .14,
                        z: 1
                    }
                })),
                    Et.push(new v.Sprite({
                        material: this._material2,
                        uv: [.5, 1, 1, 1, .5, .5, 1, .5],
                        width: .511,
                        height: .511,
                        swingAmplitude: .01,
                        swingSpeed: .02,
                        position: {
                            x: 4.8593,
                            y: -.077428,
                            z: 0
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material2,
                        uv: [0, .5, .5, .5, 0, 0, .5, 0],
                        width: .522,
                        height: .522,
                        swingAmplitude: .01,
                        swingSpeed: .02,
                        position: {
                            x: 3.18139,
                            y: -1,
                            z: -1
                        }
                    }))
            }
            ,
            d.prototype._initBlackHole = function () {
                this._blackHole = new v.BlackHole({
                    colorMapBack: this._loader.getAsset(this._ASSET_IMAGE_GROUP_3),
                    colorMapFront: this._loader.getAsset(this._ASSET_IMAGE_GROUP_2),
                    uvBack: [.5, .5, 1, .5, .5, 0, 1, 0],
                    uvFront: [.5, .5, .75, .5, .5, .25, .75, .25],
                    position: {
                        x: 1.9273,
                        y: -3.53294,
                        z: -8
                    }
                }),
                    Et.push(this._blackHole),
                    Tt.push(new v.Sprite({
                        material: this._materialBlackHole,
                        width: .4,
                        height: .4,
                        position: {
                            x: -6.48176,
                            y: 5.2334,
                            z: -7
                        }
                    }))
            }
            ,
            d.prototype._initBorders = function () {
                var t = this._loader.getAsset(this._ASSET_OBJECT_BORDER_1);
                t.children[0].material = this._materialBorder;
                var e = t.clone()
                    , i = this._loader.getAsset(this._ASSET_OBJECT_BORDER_2);
                i.children[0].material = this._materialBorder;
                var n = i.clone()
                    , r = t.clone();

                // ----------------------------------------------- borderaa
                // Tt.push(new v.Border({

                //     object3D: t,
                //     position: {
                //         x: -1.135,
                //         y: .855,
                //         z: 0
                //     }
                // })),
                //     Tt.push(new v.Border({
                //         object3D: e,
                //         position: {
                //             x: .375,
                //             y: 1.6,
                //             z: 0
                //         }
                //     })),
                //     Tt.push(new v.Border({
                //         object3D: i,
                //         position: {
                //             x: 3.88,
                //             y: 1.58,
                //             z: 0
                //         }
                //     })),
                //     Tt.push(new v.Border({
                //         object3D: n,
                //         position: {
                //             x: 4.925,
                //             y: -.845,
                //             z: 0
                //         }
                //     })),
                //     Tt.push(new v.Border({
                //         object3D: r,
                //         position: {
                //             x: 2.475,
                //             y: -2.835,
                //             z: 0
                //         }
                //     }))
            }
            ,
            d.prototype._initCertificateWaves = function () {
                Et.push(new v.CertificateWaves({
                    position: {
                        x: -2.39107,
                        y: 1.83182,
                        z: 0
                    }
                }))
            }
            ,
            d.prototype._initGalaxy = function () {
                this._galaxy = new v.Galaxy({
                    colorMap: this._loader.getAsset(this._ASSET_IMAGE_GROUP_3),
                    uvTop: [0, 1, .5, 1, 0, .5, .5, .5],
                    uvBottom: [.5, 1, 1, 1, .5, .5, 1, .5],
                    uvGlow: [0, .5, .5, .5, 0, 0, .5, 0],
                    wireframeColor: 6601466,
                    position: {
                        x: -4,
                        y: -.14,
                        z: 0
                    },
                    axisRotation: {
                        x: Math.PI / 8,
                        y: 0,
                        z: Math.PI / 8
                    }
                }),
                    Et.push(this._galaxy)
            }
            ,
            d.prototype._initGlows = function () {
                St.push(new v.Sprite({
                    width: 2.54,
                    height: 2.54,
                    material: this._materialGlows,
                    uv: [0, 1, .5, 1, 0, .5, .5, .5],
                    position: {
                        x: this._planetEarth.object3D.position.x,
                        y: this._planetEarth.object3D.position.y,
                        z: this._planetEarth.object3D.position.z
                    }
                })),
                    St.push(new v.Sprite({
                        width: 2.64,
                        height: 2.64,
                        material: this._materialGlows,
                        renderOrder: 1,
                        uv: [0, 1, .5, 1, 0, .5, .5, .5],
                        position: {
                            x: this._planetIce.object3D.position.x,
                            y: this._planetIce.object3D.position.y,
                            z: this._planetIce.object3D.position.z
                        }
                    })),
                    St.push(new v.Sprite({
                        width: .33,
                        height: .33,
                        material: this._material2,
                        uv: [.5, .25, .625, .25, .5, .125, .625, .125],
                        renderOrder: 3,
                        position: {
                            x: this._planetIceMoon1.object3D.position.x,
                            y: this._planetIceMoon1.object3D.position.y,
                            z: this._planetIceMoon1.object3D.position.z
                        }
                    })),
                    St.push(new v.Sprite({
                        width: .44,
                        height: .44,
                        material: this._material2,
                        uv: [.5, .25, .625, .25, .5, .125, .625, .125],
                        renderOrder: 3,
                        position: {
                            x: this._planetIceMoon2.object3D.position.x,
                            y: this._planetIceMoon2.object3D.position.y,
                            z: this._planetIceMoon2.object3D.position.z
                        }
                    })),
                    St.push(new v.Sprite({
                        width: 4.5,
                        height: 4.5,
                        material: this._materialGlows,
                        renderOrder: 1,
                        uv: [0, .5, .5, .5, 0, 0, .5, 0],
                        position: {
                            x: this._planetSand.object3D.position.x,
                            y: this._planetSand.object3D.position.y,
                            z: this._planetSand.object3D.position.z
                        }
                    })),
                    St.push(new v.Sprite({
                        width: .5,
                        height: .5,
                        material: this._materialGlows,
                        renderOrder: 3,
                        uv: [0, .5, .5, .5, 0, 0, .5, 0],
                        position: {
                            x: this._planetSandMoon.object3D.position.x,
                            y: this._planetSandMoon.object3D.position.y,
                            z: this._planetSandMoon.object3D.position.z
                        }
                    })),
                    wt.push(new v.PlanetMercuryGlow({
                        colorMap: this._loader.getAsset(this._ASSET_IMAGE_GLOWS_MERCURY),
                        position: {
                            x: this._planetMercury.object3D.position.x,
                            y: this._planetMercury.object3D.position.y,
                            z: this._planetMercury.object3D.position.z
                        }
                    })),
                    wt.push(new v.PlanetMarsGlow({
                        glowColorMap: this._loader.getAsset(this._ASSET_IMAGE_GLOWS),
                        renderOrder: 1,
                        uv: [.5, 1, 1, 1, .5, .5, 1, .5],
                        position: {
                            x: this._planetMars.object3D.position.x,
                            y: this._planetMars.object3D.position.y,
                            z: this._planetMars.object3D.position.z
                        }
                    }))
            }
            ,
            d.prototype._initHTMLElementPositions = function () {
                // load html
                M.default.createRectangularBubbles();
                var t = new Image;
                t.onload = function () {
                    M.default.createRoundedBubbles(t)
                }
                    ,
                    t.src = i(459);
                var e = document.querySelector("html").classList.contains("preserve3d");
                Ot = [new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-business"),
                    boundingSphereRadius: .4,
                    rotational: e,
                    position: {
                        x: -2.72,
                        y: .18,
                        z: 0
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-faq"),
                    boundingSphereRadius: .5,
                    rotational: e,
                    position: {
                        x: 1.39,
                        y: -2.08,
                        z: 0
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-intro"),
                    boundingSphereRadius: 1,
                    position: {
                        x: -4.30359,
                        y: 4.62,
                        z: 0
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-mobile"),
                    boundingSphereRadius: .45,
                    rotational: e,
                    position: {
                        x: -4.03,
                        y: 1.21,
                        z: 0
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-qa"),
                    boundingSphereRadius: .41,
                    rotational: e,
                    position: {
                        x: .37,
                        y: .15,
                        z: 0
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-request"),
                    boundingSphereRadius: .48,
                    rotational: e,
                    position: {
                        x: -.161068,
                        y: -3.94,
                        z: 0
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-web"),
                    boundingSphereRadius: .4,
                    rotational: e,
                    position: {
                        x: -4.84,
                        y: 3,
                        z: 0
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-net"),
                    boundingSphereRadius: .4,
                    rotational: e,
                    position: {
                        x: -1.31,
                        y: -.28,
                        z: 0
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-feature-job"),
                    boundingSphereRadius: .3,
                    position: {
                        x: 4.925,
                        y: -.845,
                        z: 0
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-feature-salary"),
                    boundingSphereRadius: .3,
                    position: {
                        x: 3.88,
                        y: 1.58,
                        z: 0
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-feature-lessons"),
                    boundingSphereRadius: .3,
                    position: {
                        x: -1.135,
                        y: .855,
                        z: 0
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-feature-workers"),
                    boundingSphereRadius: .3,
                    position: {
                        x: 2.475,
                        y: -2.835,
                        z: 0
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-feature-students"),
                    boundingSphereRadius: .3,
                    position: {
                        x: .375,
                        y: 1.6,
                        z: 0
                    }
                }),
                new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-history"),
                    boundingSphereRadius: .3,
                    rotational: e,
                    position: {
                        x: 4.09946,
                        y: -1.82886,
                        z: 0
                    }
                }),
                new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-lectures"),
                    boundingSphereRadius: .31,
                    rotational: e,
                    position: {
                        x: 1.6,
                        y: .9,
                        z: 0
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-astronaut-1"),
                    boundingSphereRadius: .9,
                    rotational: e,
                    position: {
                        x: 3.36,
                        y: .14,
                        z: 1
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-astronaut-2"),
                    boundingSphereRadius: .9,
                    rotational: e,
                    position: {
                        x: 4.8593,
                        y: -.077428,
                        z: 0
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-astronaut-3"),
                    boundingSphereRadius: .9,
                    rotational: e,
                    position: {
                        x: 3.18139,
                        y: -1,
                        z: -1
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-certificate"),
                    boundingSphereRadius: .5,
                    position: {
                        x: -2.39107,
                        y: 1.83182,
                        z: 0
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-shooting-hint-first"),
                    boundingSphereRadius: .35,
                    rotational: e,
                    position: {
                        x: -2.2,
                        y: .83,
                        z: 0
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-shooting-hint-second"),
                    boundingSphereRadius: .35,
                    rotational: e,
                    position: {
                        x: 1.85,
                        y: 1.8,
                        z: 0
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-shooting-hint-third"),
                    boundingSphereRadius: .35,
                    rotational: e,
                    position: {
                        x: .8,
                        y: -3.1,
                        z: 0
                    }
                }), new v.HTMLElementPosition({
                    domElement: document.querySelector(".container-trust-hint"),
                    boundingSphereRadius: .7,
                    rotational: e,
                    position: {
                        x: -4.30345,
                        y: 4.28,
                        z: 0
                    }
                })];
                for (var n = 0; n < Ot.length; n++)
                    Tt.push(Ot[n])
            }
            ,
            d.prototype._initLaser = function () {

                _t = new L.default({
                    scene: at,
                    materialMissiles: this._materialLaserMissiles,
                    materialMissileSparkles: this._materialLaserMissileSparkles,
                    meshMissilesBlue: this._loader.getAsset(this._ASSET_OBJECT_LASER_MISSILE_BLUE),
                    meshMissilesRed: this._loader.getAsset(this._ASSET_OBJECT_LASER_MISSILE_RED),
                    spaceship: ft.object3D,
                    audioMissileBlueSrc: this._loader.getAsset(this._ASSET_AUDIO_LASER_BLUE),
                    audioMissileRedSrc: this._loader.getAsset(this._ASSET_AUDIO_LASER_RED),
                    frustum: H,
                    path: pt,
                    asteroids: Mt
                })
            }
            ,
            d.prototype._initLights = function () {
                var t = new f.PointLight(16777215, 1, .4);
                t.translateX(-3.01636),
                    t.translateY(5.16563),
                    at.add(t);
                var e = new f.PointLight(16777215, 2, .5);
                e.translateX(-5.5816),
                    e.translateY(4.84637),
                    at.add(e);
                var i = new f.DirectionalLight(16777215, 2);
                i.translateX(-1),
                    i.translateY(1),
                    i.translateZ(1),
                    at.add(i);
                var n = new f.AmbientLight(16777215, 1);
                at.add(n)
            }
            ,
            d.prototype._initMaterials = function () {
                this._material1 = new f.MeshBasicMaterial({
                    map: this._loader.getAsset(this._ASSET_IMAGE_GROUP_1),
                    transparent: !0,
                    depthTest: !1,
                    depthWrite: !1
                }),
                    this._material2 = new f.MeshBasicMaterial({
                        map: this._loader.getAsset(this._ASSET_IMAGE_GROUP_2),
                        transparent: !0,
                        depthTest: !1,
                        depthWrite: !1
                    }),
                    this._material3 = new f.MeshBasicMaterial({
                        map: this._loader.getAsset(this._ASSET_IMAGE_GROUP_3),
                        transparent: !0,
                        depthTest: !1,
                        depthWrite: !1
                    }),
                    this._material5 = new f.MeshBasicMaterial({
                        map: this._loader.getAsset(this._ASSET_IMAGE_GROUP_5),
                        transparent: !0,
                        depthTest: !1,
                        depthWrite: !1
                    }),
                    this._materialBorder = new f.MeshBasicMaterial({
                        color: 15548761,
                        transparent: !0,
                        depthTest: !1,
                        depthWrite: !1
                    }),
                    this._materialGlows = new f.MeshBasicMaterial({
                        map: this._loader.getAsset(this._ASSET_IMAGE_GLOWS),
                        transparent: !0,
                        depthTest: !1,
                        depthWrite: !1
                    }),
                    this._materialPlanetSand = new f.ShaderMaterial(new E.PlanetShader({
                        colorMap: this._loader.getAsset(this._ASSET_IMAGE_PLANET_SAND),
                        glowColor: 16777215,
                        transparent: !0,
                        depthTest: !1,
                        depthWrite: !1
                    })),
                    this._materialStarclouds = new f.MeshBasicMaterial({
                        map: this._loader.getAsset(this._ASSET_IMAGE_STARCLOUDS),
                        transparent: !0,
                        depthTest: !1,
                        depthWrite: !1
                    }),
                    this._materialLaserMissiles = new f.MeshBasicMaterial({
                        map: this._loader.getAsset(this._ASSET_IMAGE_LASER_MISSILE),
                        transparent: !0,
                        depthTest: !1,
                        depthWrite: !1
                    }),
                    this._materialLaserMissileSparkles = new f.MeshBasicMaterial({
                        map: this._loader.getAsset(this._ASSET_IMAGE_LASER_MISSILE_SPARKLES),
                        transparent: !0,
                        depthTest: !1,
                        depthWrite: !1
                    }),
                    this._materialBlackHole = new f.MeshBasicMaterial({
                        map: this._loader.getAsset(this._ASSET_IMAGE_BLACK_HOLE),
                        transparent: !0,
                        depthTest: !1,
                        depthWrite: !1
                    })
            }
            ,
            d.prototype._initOrbits = function () {
                Tt.push(new v.Circle({
                    radius: this._PLANET_ICE_ORBIT_RADIUS,
                    color: 6601466,
                    opacity: .1,
                    renderOrder: 2,
                    position: {
                        x: this._planetIce.object3D.position.x,
                        y: this._planetIce.object3D.position.y,
                        z: this._planetIce.object3D.position.z
                    }
                })),
                    Tt.push(new v.Circle({
                        radius: this._PLANET_SAND_ORBIT_RADIUS,
                        color: 16777215,
                        opacity: .1,
                        renderOrder: 2,
                        position: {
                            x: this._planetSand.object3D.position.x,
                            y: this._planetSand.object3D.position.y,
                            z: this._planetSand.object3D.position.z
                        }
                    }))
            }
            ,
            d.prototype._initPlanets = function () {
                this._planetIce = new v.Planet({
                    radius: .61,
                    colorMap: this._loader.getAsset(this._ASSET_IMAGE_PLANET_ICE),
                    glowColor: 16777215,
                    rotationSpeed: .002,
                    wireframeColor: 6601466,
                    renderOrder: 5,
                    position: {
                        x: -5.34,
                        y: 1.9,
                        z: 0
                    },
                    axisRotation: {
                        x: 0,
                        y: 0,
                        z: Math.PI / 8
                    }
                }),
                    this._planetMars = new v.Planet({
                        radius: .46,
                        colorMap: this._loader.getAsset(this._ASSET_IMAGE_PLANET_MARS),
                        glowColor: 15844246,
                        rotationSpeed: .004,
                        renderOrder: 5,
                        position: {
                            x: -2,
                            y: 4.17,
                            z: 0
                        },
                        axisRotation: {
                            x: 0,
                            y: 0,
                            z: Math.PI / 8
                        }
                    }),
                    this._planet5 = new v.Planet({
                        radius: .1,
                        colorMap: this._loader.getAsset(this._ASSET_IMAGE_PLANET_JUPITER),
                        glowColor: 16777215,
                        rotationSpeed: .005,
                        position: {
                            x: -1.7,
                            y: 4.74,
                            z: 0
                        },
                        axisRotation: {
                            x: 0,
                            y: 0,
                            z: Math.PI / 8
                        }
                    }),
                    this._planet6 = new v.Planet({
                        radius: .177,
                        colorMap: this._loader.getAsset(this._ASSET_IMAGE_PLANET_SATURN),
                        glowColor: 16777215,
                        rotationSpeed: .006,
                        position: {
                            x: -.167994,
                            y: -.3762,
                            z: -2
                        },
                        axisRotation: {
                            x: 0,
                            y: 0,
                            z: Math.PI / 8
                        }
                    }),
                    this._planetSand = new v.Planet({
                        radius: .61,
                        material: this._materialPlanetSand,
                        rotationSpeed: .0016,
                        wireframeColor: 13544354,
                        renderOrder: 5,
                        position: {
                            x: .43,
                            y: -1.45,
                            z: 0
                        },
                        axisRotation: {
                            x: 0,
                            y: 0,
                            z: Math.PI / 8
                        }
                    }),
                    this._planetEarth = new v.Planet({
                        radius: .588,
                        colorMap: this._loader.getAsset(this._ASSET_IMAGE_PLANET_EARTH),
                        glowColor: 16777215,
                        rotationSpeed: .001,
                        renderOrder: 5,
                        position: {
                            x: -4.30359,
                            y: 5.58,
                            z: 0
                        },
                        axisRotation: {
                            x: 0,
                            y: 0,
                            z: 0
                        }
                    }),
                    this._planetEarthClouds = new v.Planet({
                        radius: .59,
                        colorMap: this._loader.getAsset(this._ASSET_IMAGE_CLOUDS),
                        rotationSpeed: .0015,
                        renderOrder: 6,
                        position: {
                            x: -4.30359,
                            y: 5.58,
                            z: 0
                        },
                        axisRotation: {
                            x: 0,
                            y: 0,
                            z: 0
                        }
                    }),
                    this._planetEarthClouds.object3D.rotateZ(-Math.PI / 5),
                    this._planetMercury = new v.Planet({
                        radius: .66,
                        colorMap: this._loader.getAsset(this._ASSET_IMAGE_PLANET_MERCURY),
                        glowColor: 16775122,
                        rotationSpeed: .0016,
                        renderOrder: 5,
                        position: {
                            x: -1.268696,
                            y: -4.61241,
                            z: 0
                        },
                        axisRotation: {
                            x: 0,
                            y: 0,
                            z: -Math.PI / 2
                        }
                    }),
                    Et.push(this._planetEarth),
                    Et.push(this._planetEarthClouds),
                    Et.push(this._planetIce),
                    Et.push(this._planetMercury),
                    Et.push(this._planetSand),
                    Et.push(this._planetMars),
                    Et.push(this._planet5),
                    Et.push(this._planet6)
            }
            ,
            d.prototype._initSatellites = function () {
                this._planetIceMoon1 = new v.Planet({
                    radius: .043,
                    colorMap: this._loader.getAsset(this._ASSET_IMAGE_SATELLITE_1),
                    glowColor: 16775851,
                    shadeColor: new f.Vector4(1, 1, 0, 1),
                    rotationSpeed: .003,
                    renderOrder: 5,
                    position: {
                        x: this._PLANET_ICE_ORBIT_RADIUS * Math.cos(89 * Math.PI / 180) + this._planetIce.object3D.position.x,
                        y: this._PLANET_ICE_ORBIT_RADIUS * Math.sin(89 * Math.PI / 180) + this._planetIce.object3D.position.y,
                        z: this._planetIce.object3D.position.z
                    },
                    axisRotation: {
                        x: 0,
                        y: 0,
                        z: 89 * Math.PI / 180
                    }
                }),
                    this._planetIceMoon2 = new v.Planet({
                        radius: .058,
                        colorMap: this._loader.getAsset(this._ASSET_IMAGE_SATELLITE_2),
                        glowColor: 16775851,
                        shadeColor: new f.Vector4(1, 1, 0, 1),
                        rotationSpeed: .004,
                        renderOrder: 5,
                        position: {
                            x: this._PLANET_ICE_ORBIT_RADIUS * Math.cos(-39.5 * Math.PI / 180) + this._planetIce.object3D.position.x,
                            y: this._PLANET_ICE_ORBIT_RADIUS * Math.sin(-39.5 * Math.PI / 180) + this._planetIce.object3D.position.y,
                            z: this._planetIce.object3D.position.z
                        },
                        axisRotation: {
                            x: 0,
                            y: 0,
                            z: -39.5 * Math.PI / 180
                        }
                    }),
                    this._planetSandMoon = new v.Planet({
                        radius: .122,
                        material: this._materialPlanetSand,
                        rotationSpeed: .005,
                        renderOrder: 5,
                        position: {
                            x: this._PLANET_SAND_ORBIT_RADIUS * Math.cos(153 * Math.PI / 180) + this._planetSand.object3D.position.x,
                            y: this._PLANET_SAND_ORBIT_RADIUS * Math.sin(153 * Math.PI / 180) + this._planetSand.object3D.position.y,
                            z: this._planetSand.object3D.position.z
                        },
                        axisRotation: {
                            x: 0,
                            y: 0,
                            z: 153 * Math.PI / 180
                        }
                    }),
                    Et.push(this._planetIceMoon1),
                    Et.push(this._planetIceMoon2),
                    Et.push(this._planetSandMoon)
            }
            ,
            d.prototype._initSoundButton = function () {
                function t() {
                    ue = !0;
                    for (var t = 0; t < o.length; t++)
                        o[t].classList.contains("text-3d-trust-hint") || o[t].classList.contains("text-3d-shooting-hint") || o[t].addEventListener("mouseenter", e, !1);
                    r.classList.add("on"),
                        P.default.playAllSounds()
                }
                function e(t) {
                    P.default.playHoverSound()
                }
                function i(e) {
                    window.removeEventListener("click", i, !1),
                        window.removeEventListener("keydown", n, !1),
                        P.default.isSoundOn() && (e.currentTarget === r || ue || t())
                }
                function n(e) {
                    window.removeEventListener("click", i, !1),
                        window.removeEventListener("keydown", n, !1),
                        P.default.isSoundOn() && (ue || t())
                }
                var r = document.querySelector(".menu-icon-button-sound")
                    , o = document.querySelectorAll(".text-3d");
                r.addEventListener("click", function (i) {
                    if (ue) {
                        ue = !1;
                        for (var n = 0; n < o.length; n++)
                            o[n].classList.contains("text-3d-trust-hint") || o[n].classList.contains("text-3d-shooting-hint") || o[n].removeEventListener("mouseenter", e, !1);
                        r.classList.remove("on"),
                            P.default.pauseAllSounds()
                    } else
                        t()
                }, !1),
                    window.addEventListener("keydown", n, !1), //// add event
                    window.addEventListener("click", i, !1)
            }
            ,
            d.prototype._initSounds = function () {
                function t(t) {
                    P.default.playClickSound()
                }
                P.default.addSound({
                    src: this._loader.getAsset(this._ASSET_AUDIO_BACKGROUND),
                    loop: !0,
                    volume: .3
                }),
                    P.default.addSound({
                        src: this._loader.getAsset(this._ASSET_AUDIO_ASTRONAUTS),
                        loop: !0,
                        x: 4.293402168112103,
                        y: -.41547370273388734,
                        volume: .5
                    }),
                    P.default.addSound({
                        src: this._loader.getAsset(this._ASSET_AUDIO_PLANET_MERCURY),
                        loop: !0,
                        x: -1.302037130490295,
                        y: -4.47515908700276
                    }),
                    P.default.addSound({
                        src: this._loader.getAsset(this._ASSET_AUDIO_PLANET_ICE),
                        loop: !0,
                        x: -4.133922989633778,
                        y: 2.3525145321102596,
                        volume: .6
                    }),
                    P.default.addSound({
                        src: this._loader.getAsset(this._ASSET_AUDIO_BLACK_HOLE),
                        loop: !0,
                        x: 1.7928188277312498,
                        y: -2.4776474542024003,
                        volume: .7
                    }),
                    P.default.addSound({
                        src: this._loader.getAsset(this._ASSET_AUDIO_SPACESHIP_3),
                        loop: !0,
                        x: 3.6438282689176686,
                        y: -1.5194164871361038,
                        volume: .5
                    }),
                    P.default.addSound({
                        src: this._loader.getAsset(this._ASSET_AUDIO_SPACESHIP_2),
                        loop: !0,
                        x: 1.4843887796305242,
                        y: 1.2850432766827196
                    }),
                    P.default.addClickSound(this._loader.getAsset(this._ASSET_AUDIO_LINK_CLICK)),
                    P.default.addHoverSound(this._loader.getAsset(this._ASSET_AUDIO_LINK_HOVER)),
                    P.default.addShowSound(this._loader.getAsset(this._ASSET_AUDIO_LINK_SHOW)),
                    P.default.addExplosionSound(this._loader.getAsset(this._ASSET_AUDIO_ASTEROID_EXPLOSION)),
                    ue ? P.default.playAllSounds() : P.default.pauseAllSounds();
                for (var e = [".render-page a", ".render-page .button.tooltip-open", ".render-page .tooltip-close-button", ".popup-pages .close-button", ".popup-pages .bottom-menu-container .logo", ".popup-pages .bottom-menu-container .social-network-links a", ".text-3d-trust-hint .close-button"].join(","), i = document.querySelectorAll(e), n = 0; n < i.length; n++)
                    i[n].addEventListener("click", t, !1)
            }
            ,
            d.prototype._initSpaceship = function () {
                ft = new v.Spaceship({
                    mesh: this._loader.getAsset(this._ASSET_OBJECT_SPACESHIP),
                    flameColorMap: this._loader.getAsset(this._ASSET_IMAGE_SPACESHIP_FLAME)
                }),
                    vt = pt.getPositionAt(ee),
                    ft.object3D.position.set(vt.x, vt.y, 0),
                    mt = ft.object3D.position,
                    gt = ft.object3D.rotation,
                    at.add(ft.object3D)
            }
            ,
            d.prototype._initSpaceships = function () {
                Et.push(new v.Sprite({
                    width: 1.482,
                    height: .741,
                    swingAmplitude: .025,
                    swingSpeed: .025,
                    position: {
                        x: 2.78685,
                        y: 2.44153,
                        z: 0
                    },
                    frames: {
                        colorMap: this._loader.getAsset(this._ASSET_IMAGE_SPACESHIP_1),
                        frameColorMap: this._loader.getAsset(this._ASSET_IMAGE_SPACESHIP_1_FRAMES),
                        numberOfHorizontalFrames: 2,
                        numberOfNumberOfVerticalFrames: 4,
                        numberOfEmptyFrames: 1,
                        rate: 10
                    }
                })),
                    Et.push(new v.Spaceship2({
                        // load asset
                        texture: this._loader.getAsset(this._ASSET_IMAGE_SPACESHIP_2),
                        framesBlueLights1: this._loader.getAsset(this._ASSET_IMAGE_SPACESHIP_2_BLUE_LIGHTS_FRAMES_1),
                        framesBlueLights2: this._loader.getAsset(this._ASSET_IMAGE_SPACESHIP_2_BLUE_LIGHTS_FRAMES_2),
                        framesBlueLights3: this._loader.getAsset(this._ASSET_IMAGE_SPACESHIP_2_BLUE_LIGHTS_FRAMES_3),
                        framesRedLights: this._loader.getAsset(this._ASSET_IMAGE_SPACESHIP_2_RED_LIGHTS_FRAMES),
                        width: 1.89,
                        height: .945,
                        swingAmplitude: .02,
                        swingSpeed: .01,
                        position: {
                            x: 4.2389,
                            y: -2.34456,
                            z: 0
                        }
                    })),
                    Et.push(new v.Spaceship3({
                        texture: this._loader.getAsset(this._ASSET_IMAGE_SPACESHIP_3),
                        framesBlueLights1: this._loader.getAsset(this._ASSET_IMAGE_SPACESHIP_3_BLUE_LIGHTS_FRAMES_1),
                        framesBlueLights2: this._loader.getAsset(this._ASSET_IMAGE_SPACESHIP_3_BLUE_LIGHTS_FRAMES_2),
                        framesBlueLights3: this._loader.getAsset(this._ASSET_IMAGE_SPACESHIP_3_BLUE_LIGHTS_FRAMES_3),
                        framesRedLights: this._loader.getAsset(this._ASSET_IMAGE_SPACESHIP_2_RED_LIGHTS_FRAMES),
                        width: 2.721212,
                        height: 1.360606,
                        swingAmplitude: .01,
                        swingSpeed: .02,
                        position: {
                            x: 1.6,
                            y: .2,
                            z: 0
                        }
                    })),
                    Et.push(new v.Sprite({
                        material: this._material5,
                        uv: [0, .5, .5, .5, 0, 0, .5, 0],
                        width: .75,
                        height: .75,
                        swingAmplitude: .02,
                        swingSpeed: .03,
                        position: {
                            x: -1.91084,
                            y: -.839725,
                            z: 0
                        }
                    })),
                    Et.push(new v.Sprite({
                        width: .68,
                        height: .17,
                        swingAmplitude: .01,
                        swingSpeed: .025,
                        renderOrder: 5,
                        position: {
                            x: 1.8,
                            y: -3.53294,
                            z: -6
                        },
                        frames: {
                            frameColorMap: this._loader.getAsset(this._ASSET_IMAGE_ENTERPRISE_FRAMES),
                            numberOfHorizontalFrames: 4,
                            numberOfNumberOfVerticalFrames: 8,
                            numberOfEmptyFrames: 2,
                            rate: 10
                        }
                    }))
            }
            ,
            d.prototype._initSpaceshipPath = function () {
                pt = new v.SpaceshipPath({
                    minPointerValue: J,
                    maxPointerValue: ie
                }),
                    it = pt.getPositionAt(J),
                    nt = pt.getPositionAt(K)
            }
            ,
            d.prototype._initSputnik = function () {
                yt = new v.Sputnik({
                    mesh: this._loader.getAsset(this._ASSET_OBJECT_SPUTNIK),
                    position: {
                        x: -4.30359,
                        y: 5.58,
                        z: 0
                    }
                }),
                    yt.object3D.rotateZ(Math.PI / 2),
                    at.add(yt.object3D)
            }
            ,
            d.prototype._initStarclouds = function () {
                var t = [[0, 1, .5, 1, 0, .5, .5, .5], [.5, 1, 1, 1, .5, .5, 1, .5], [0, .5, .5, .5, 0, 0, .5, 0], [.5, .5, 1, .5, .5, 0, 1, 0]];
                Tt.push(new v.Starcloud({
                    material: this._materialStarclouds,
                    uvs: [t[0], t[1], t[2]],
                    position: {
                        x: 2.81496,
                        y: 2.07565,
                        z: 0
                    },
                    positions: [{
                        x: 0,
                        y: 0,
                        z: -2
                    }, {
                        x: 0,
                        y: 0,
                        z: -3
                    }, {
                        x: 0,
                        y: 0,
                        z: -4
                    }]
                })),
                    Tt.push(new v.Starcloud({
                        material: this._materialStarclouds,
                        uvs: [t[0], t[1], t[2]],
                        position: {
                            x: -1.27792,
                            y: -3.10681,
                            z: 0
                        },
                        positions: [{
                            x: 0,
                            y: 0,
                            z: -4
                        }, {
                            x: 0,
                            y: 0,
                            z: -6
                        }, {
                            x: 0,
                            y: 0,
                            z: -8
                        }]
                    }))
            }
            ,
            d.prototype._initStars = function () {
                xt = new v.StarField({
                    colorMap: this._loader.getAsset(this._ASSET_IMAGE_STARS)
                }).object3D,
                    st.add(xt)
            }
            ,
            d.prototype._initSun = function () {
                Et.push(new v.Sun({
                    colorMap: this._loader.getAsset(this._ASSET_IMAGE_SUN),
                    position: {
                        x: 4.75126,
                        y: 3.32753,
                        z: 0
                    }
                }))
            }
            ,
            d.prototype._initTrustHint = function () {
                var t = document.querySelector(".container-trust-hint")
                    , e = t.querySelector(".container-trust-hint .text-3d");
                e.style.left = Math.round(-e.offsetWidth / 2) + "px",
                    e.style.top = Math.round(-e.offsetHeight / 2) + "px";
                var i = t.querySelector(".close-button")
                    , n = document.querySelector(".container-intro");
                n.querySelector(".trust-hint-button").addEventListener("click", function () {
                    t.classList.add("visible"),
                        n.classList.add("inactive")
                }, !1),
                    i.addEventListener("click", function () {
                        t.classList.remove("visible"),
                            n.classList.remove("inactive")
                    }, !1)
            }
            ,
            d.prototype._initUniverse = function () {
                bt = new v.Universe({
                    colorMapLeft: this._loader.getAsset(this._ASSET_IMAGE_UNIVERSE_LEFT),
                    colorMapRight: this._loader.getAsset(this._ASSET_IMAGE_UNIVERSE_RIGHT),
                    colorMapTop: this._loader.getAsset(this._ASSET_IMAGE_UNIVERSE_TOP),
                    colorMapBottom: this._loader.getAsset(this._ASSET_IMAGE_UNIVERSE_BOTTOM),
                    colorMapFront: this._loader.getAsset(this._ASSET_IMAGE_UNIVERSE_FRONT),
                    colorMapBack: this._loader.getAsset(this._ASSET_IMAGE_UNIVERSE_BACK)
                }).object3D,
                    ht.add(bt)
            }
            ,
            d.prototype._loadProgressChange = function (t) {
                this.dispatchEvent(t)
            }
            ,
            d.prototype._renderAllObjects = function () {
                for (var t = [wt, St, Et, Tt], e = 0; e < t.length; e++)
                    for (var i = 0; i < t[e].length; i++) {
                        var n = t[e][i];
                        et.x = n.object3D.position.x,
                            et.y = n.object3D.position.y,
                            at.add(n.object3D),
                            lt.render(at, tt),
                            at.remove(n.object3D)
                    }
            }
            ,
            d.prototype._initEventListeners = function () {
                // add event scroll
                var t = document.querySelector(".render-page");
                navigator.platform.match(/mac/i) ? (t.addEventListener("mousewheel", l, !1),
                    t.addEventListener("DOMMouseScroll", l, !1),
                    t.addEventListener("wheel", l, !1),
                    t.addEventListener("MozMousePixelScroll", l, !1)) : (t.addEventListener("mousewheel", h, !1),
                        t.addEventListener("DOMMouseScroll", h, !1),
                        t.addEventListener("wheel", h, !1),
                        t.addEventListener("MozMousePixelScroll", h, !1)),
                    document.querySelector("html").classList.contains("preserve3d") && t.addEventListener("mousemove", this._mousemove, !1),
                    window.addEventListener("keydown", this._keyDown, !1),
                    window.addEventListener("keyup", this._keyUp, !1),
                    window.addEventListener("resize", this._resize, !1)
            }
            ,
            d.prototype._keyDown = function (t) {
                if (" " !== t.key && 32 !== t.keyCode && "Space" !== t.code || (Zt = !0),
                    !Ft) {
                    switch (t.key) {
                        case "ArrowLeft":
                        case "Left":
                            jt = !0;
                            break;
                        case "ArrowRight":
                        case "Right":
                            kt = !0;
                            break;
                        case "ArrowUp":
                        case "Up":
                            Ht = !0;
                            break;
                        case "ArrowDown":
                        case "Down":
                            Vt = !0
                    }
                    Wt = Vt || kt,
                        Xt = Ht || jt,
                        Wt && (Xt = !1),
                        Gt = Wt || Xt
                }
            }
            ,
            d.prototype._keyUp = function (t) {
                if (" " !== t.key && 32 !== t.keyCode && "Space" !== t.code || (Zt = !1,
                    Jt = !0),
                    !Ft) {
                    switch (t.key) {
                        case "ArrowLeft":
                        case "Left":
                            jt = !1;
                            break;
                        case "ArrowRight":
                        case "Right":
                            kt = !1;
                            break;
                        case "ArrowUp":
                        case "Up":
                            Ht = !1;
                            break;
                        case "ArrowDown":
                        case "Down":
                            Vt = !1
                    }
                    Wt = Vt || kt,
                        Xt = Ht || jt,
                        Wt && (Xt = !1),
                        Gt = Wt || Xt
                }
            }
            ,
            d.prototype._resize = function () {
                var t = window.innerWidth / window.innerHeight
                    , e = 180 / Math.PI * 2 * Math.atan(this._tanFov * (window.innerHeight / 5320));
                tt.aspect = t,
                    tt.fov = e,
                    tt.updateProjectionMatrix(),
                    rt.aspect = t,
                    rt.fov = 8 * e,
                    rt.updateProjectionMatrix(),
                    ot.aspect = t,
                    ot.updateProjectionMatrix(),
                    lt.setSize(window.innerWidth, window.innerHeight),
                    ut = ct.width / 2,
                    dt = ct.height / 2,
                    a(),
                    D = C.offsetWidth,
                    U = C.offsetHeight,
                    N = D / 2,
                    B = U / 2,
                    It = !0,
                    window.matchMedia("(max-width: 1024px)").matches ? ue && !P.default.isPaused() && P.default.pauseAllSounds() : ue && P.default.isPaused() && P.default.playAllSounds()
            }
            ,
            d.prototype._mousemove = function (t) {
                Yt = t.clientX,
                    qt = t.clientY,
                    le <= 0 && o()
            }
            ;
        var de = !0
            , pe = null;
        d.prototype._tick = function () {
            oe = !1;
            for (var t = 0; t < Mt.length; t++) {
                if ("break" === function (t) {
                    var e = et.x - Mt[t].object3D.position.x
                        , i = et.y - Mt[t].object3D.position.y;
                    if (Math.sqrt(e * e + i * i) <= 1.2)
                        return Mt[t].isExploded() || (de && (de = !1,
                            pe = setTimeout(function () {
                                Lt = !0,
                                    Pt = Rt[t],
                                    Pt.hidden = !1,
                                    Pt.visible = !0,
                                    Pt.domElementClassList.add("visible"),
                                    clearTimeout(pe),
                                    de = !0,
                                    pe = null
                            }, 5e3)),
                            Zt && (clearTimeout(pe),
                                de = !0,
                                pe = null)),
                            Mt[t].isExploded() ? (pe && (clearTimeout(pe),
                                de = !0,
                                pe = null),
                                re = 0,
                                ne = !0,
                                "break") : (oe = !0,
                                    0 === re ? (ne = !1,
                                        Wt && (re = 1),
                                        Xt && (re = -1)) : 1 === re && Xt || -1 === re && Wt ? ne = !0 : ne && (ne = !1,
                                            ae = !0),
                                    "break")
                }(t))
                    break
            }
            oe || (re = 0,
                ne = !0),
                Ft && (zt = 40,
                    Ft = !1),
                zt > 0 || Gt ? (Wt && he >= 0 ? he = 1 : Xt && he <= 0 && (he = -1),
                    Wt && he >= 0 || Xt && he <= 0 ? ne ? (c(),
                        ft.engineOn(),
                        s(),
                        It = !0) : (zt = 0,
                            u(),
                            ft.engineOff(),
                            s(),
                            ae && (ae = !1,
                                pt.invertRotation()),
                            It = !0,
                            Ft = !1) : le > 0 && (zt = 0,
                                u(),
                                ft.engineOff(),
                                s(),
                                It = !0,
                                Ft = !1)) : le > 0 && (zt = 0,
                                    u(),
                                    ft.engineOff(),
                                    s(),
                                    It = !0),
                zt > 0 && zt--,
                Zt && Jt && (Jt = !1,
                    _t.shoot()),
                bt.rotateOnWorldAxis(Z, 5e-5),
                xt.rotateOnWorldAxis(Z, 5e-5);
            var e = void 0
                , i = void 0;
            for (e = 0; e < Et.length; e++)
                i = Et[e],
                    i.visible && i.tick();
            for (e = 0; e < wt.length; e++)
                i = wt[e],
                    i.visible && i.tick();
            for (e = 0; e < Mt.length; e++)
                i = Mt[e],
                    i.visible && i.tick();
            if (yt.visible && yt.tick(),
                ft.tick(),
                _t.tick(),
                lt.clear(),
                lt.render(ht, ot),
                lt.clearDepth(),
                lt.render(st, rt),
                lt.clearDepth(),
                lt.render(at, tt),
                Zt && Lt)
                for (Lt = !1,
                    e = 0; e < Rt.length; e++)
                    Pt = Rt[e],
                        Pt.hidden = !0,
                        Pt.visible = !1,
                        Pt.domElementClassList.remove("visible");
            It && (o(),
                It = !1),
                Ut && (Ut = !1,
                    Nt.progressCheckpointIndex = Dt,
                    this.dispatchEvent(Nt)),
                W || requestAnimationFrame(this._tick),
                ue && P.default.setHeadphonesPosition(et.x, et.y)
        }
            ,
            e.default = d
    }
    , function (t, e, i) {
        "use strict";
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var n = i(355);
        Object.defineProperty(e, "Asteroid", {
            enumerable: !0,
            get: function () {
                return n.Asteroid
            }
        });
        var r = i(356);
        Object.defineProperty(e, "BlackHole", {
            enumerable: !0,
            get: function () {
                return r.BlackHole
            }
        });
        var o = i(357);
        Object.defineProperty(e, "Border", {
            enumerable: !0,
            get: function () {
                return o.Border
            }
        });
        var a = i(358);
        Object.defineProperty(e, "CertificateWaves", {
            enumerable: !0,
            get: function () {
                return a.CertificateWaves
            }
        });
        var s = i(132);
        Object.defineProperty(e, "Circle", {
            enumerable: !0,
            get: function () {
                return s.Circle
            }
        });
        var h = i(361);
        Object.defineProperty(e, "Galaxy", {
            enumerable: !0,
            get: function () {
                return h.Galaxy
            }
        });
        var l = i(364);
        Object.defineProperty(e, "HTMLElementPosition", {
            enumerable: !0,
            get: function () {
                return l.HTMLElementPosition
            }
        });
        var c = i(365);
        Object.defineProperty(e, "Planet", {
            enumerable: !0,
            get: function () {
                return c.Planet
            }
        });
        var u = i(369);
        Object.defineProperty(e, "PlanetMarsGlow", {
            enumerable: !0,
            get: function () {
                return u.PlanetMarsGlow
            }
        });
        var d = i(370);
        Object.defineProperty(e, "PlanetMercuryGlow", {
            enumerable: !0,
            get: function () {
                return d.PlanetMercuryGlow
            }
        });
        var p = i(371);
        Object.defineProperty(e, "Spaceship", {
            enumerable: !0,
            get: function () {
                return p.Spaceship
            }
        });
        var f = i(374);
        Object.defineProperty(e, "Spaceship2", {
            enumerable: !0,
            get: function () {
                return f.Spaceship2
            }
        });
        var m = i(376);
        Object.defineProperty(e, "Spaceship3", {
            enumerable: !0,
            get: function () {
                return m.Spaceship3
            }
        });
        var v = i(377);
        Object.defineProperty(e, "SpaceshipPath", {
            enumerable: !0,
            get: function () {
                return v.SpaceshipPath
            }
        });
        var g = i(378);
        Object.defineProperty(e, "Sprite", {
            enumerable: !0,
            get: function () {
                return g.Sprite
            }
        });
        var _ = i(379);
        Object.defineProperty(e, "Sputnik", {
            enumerable: !0,
            get: function () {
                return _.Sputnik
            }
        });
        var y = i(380);
        Object.defineProperty(e, "Starcloud", {
            enumerable: !0,
            get: function () {
                return y.Starcloud
            }
        });
        var x = i(381);
        Object.defineProperty(e, "StarField", {
            enumerable: !0,
            get: function () {
                return x.StarField
            }
        });
        var b = i(383);
        Object.defineProperty(e, "Sun", {
            enumerable: !0,
            get: function () {
                return b.Sun
            }
        });
        var w = i(384);
        Object.defineProperty(e, "Universe", {
            enumerable: !0,
            get: function () {
                return w.Universe
            }
        })
    }
    , function (t, e, i) {
        "use strict";
        function n(t, e) {
            if (!(t instanceof e))
                throw new TypeError("Cannot call a class as a function")
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.Asteroid = void 0;
        var r = function () {
            function t(t, e) {
                for (var i = 0; i < e.length; i++) {
                    var n = e[i];
                    n.enumerable = n.enumerable || !1,
                        n.configurable = !0,
                        "value" in n && (n.writable = !0),
                        Object.defineProperty(t, n.key, n)
                }
            }
            return function (e, i, n) {
                return i && t(e.prototype, i),
                    n && t(e, n),
                    e
            }
        }()
            , o = i(4)
            , a = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(o)
            , s = i(53)
            , h = function (t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }(s)
            , l = 6
            , c = [{
                x: .644269,
                y: .193429,
                uv: [0, 1, .3333, 1, 0, .6667, .3333, .6667]
            }, {
                x: -.026039,
                y: .659148,
                uv: [.3333, 1, .6667, 1, .3333, .6667, .6667, .6667]
            }, {
                x: .447864,
                y: -.671796,
                uv: [.6667, 1, 1, 1, .6667, .6667, 1, .6667]
            }, {
                x: -.723129,
                y: .610791,
                uv: [0, .6667, .3333, .6667, 0, .3333, .3333, .3333]
            }, {
                x: -.805708,
                y: -.056541,
                uv: [.3333, .6667, .6667, .6667, .3333, .3333, .6667, .3333]
            }, {
                x: -.012151,
                y: -.337386,
                uv: [.6667, .6667, 1, .6667, .6667, .3333, 1, .3333]
            }, {
                x: -.223188,
                y: .399506,
                uv: [.6667, .3333, 1, .3333, .6667, 0, 1, 0]
            }, {
                x: -.592936,
                y: .172599,
                uv: [.3333, .3333, .6667, .3333, .3333, 0, .6667, 0]
            }, {
                x: -.56169,
                y: -.735032,
                uv: [0, .3333, .3333, .3333, 0, 0, .3333, 0]
            }]
            , u = function () {
                function t(e) {
                    n(this, t),
                        this._numberOfLives = l,
                        this._pieces = [],
                        this._splinters = [],
                        this._pieceMaterial = new a.MeshBasicMaterial({
                            map: e.map,
                            transparent: !0
                        }),
                        this._pieceMaterial.depthTest = !1,
                        this._pieceMaterial.depthWrite = !1,
                        this._splinterMaterial = this._pieceMaterial.clone(),
                        this._createPieces(),
                        this._createSplinters(36);
                    this.object3D = new a.Group,
                        this.object3D.translateX(e.position.x),
                        this.object3D.translateY(e.position.y),
                        this.object3D.scale.x = .2,
                        this.object3D.scale.y = .2;
                    for (var i = 0; i < this._pieces.length; i++)
                        this.object3D.add(this._pieces[i].object3D);
                    for (var r = 0; r < this._splinters.length; r++)
                        this.object3D.add(this._splinters[r].object3D);
                    this.assemble(),
                        this.boundingSphere = new a.Sphere(new a.Vector3(e.position.x, e.position.y, e.position.z), 2),
                        this._swingY = 0,
                        this._positionY = this.object3D.position.y
                }
                return r(t, [{
                    key: "_createPieces",
                    value: function () {
                        for (var t = 0; t < c.length; t++) {
                            var e = new a.PlaneBufferGeometry(2, 2, 1);
                            e.addAttribute("uv", new a.BufferAttribute(new Float32Array(c[t].uv), 2));
                            var i = new a.Mesh(e, this._pieceMaterial);
                            i.translateX(c[t].x),
                                i.translateY(c[t].y);
                            var n = Math.sqrt(i.position.x * i.position.x + i.position.y * i.position.y);
                            this._pieces.push({
                                object3D: i,
                                normalX: i.position.x / n,
                                normalY: i.position.y / n,
                                startSpeed: Math.random() * (.12 - .2) + .2,
                                rotationSpeed: (Math.random() >= .5 ? 1 : -1) * (-.006 * Math.random() + .01)
                            })
                        }
                    }
                }, {
                    key: "_createSplinters",
                    value: function (t) {
                        for (var e = 0; e < t; e++) {
                            var i = c[0].uv;
                            Math.round() >= .5 && (i = c[4].uv);
                            var n = new a.PlaneBufferGeometry(.3, .3, 1);
                            n.addAttribute("uv", new a.BufferAttribute(new Float32Array(i), 2));
                            var r = new a.Mesh(n, this._splinterMaterial.clone());
                            r.scale.x = 1e-4,
                                r.scale.y = 1e-4;
                            var o = 2 * Math.random() - 1
                                , s = 2 * Math.random() - 1
                                , h = Math.random()
                                , l = Math.sqrt(o * o + s * s + h * h);
                            this._splinters.push({
                                object3D: r,
                                normalX: o / l,
                                normalY: s / l,
                                normalZ: h / l,
                                startSpeed: 1.2 * (Math.random() * (.12 - .2) + .2),
                                rotationSpeed: (Math.random() >= .5 ? 1 : -1) * (-.006 * Math.random() + .01) * 10
                            })
                        }
                    }
                }, {
                    key: "assemble",
                    value: function () {
                        this._tick = !0,
                            this._isExploded = !1,
                            this._numberOfLives = l;
                        for (var t = 0; t < this._pieces.length; t++) {
                            var e = this._pieces[t];
                            e.object3D.position.x = c[t].x,
                                e.object3D.position.y = c[t].y,
                                e.object3D.rotation.z = 0,
                                e.object3D.scale.x = 1,
                                e.object3D.scale.y = 1,
                                e.object3D.material.opacity = 1,
                                e.speed = e.startSpeed
                        }
                        for (var i = 0; i < this._splinters.length; i++) {
                            var n = this._splinters[i];
                            n.object3D.position.x = 0,
                                n.object3D.position.y = 0,
                                n.object3D.position.z = 0,
                                n.object3D.rotation.x = 0,
                                n.object3D.rotation.y = 0,
                                n.object3D.scale.x = 1e-4,
                                n.object3D.scale.y = 1e-4,
                                n.speed = n.startSpeed
                        }
                        this._swingY = 0,
                            this._positionY = this.object3D.position.y
                    }
                }, {
                    key: "explode",
                    value: function () {
                        this._numberOfLives--,
                            !this._isExploded && this._numberOfLives <= 0 && (this._isExploded = !0,
                                h.default.playExplosionSound())
                    }
                }, {
                    key: "isExploded",
                    value: function () {
                        return this._isExploded
                    }
                }, {
                    key: "tick",
                    value: function () {
                        if (this._tick) {
                            if (!this._isExploded)
                                return this._swingY += .0176,
                                    this.object3D.position.y = this._positionY + .025 * Math.sin(this._swingY),
                                    void (this.object3D.rotation.z += .001);
                            var t = void 0
                                , e = void 0
                                , i = void 0;
                            for (t = 0; t < this._pieces.length; t++) {
                                e = this._pieces[t];
                                var n = e.speed / e.startSpeed * .7 + .3;
                                e.object3D.position.x += e.normalX * e.speed,
                                    e.object3D.position.y += e.normalY * e.speed,
                                    e.object3D.rotation.z += e.rotationSpeed,
                                    e.object3D.scale.x = n,
                                    e.object3D.scale.y = n,
                                    e.object3D.material.opacity = e.speed / e.startSpeed,
                                    e.speed *= .96
                            }
                            var r = !0;
                            for (t = 0; t < this._splinters.length; t++) {
                                e = this._splinters[t],
                                    i = e.speed / e.startSpeed;
                                var o = Math.sin(i * Math.PI);
                                e.object3D.position.x += e.normalX * e.speed,
                                    e.object3D.position.y += e.normalY * e.speed,
                                    e.object3D.position.z += e.normalZ * e.speed,
                                    e.object3D.rotation.x += e.rotationSpeed,
                                    e.object3D.rotation.y += e.rotationSpeed,
                                    e.object3D.scale.x = o,
                                    e.object3D.scale.y = o,
                                    e.speed *= .96,
                                    i >= .01 && (r = !1)
                            }
                            r && (this._tick = !1)
                        }
                    }
                }]),
                    t
            }();
        e.Asteroid = u
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            var e = new o.PlaneBufferGeometry(2, 2, 1, 1);
            e.addAttribute("uv", new o.BufferAttribute(new Float32Array(t.uvBack), 2));
            var i = new o.MeshBasicMaterial({
                map: t.colorMapBack,
                transparent: !0,
                blending: o.NormalBlending
            });
            i.depthTest = !1,
                i.depthWrite = !1;
            var n = new o.PlaneBufferGeometry(1.1, 1.1, 1, 1);
            n.addAttribute("uv", new o.BufferAttribute(new Float32Array(t.uvFront), 2));
            var r = new o.MeshBasicMaterial({
                map: t.colorMapFront,
                transparent: !0,
                blending: o.NormalBlending
            });
            r.depthTest = !1,
                r.depthWrite = !1;
            var h = new o.Mesh(e, i);
            h.renderOrder = -2,
                a = h.rotation;
            var l = new o.Mesh(n, r);
            l.translateZ(.003),
                l.renderOrder = -1,
                s = l.rotation,
                this.object3D = new o.Group,
                this.object3D.add(h),
                this.object3D.add(l),
                this.object3D.translateX(t.position.x),
                this.object3D.translateY(t.position.y),
                this.object3D.translateZ(t.position.z),
                this.boundingSphere = new o.Sphere(new o.Vector3(t.position.x, t.position.y, t.position.z), 1.4)
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.BlackHole = void 0;
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r)
            , a = null
            , s = null;
        n.prototype.tick = function () {
            a.z -= 5e-4,
                s.z -= .0015
        }
            ,
            e.BlackHole = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            this.object3D = t.object3D,
                this.object3D.scale.set(.22, .22, 1),
                this.object3D.translateX(t.position.x),
                this.object3D.translateY(t.position.y),
                this.object3D.translateZ(t.position.z),
                this.boundingSphere = new o.Sphere(new o.Vector3(t.position.x, t.position.y, t.position.z), .3)
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.Border = void 0;
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r);
        e.Border = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            h = [new s.default({
                radius: .52,
                color: 16777215,
                numberOfWaves1: 7,
                numberOfWaves2: 5,
                amplitude: 0,
                amplitudeSpeed: 2 * Math.PI / 180,
                opacity: .6,
                renderOrder: 1
            }), new s.default({
                radius: .52,
                color: 35327,
                numberOfWaves1: 7,
                numberOfWaves2: 5,
                rotationSpeed: .2 * Math.PI / 180,
                amplitude: .01,
                amplitudeSpeed: Math.PI / 180,
                opacity: .3
            }), new s.default({
                radius: .5,
                color: 35327,
                numberOfWaves1: 7,
                numberOfWaves2: 5,
                rotationSpeed: .4 * Math.PI / 180,
                amplitude: .03,
                amplitudeSpeed: 1.2 * Math.PI / 180,
                opacity: .3
            }), new s.default({
                radius: .54,
                color: 35327,
                numberOfWaves1: 7,
                numberOfWaves2: 5,
                rotationSpeed: .6 * Math.PI / 180,
                amplitude: .03,
                amplitudeSpeed: 1.4 * Math.PI / 180,
                opacity: .3
            }), new s.default({
                radius: .62,
                color: 35327,
                numberOfWaves1: 5,
                numberOfWaves2: 7,
                rotationSpeed: Math.PI / 180,
                amplitude: .02,
                amplitudeSpeed: 1.6 * Math.PI / 180,
                opacity: .3
            }), new s.default({
                radius: .74,
                color: 35327,
                numberOfWaves1: 7,
                numberOfWaves2: 5,
                amplitude: .04,
                opacity: .3,
                amplitudeSpeed: .4 * Math.PI / 180,
                rotationSpeed: 2 * Math.PI / 180
            }), new s.default({
                radius: 1,
                color: 35327,
                numberOfWaves1: 7,
                numberOfWaves2: 9,
                amplitude: .03,
                amplitudeSpeed: .4 * Math.PI / 180,
                rotationSpeed: 3 * Math.PI / 180,
                opacity: .3
            })],
                this.object3D = new o.Group,
                this.object3D.translateX(t.position.x),
                this.object3D.translateY(t.position.y),
                this.object3D.translateZ(t.position.z);
            for (var e = 0; e < h.length; e++)
                this.object3D.add(h[e].object3D);
            this.boundingSphere = new o.Sphere(new o.Vector3(t.position.x, t.position.y, t.position.z), 1.1)
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.CertificateWaves = void 0;
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r)
            , a = i(359)
            , s = function (t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }(a)
            , h = null;
        n.prototype.tick = function () {
            for (var t = 0; t < h.length; t++)
                h[t].tick()
        }
            ,
            e.CertificateWaves = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            this._vertices = [],
                this._angles = [];
            for (var e = 0; e < 360; e += 2)
                this._vertices.push(Math.cos(e * Math.PI / 180) * t.radius, Math.sin(e * Math.PI / 180) * t.radius, 0);
            for (var i = 0, n = 0, r = t.numberOfWaves1 * Math.PI * 2 / (this._vertices.length / 3), a = t.numberOfWaves2 * Math.PI * 2 / (this._vertices.length / 3), e = 0; e < this._vertices.length; e += 3)
                this._angles.push(i, n),
                    i += r,
                    n += a;
            this._offset = 0,
                this._offsetAngle = t.amplitudeSpeed,
                this._rotation = 0,
                this._rotationSpeed = t.rotationSpeed || 0;
            var h = new o.BufferGeometry;
            h.addAttribute("position", new o.BufferAttribute(new Float32Array(this._vertices), 3)),
                h.addAttribute("a_angles", new o.BufferAttribute(new Float32Array(this._angles), 2));
            var l = new o.ShaderMaterial(new s.default({
                rotation: this._rotation,
                offset: this._offset,
                amplitude: t.amplitude,
                color: t.color,
                alpha: t.opacity
            }));
            this.object3D = new o.LineLoop(h, l),
                this.object3D.renderOrder = t.renderOrder || 0,
                this._uniformOffset = l.uniforms.u_offset,
                this._uniformRotation = l.uniforms.u_rotation
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r)
            , a = i(360)
            , s = function (t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }(a);
        n.prototype.tick = function () {
            this._uniformOffset.value = this._offset,
                this._uniformRotation.value = this._rotation,
                this._offset += this._offsetAngle,
                this._rotation += this._rotationSpeed
        }
            ,
            e.default = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            var e = o.default.intToFloatRGB(t.color)
                , i = t.alpha + ""
                , n = t.amplitude + "";
            i.match(/\./) || (i += ".0"),
                n.match(/\./) || (n += ".0"),
                this.uniforms = {
                    u_offset: {
                        value: t.offset
                    },
                    u_rotation: {
                        value: t.rotation
                    }
                },
                this.vertexShader = ["attribute vec2 a_angles;", "uniform float u_offset;", "uniform float u_rotation;", "void main()", "{", "gl_Position = projectionMatrix * modelViewMatrix * vec4(position * (sin(a_angles[0] + u_offset + u_rotation) * " + n + " + 1.0) * (sin(a_angles[1] - u_offset) * " + n + " + 1.0), 1.0);", "}"].join(""),
                this.fragmentShader = ["const vec4 COLOR = vec4(" + e.r + ", " + e.g + ", " + e.b + ", " + i + ");", "void main()", "{", "gl_FragColor = COLOR;", "}"].join(""),
                this.transparent = !0,
                this.depthTest = !1,
                this.depthWrite = !1
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var r = i(43)
            , o = function (t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }(r);
        e.default = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            return t && t.__esModule ? t : {
                default: t
            }
        }
        function r(t) {
            this._colorMap = t.colorMap,
                this._uvTop = t.uvTop,
                this._uvBottom = t.uvBottom,
                this._uvGlow = t.uvGlow,
                this._linesMaterial = new a.ShaderMaterial(new l.default({
                    color: t.wireframeColor,
                    alpha: .3
                })),
                this._linesMaterial.depthTest = !1,
                this._linesMaterial.depthWrite = !1,
                this._pointsMaterial = new a.ShaderMaterial(new u.default({
                    color: t.wireframeColor,
                    pointSize: 8,
                    alpha: .3
                })),
                this._pointsMaterial.depthTest = !1,
                this.object3D = new a.Group,
                this.object3D.translateX(t.position.x),
                this.object3D.translateY(t.position.y),
                this.object3D.rotateZ(t.axisRotation.z),
                this.object3D.rotateX(t.axisRotation.x),
                this._initOrbits(),
                this._initCircles(),
                this._initAxis(),
                this._initGalaxy(),
                this._initLines(),
                this._initPoints(),
                this.boundingSphere = new a.Sphere(new a.Vector3(t.position.x, t.position.y, t.position.z), 1)
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.Galaxy = void 0;
        var o = i(4)
            , a = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(o)
            , s = i(132)
            , h = i(362)
            , l = n(h)
            , c = i(363)
            , u = n(c)
            , d = null
            , p = null
            , f = null
            , m = null
            , v = null
            , g = null
            , _ = null
            , y = null;
        r.prototype._initAxis = function () {
            var t = null
                , e = new a.BufferGeometry;
            t = [0, 1, 0, 0, .075, 0],
                e.addAttribute("position", new a.BufferAttribute(new Float32Array(t), 3));
            var i = new a.Line(e, this._linesMaterial);
            i.renderOrder = 21;
            var n = new a.BufferGeometry;
            t = [0, -.075, 0, 0, -1, 0],
                n.addAttribute("position", new a.BufferAttribute(new Float32Array(t), 3));
            var r = new a.Line(n, this._linesMaterial);
            this.object3D.add(i),
                this.object3D.add(r)
        }
            ,
            r.prototype._initCircles = function () {
                for (var t = 0; t < y.length; t++) {
                    var e = new s.Circle({
                        radius: y[t].radius,
                        material: this._linesMaterial,
                        axis: "y",
                        position: {
                            x: 0,
                            y: y[t].position,
                            z: 0
                        }
                    });
                    e.object3D.renderOrder = y[t].renderOrder || 0,
                        this.object3D.add(e.object3D)
                }
            }
            ,
            r.prototype._initGalaxy = function () {
                var t = new a.PlaneBufferGeometry(2.6, 2.6, 1, 1);
                t.addAttribute("uv", new a.BufferAttribute(new Float32Array(this._uvTop), 2));
                var e = new a.PlaneBufferGeometry(2.6, 2.6, 1, 1);
                e.addAttribute("uv", new a.BufferAttribute(new Float32Array(this._uvBottom), 2));
                var i = new a.MeshBasicMaterial({
                    map: this._colorMap,
                    transparent: !0
                })
                    , n = new a.MeshBasicMaterial({
                        map: this._colorMap,
                        transparent: !0
                    });
                i.depthTest = !1,
                    i.depthWrite = !1,
                    n.depthTest = !1,
                    n.depthWrite = !1;
                var r = new a.Mesh(t, i)
                    , o = new a.Mesh(e, n);
                r.renderOrder = 14,
                    r.translateZ(.075),
                    r.rotateZ(Math.PI / .75),
                    r.scale.set(1.1, 1.1, 1),
                    o.renderOrder = 13;
                var s = new a.PlaneBufferGeometry(1, 1, 1, 1);
                s.addAttribute("uv", new a.BufferAttribute(new Float32Array(this._uvGlow), 2));
                var h = new a.MeshBasicMaterial({
                    map: this._colorMap,
                    transparent: !0,
                    depthTest: !1,
                    blending: a.AdditiveBlending
                })
                    , l = new a.Mesh(s, h);
                l.rotateX(Math.PI / 2),
                    l.renderOrder = 100;
                var c = new a.Group;
                c.add(r),
                    c.add(o),
                    c.add(l),
                    c.rotateX(-Math.PI / 2),
                    this.object3D.add(c),
                    d = r.rotation,
                    p = o.rotation,
                    f = l.rotation
            }
            ,
            r.prototype._initLines = function () {
                this._linesTopGeometry = new a.BufferGeometry;
                var t = []
                    , e = void 0;
                for (e = 0; e < 5; e++)
                    t.push(y[e].positionX, y[e].position, y[e].positionZ);
                for (this._linesTopGeometry.addAttribute("position", new a.BufferAttribute(new Float32Array(t), 3)),
                    this._linesBottomGeometry = new a.BufferGeometry,
                    t = [],
                    e = 4; e < y.length; e++)
                    t.push(y[e].positionX, y[e].position, y[e].positionZ);
                this._linesBottomGeometry.addAttribute("position", new a.BufferAttribute(new Float32Array(t), 3)),
                    m = this._linesTopGeometry.attributes.position,
                    v = m.array,
                    g = this._linesBottomGeometry.attributes.position,
                    _ = g.array
            }
            ,
            r.prototype._initOrbits = function () {
                y = [{
                    radius: .2,
                    position: .8,
                    rotationSpeed: -.011,
                    renderOrder: 21
                }, {
                    radius: .1,
                    position: .6,
                    rotationSpeed: .012,
                    renderOrder: 21
                }, {
                    radius: .4,
                    position: .4,
                    rotationSpeed: -.013,
                    renderOrder: 21
                }, {
                    radius: .7,
                    position: .2,
                    rotationSpeed: .014,
                    renderOrder: 21
                }, {
                    radius: 1,
                    position: 0,
                    rotationSpeed: -.015
                }, {
                    radius: .7,
                    position: -.2,
                    rotationSpeed: .016
                }, {
                    radius: .4,
                    position: -.4,
                    rotationSpeed: -.017
                }, {
                    radius: .1,
                    position: -.6,
                    rotationSpeed: .018
                }, {
                    radius: .2,
                    position: -.8,
                    rotationSpeed: -.019
                }];
                for (var t = 0; t < y.length; t++)
                    y[t].rotationAngle = 2 * Math.random() * Math.PI,
                        y[t].positionX = Math.cos(y[t].rotationAngle / 180 * Math.PI) * y[t].radius,
                        y[t].positionZ = Math.sin(y[t].rotationAngle / 180 * Math.PI) * y[t].radius
            }
            ,
            r.prototype._initPoints = function () {
                var t = new a.Points(this._linesTopGeometry, this._pointsMaterial);
                t.renderOrder = 21,
                    this.object3D.add(t);
                var e = new a.Points(this._linesBottomGeometry, this._pointsMaterial);
                e.renderOrder = -1,
                    this.object3D.add(e)
            }
            ,
            r.prototype.tick = function () {
                d.z -= .0026,
                    p.z -= .001,
                    f.z += .003;
                var t = void 0
                    , e = void 0
                    , i = void 0;
                for (t = 0; t < y.length; t++)
                    y[t].rotationAngle += y[t].rotationSpeed;
                for (t = 0; t < 5; t++)
                    e = y[t].rotationAngle,
                        i = y[t].radius,
                        v[3 * t] = Math.cos(e) * i,
                        v[3 * t + 2] = Math.sin(e) * i;
                for (t = 4; t < y.length; t++)
                    e = y[t].rotationAngle,
                        i = y[t].radius,
                        _[3 * t - 12] = Math.cos(e) * i,
                        _[3 * t - 10] = Math.sin(e) * i;
                m.needsUpdate = !0,
                    g.needsUpdate = !0
            }
            ,
            e.Galaxy = r
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            var e = o.default.intToFloatRGB(t.color)
                , i = t.alpha + "";
            i.match(/\./) || (i += ".0"),
                this.vertexShader = ["void main()", "{", "gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "}"].join(""),
                this.fragmentShader = ["const vec4 LINE_COLOR = vec4(" + e.r + ", " + e.g + ", " + e.b + ", " + i + ");", "void main()", "{", "gl_FragColor = LINE_COLOR;", "}"].join(""),
                this.transparent = !0
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var r = i(43)
            , o = function (t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }(r);
        e.default = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            return t && t.__esModule ? t : {
                default: t
            }
        }
        function r(t) {
            var e = h.default.intToFloatRGB(t.color)
                , i = t.pointSize + ""
                , n = t.alpha + "";
            i.match(/\./) || (i += ".0"),
                n.match(/\./) || (n += ".0"),
                this.uniforms = {
                    u_colorMapMask: {
                        value: a.default.circleMask(16)
                    }
                },
                this.vertexShader = ["void main()", "{", "gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "gl_PointSize = " + i + ";", "}"].join(""),
                this.fragmentShader = ["const vec3 POINT_COLOR = vec3(" + e.r + ", " + e.g + ", " + e.b + ");", "uniform sampler2D u_colorMapMask;", "void main()", "{", "vec4 color = texture2D(u_colorMapMask, gl_PointCoord);", "gl_FragColor = vec4(POINT_COLOR, color.r * " + n + ");", "}"].join(""),
                this.transparent = !0
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var o = i(133)
            , a = n(o)
            , s = i(43)
            , h = n(s);
        e.default = r
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            if (this.domElementStyle = t.domElement.style,
                this.rotational = !!t.rotational,
                this.rotational) {
                var e = t.domElement.querySelector(".rotational");
                this.rotationalElementOffsetLeft = e.offsetLeft,
                    this.rotationalElementOffsetTop = e.offsetTop,
                    this.rotationalElementStyle = e.style
            }
            this.object3D = new o.Object3D,
                this.object3D.visible = !1,
                this.object3D.translateX(t.position.x),
                this.object3D.translateY(t.position.y),
                this.object3D.translateZ(t.position.z),
                this.boundingSphere = new o.Sphere(new o.Vector3(t.position.x, t.position.y, t.position.z), t.boundingSphereRadius)
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.HTMLElementPosition = void 0;
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r);
        e.HTMLElementPosition = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            t = t || {},
                t.position = t.position || {
                    x: 0,
                    y: 0,
                    z: 0
                },
                t.axisRotation = t.axisRotation || {
                    x: 0,
                    y: 0,
                    z: 0
                },
                t.renderOrder = t.renderOrder || 0,
                this._rotationSpeed = t.rotationSpeed || 0;
            var e = t.radius
                , i = new o.SphereBufferGeometry(t.radius, 32, 32);
            i.computeBoundingSphere();
            var n = void 0;
            n = t.material ? t.material : new o.ShaderMaterial(new a.PlanetShader({
                colorMap: t.colorMap,
                glowColor: t.glowColor || null,
                shadeColor: t.shadeColor || null,
                transparent: !0,
                depthTest: !1,
                depthWrite: !1
            }));
            var r = new o.Mesh(i, n);
            r.renderOrder = t.renderOrder;
            var h = null;
            t.wireframeColor && (h = new s.PlanetWireframe({
                radius: 1.21 * t.radius,
                color: t.wireframeColor,
                alpha: .1,
                renderOrder: t.renderOrder + 1
            }),
                e *= 1.21),
                this.object3D = new o.Group,
                this.object3D.translateX(t.position.x),
                this.object3D.translateY(t.position.y),
                this.object3D.translateZ(t.position.z),
                this.object3D.rotateX(t.axisRotation.x),
                this.object3D.rotateY(t.axisRotation.y),
                this.object3D.rotateZ(t.axisRotation.z),
                this._planetRotation = r.rotation,
                this.object3D.add(r),
                h ? (this._wireframeRotation = h.object3D.rotation,
                    this.object3D.add(h.object3D),
                    this.tick = this._tickMeshAndWireframe) : this.tick = this._tickMesh,
                this.boundingSphere = new o.Sphere(new o.Vector3(t.position.x, t.position.y, t.position.z), e)
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.Planet = void 0;
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r)
            , a = i(134)
            , s = i(366);
        n.prototype._tickMesh = function () {
            this._planetRotation.y += this._rotationSpeed
        }
            ,
            n.prototype._tickMeshAndWireframe = function () {
                this._planetRotation.y += this._rotationSpeed,
                    this._wireframeRotation.y += .5 * this._rotationSpeed
            }
            ,
            e.Planet = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            return t && t.__esModule ? t : {
                default: t
            }
        }
        function r(t) {
            t = t || {},
                t.alpha = t.alpha || 1;
            var e = new a.IcosahedronGeometry(t.radius, 2);
            e.computeFlatVertexNormals();
            var i = new a.BufferGeometry;
            i.fromGeometry(e);
            var n = new a.ShaderMaterial(new h.default({
                color: t.color,
                alpha: t.alpha
            }));
            n.depthTest = !1,
                n.depthWrite = !1;
            var r = new a.ShaderMaterial(new c.default({
                color: t.color,
                pointSize: 9,
                alpha: t.alpha
            }));
            r.depthTest = !1,
                r.depthWrite = !1,
                this._lines = new a.Mesh(i, n),
                this._lines.renderOrder = t.renderOrder,
                this._points = new a.Points(i, r),
                this._points.renderOrder = t.renderOrder + 1,
                this.object3D = new a.Group,
                this.object3D.add(this._lines),
                this.object3D.add(this._points)
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.PlanetWireframe = void 0;
        var o = i(4)
            , a = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(o)
            , s = i(367)
            , h = n(s)
            , l = i(368)
            , c = n(l);
        e.PlanetWireframe = r
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            var e = o.default.intToFloatRGB(t.color)
                , i = t.alpha + "";
            i.match(/\./) || (i += ".0"),
                this.vertexShader = ["varying float v_dot;", "void main()", "{", "gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "v_dot = dot(normalize(cameraPosition - vec3(modelMatrix * vec4(position, 1.0))), normalMatrix * normal);", "}"].join(""),
                this.fragmentShader = ["const vec4 LINE_COLOR = vec4(" + e.r + ", " + e.g + ", " + e.b + ", " + i + ");", "varying float v_dot;", "void main()", "{", "if (v_dot < 0.0)", "{", "discard;", "}", "gl_FragColor = LINE_COLOR;", "}"].join(""),
                this.flatShading = !0,
                this.wireframe = !0,
                this.transparent = !0
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var r = i(43)
            , o = function (t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }(r);
        e.default = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            return t && t.__esModule ? t : {
                default: t
            }
        }
        function r(t) {
            var e = h.default.intToFloatRGB(t.color)
                , i = t.pointSize + ""
                , n = t.alpha + "";
            i.match(/\./) || (i += ".0"),
                n.match(/\./) || (n += ".0"),
                this.uniforms = {
                    u_colorMapMask: {
                        value: a.default.circleMask(16)
                    }
                },
                this.vertexShader = ["varying float v_dot;", "void main()", "{", "gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "gl_PointSize = " + i + ";", "v_dot = dot(normalize(cameraPosition - vec3(modelMatrix * vec4(position, 1.0))), normalMatrix * normal);", "}"].join(""),
                this.fragmentShader = ["const vec3 POINT_COLOR = vec3(" + e.r + ", " + e.g + ", " + e.b + ");", "uniform sampler2D u_colorMapMask;", "varying float v_dot;", "void main()", "{", "if (v_dot < 0.0)", "{", "discard;", "}", "vec4 color = texture2D(u_colorMapMask, gl_PointCoord);", "gl_FragColor = vec4(POINT_COLOR, color.r * " + n + ");", "}"].join(""),
                this.transparent = !0
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var o = i(133)
            , a = n(o)
            , s = i(43)
            , h = n(s);
        e.default = r
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            var e = new o.PlaneBufferGeometry(1.66, 1.66, 1, 1);
            t.uv && e.addAttribute("uv", new o.BufferAttribute(new Float32Array(t.uv), 2));
            var i = new o.MeshBasicMaterial({
                map: t.glowColorMap,
                transparent: !0
            });
            i.depthTest = !1,
                i.depthWrite = !1,
                this._glow = new o.Mesh(e, i),
                this._glow.renderOrder = 1,
                this.object3D = new o.Group,
                this.object3D.add(this._glow),
                this.object3D.translateX(t.position.x),
                this.object3D.translateY(t.position.y),
                this.object3D.translateZ(t.position.z),
                this.boundingSphere = new o.Sphere(new o.Vector3(t.position.x, t.position.y, t.position.z), .83),
                a = this._glow.rotation
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.PlanetMarsGlow = void 0;
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r)
            , a = null;
        n.prototype.tick = function () {
            a.z += .001
        }
            ,
            e.PlanetMarsGlow = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            var e = [.5, 1, 1, 1, .5, 0, 1, 0]
                , i = [0, 1, .5, 1, 0, 0, .5, 0]
                , n = new o.PlaneBufferGeometry(2.36, 2.36, 1, 1);
            n.addAttribute("uv", new o.BufferAttribute(new Float32Array(e), 2));
            var r = new o.PlaneBufferGeometry(1.9, 1.9, 1, 1);
            r.addAttribute("uv", new o.BufferAttribute(new Float32Array(i), 2));
            var h = new o.MeshBasicMaterial({
                map: t.colorMap,
                transparent: !0
            });
            h.depthTest = !1,
                h.depthWrite = !1;
            var l = new o.MeshBasicMaterial({
                map: t.colorMap,
                transparent: !0
            });
            l.depthTest = !1,
                l.depthWrite = !1,
                this._glow = new o.Mesh(n, h),
                this._glow.renderOrder = 1,
                this._dust = new o.Mesh(r, l),
                this._dust.renderOrder = 2,
                this.object3D = new o.Group,
                this.object3D.add(this._glow),
                this.object3D.add(this._dust),
                this.object3D.translateX(t.position.x),
                this.object3D.translateY(t.position.y),
                this.object3D.translateZ(t.position.z),
                this.boundingSphere = new o.Sphere(new o.Vector3(t.position.x, t.position.y, t.position.z), 1.18),
                a = this._glow.rotation,
                s = this._dust.rotation
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.PlanetMercuryGlow = void 0;
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r)
            , a = null
            , s = null;
        n.prototype.tick = function () {
            a.z += .001,
                s.z += 5e-4
        }
            ,
            e.PlanetMercuryGlow = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            var e = t.mesh;
            e.children[0].renderOrder = 1e3,
                e.scale.set(h - (h * 96 / 100), h - (h * 96 / 100), h - (h * 96 / 100)); ///////////////////////uaalo h: 0.006
            e.rotateY(Math.PI / 2)
            for (var i = 0; i < e.children[0].material.length; i++)
                e.children[0].material[i].transparent = !0;
            c = e.position,
                u = e.rotation,
                this.object3D = new o.Group,
                this.object3D.rotateX(s),
                this.object3D.add(e),
                f = this.object3D.scale,
                d = new a.SpaceshipEngine({
                    colorMap: t.flameColorMap
                }),
                d.object3D.translateZ(-.09),
                p = d.object3D.position,
                this.object3D.add(d.object3D)
        }

        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.Spaceship = void 0;
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r)
            , a = i(372)
            , s = Math.PI / 2
            , h = .008
            , l = 0
            , c = null
            , u = null
            , d = null
            , p = null
            , f = null;
        n.prototype.engineOn = function () {
            d.start()
        }
            ,
            n.prototype.engineOff = function () {
                d.stop()
            }
            ,
            n.prototype.setScale = function (t) {
                f.set(t, t, t),
                    d.setScale(t)
            }
            ,
            n.prototype.tick = function () {
                // rotate spaceship
                c.y += .024 * Math.sin(l),
                    // u.z += .012 * Math.sin(l - s),
                    l += .05,
                    p.y = c.y,
                    d.tick()
            }
            ,
            e.Spaceship = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            var e = []
                , i = []
                , n = []
                , r = .01 / (h - 1)
                , a = -Math.PI / 2
                , c = Math.PI / (h - 1);
            for (g = 0; g < h; g++) {
                var y = g * r - .005
                    , x = a + g * c
                    , b = 6 * (Math.cos(x + Math.PI) + 1) + 30
                    , w = b / (l - 1);
                for (_ = 0; _ < l; _++)
                    e.push(y, 0, 0),
                        i.push(b),
                        n.push(-_ * w - w),
                        u[g] = -w,
                        d[g] = g * l + _
            }
            var S = new o.BufferGeometry;
            S.addAttribute("position", new o.BufferAttribute(new Float32Array(e), 3)),
                S.addAttribute("a_steps", new o.BufferAttribute(new Float32Array(i), 1)),
                S.addAttribute("a_stepsPassed", new o.BufferAttribute(new Float32Array(n), 1)),
                s.default.uniforms = {
                    u_texture: {
                        value: t.colorMap
                    },
                    u_pointScale: {
                        value: 1
                    }
                };
            var E = new o.ShaderMaterial(s.default);
            this.object3D = new o.Points(S, E),
                p = this.object3D.material.uniforms.u_pointScale,
                f = S.attributes.a_steps.array,
                m = S.attributes.a_stepsPassed,
                v = m.array
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.SpaceshipEngine = void 0;
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r)
            , a = i(373)
            , s = function (t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }(a)
            , h = 5
            , l = 10
            , c = !1
            , u = []
            , d = []
            , p = null
            , f = null
            , m = null
            , v = null
            , g = 0
            , _ = 0
            , y = 0;
        n.prototype.setScale = function (t) {
            p.value = t
        }
            ,
            n.prototype.start = function () {
                c = !0
            }
            ,
            n.prototype.stop = function () {
                c = !1
            }
            ,
            n.prototype.tick = function () {
                if (c) {
                    for (g = 0; g < h; g++)
                        for (_ = 0; _ < l; _++)
                            y = g * l + _,
                                v[y] += 1,
                                v[y] > f[y] && (v[y] = v[d[g]] + u[g],
                                    d[g] = y);
                    m.needsUpdate = !0
                } else {
                    for (g = 0; g < h; g++)
                        for (_ = 0; _ < l; _++)
                            y = g * l + _,
                                v[y] >= 0 && (v[y] += 1),
                                v[y] > f[y] && (v[y] = v[d[g]] + u[g],
                                    d[g] = y);
                    m.needsUpdate = !0
                }
            }
            ,
            e.SpaceshipEngine = n
    }
    , function (t, e, i) {
        "use strict";
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var n = i(4)
            , r = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(n)
            , o = {
                vertexShader: ["uniform float u_pointScale;", "", "attribute float a_steps;", "attribute float a_stepsPassed;", "", "varying float v_stepsPassed;", "", "void main()", "{", "   float value = a_stepsPassed / a_steps;", "", "   gl_Position = projectionMatrix * modelViewMatrix * vec4(position.x, position.y, -value * 0.1, 1.0);", "   gl_PointSize = 40.0 * (1.0 - value) * u_pointScale;", "", "   v_stepsPassed = a_stepsPassed;", "}"].join("\n"),
                fragmentShader: ["uniform sampler2D u_texture;", "", "varying float v_stepsPassed;", "", "void main()", "{", "   if (v_stepsPassed < 0.0)", "   {", "       discard;", "   }", "", "   gl_FragColor = texture2D(u_texture, gl_PointCoord);", "}"].join("\n"),
                transparent: !0,
                depthTest: !1,
                depthWrite: !1,
                blending: r.AdditiveBlending
            };
        e.default = o
    }
    , function (t, e, i) {
        "use strict";
        function n(t, e) {
            if (!(t instanceof e))
                throw new TypeError("Cannot call a class as a function")
        }
        function r(t, e, i) {
            for (var n = [], r = 1 / e, o = 1 / t, a = 0; a < t; a++)
                for (var s = 0; s < e; s++)
                    n.push(s * r),
                        n.push(1 - a * o - o);
            return i && (n.length = n.length - 2 * i),
                n
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.Spaceship2 = void 0;
        var o = function () {
            function t(t, e) {
                for (var i = 0; i < e.length; i++) {
                    var n = e[i];
                    n.enumerable = n.enumerable || !1,
                        n.configurable = !0,
                        "value" in n && (n.writable = !0),
                        Object.defineProperty(t, n.key, n)
                }
            }
            return function (e, i, n) {
                return i && t(e.prototype, i),
                    n && t(e, n),
                    e
            }
        }()
            , a = i(4)
            , s = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(a)
            , h = i(135)
            , l = i(96)
            , c = 0
            , u = 0
            , d = Math.round(6)
            , p = null
            , f = null
            , m = null
            , v = null
            , g = null
            , _ = null
            , y = null
            , x = null
            , b = null
            , w = 0
            , S = 0
            , E = 0
            , T = 0
            , M = 0
            , A = function () {
                function t(e) {
                    n(this, t),
                        w = e.swingAmplitude || 0,
                        S = e.swingSpeed || 0;
                    var i = new s.PlaneBufferGeometry(e.width, e.height, 1, 1)
                        , o = new s.MeshBasicMaterial({
                            map: e.texture,
                            transparent: !0,
                            depthTest: !1,
                            depthWrite: !1
                        })
                        , a = new s.Mesh(i, o);
                    a.material.renderOrder = 1,
                        f = new l.FrameSequence({
                            width: .125 * e.width,
                            height: .0625 * e.height,
                            numberOfNumberOfVerticalFrames: 4,
                            numberOfHorizontalFrames: 1,
                            numberOfEmptyFrames: 0,
                            frameColorMap: e.framesBlueLights1,
                            rate: 1
                        }),
                        f.object3D.material.renderOrder = 10,
                        f.object3D.translateX(-.551538),
                        f.object3D.translateY(.030422),
                        m = new l.FrameSequence({
                            width: .0625 * e.width,
                            height: .0625 * e.height,
                            numberOfNumberOfVerticalFrames: 4,
                            numberOfHorizontalFrames: 2,
                            numberOfEmptyFrames: 4,
                            frameColorMap: e.framesBlueLights2,
                            rate: 1
                        }),
                        m.object3D.material.renderOrder = 10,
                        m.object3D.translateX(-.155948),
                        m.object3D.translateY(-.022544),
                        v = new l.FrameSequence({
                            width: .0625 * e.width,
                            height: .0625 * e.height,
                            numberOfNumberOfVerticalFrames: 4,
                            numberOfHorizontalFrames: 2,
                            numberOfEmptyFrames: 4,
                            frameColorMap: e.framesBlueLights2,
                            rate: 1
                        }),
                        v.object3D.material.renderOrder = 10,
                        v.object3D.translateX(-.495997),
                        v.object3D.translateY(.063314),
                        g = new l.FrameSequence({
                            width: .0625 * e.width,
                            height: .0625 * e.height,
                            numberOfNumberOfVerticalFrames: 4,
                            numberOfHorizontalFrames: 2,
                            numberOfEmptyFrames: 4,
                            frameColorMap: e.framesBlueLights2,
                            rate: 1
                        }),
                        g.object3D.material.renderOrder = 10,
                        g.object3D.translateX(-.137289),
                        g.object3D.translateY(.016397),
                        _ = new l.FrameSequence({
                            width: .03125 * e.width,
                            height: .0625 * e.height,
                            numberOfNumberOfVerticalFrames: 2,
                            numberOfHorizontalFrames: 2,
                            numberOfEmptyFrames: 0,
                            frameColorMap: e.framesBlueLights3,
                            rate: 1
                        }),
                        _.object3D.material.renderOrder = 10,
                        _.object3D.translateX(.130044),
                        _.object3D.translateY(-.059195),
                        y = new l.FrameSequence({
                            width: .03125 * e.width,
                            height: .0625 * e.height,
                            numberOfNumberOfVerticalFrames: 2,
                            numberOfHorizontalFrames: 2,
                            numberOfEmptyFrames: 0,
                            frameColorMap: e.framesBlueLights3,
                            rate: 1
                        }),
                        y.object3D.material.renderOrder = 10,
                        y.object3D.translateX(.1341),
                        y.object3D.translateY(-.021877),
                        x = new l.FrameSequence({
                            width: .03125 * e.width,
                            height: .0625 * e.height,
                            numberOfNumberOfVerticalFrames: 2,
                            numberOfHorizontalFrames: 2,
                            numberOfEmptyFrames: 0,
                            frameColorMap: e.framesBlueLights3,
                            rate: 1
                        }),
                        x.object3D.material.renderOrder = 10,
                        x.object3D.translateX(-.594404),
                        x.object3D.translateY(.078718),
                        b = new l.FrameSequence({
                            width: .03125 * e.width,
                            height: .0625 * e.height,
                            numberOfNumberOfVerticalFrames: 2,
                            numberOfHorizontalFrames: 2,
                            numberOfEmptyFrames: 0,
                            frameColorMap: e.framesBlueLights3,
                            rate: 1
                        }),
                        b.object3D.material.renderOrder = 10,
                        b.object3D.translateX(.012412),
                        b.object3D.translateY(-.004841);
                    var c = [-.922332, .117531, 0, -.686099, .283901, 0, -.665969, .231799, 0, -.655904, .151871, 0, -.675442, .013328, 0, -.712742, -.069561, 0, -.758923, -.119294, 0, -.349807, .301663, 0, -.315468, .213445, 0, -.308363, .100361, 0, -.325533, -.032853, 0, -.37645, -.166067, 0, -.444537, -.245403, 0, -.268103, .285085, 0, -.233763, .198052, 0, -.223698, .083784, 0, -.243828, -.049431, 0, -.294746, -.177908, 0, -.360465, -.261981, 0, .050427, .25489, 0, .082398, .163712, 0, .091871, .051812, 0, .072333, -.081994, 0, .022008, -.212248, 0, -.043119, -.295137, 0, .36422, .214037, 0, .402112, .127596, 0, .417506, .011552, 0, .40152, -.120478, 0, .351787, -.251324, 0, .284292, -.333621, 0, .631832, -.23001, 0, .753797, -.055351, 0, .763862, -.124622, 0, .738404, -.19863, 0, .85504, -.070153, 0, .870434, -.140016, 0, .843199, -.214024, 0, .568185, -.252964, 0]
                        , u = new s.BufferGeometry;
                    u.addAttribute("position", new s.BufferAttribute(new Float32Array(c), 3));
                    var d = new s.ShaderMaterial(new h.RedLightsShader({
                        texture: e.framesRedLights,
                        frameOffsets: r(4, 4, 8)
                    }))
                        , M = new s.Points(u, d);
                    this.object3D = new s.Group,
                        this.object3D.translateX(e.position.x),
                        this.object3D.translateZ(e.position.z),
                        this.object3D.translateY(e.position.y),
                        this.object3D.rotateZ(e.rotation || 0),
                        this.object3D.add(a),
                        this.object3D.add(f.object3D),
                        this.object3D.add(m.object3D),
                        this.object3D.add(v.object3D),
                        this.object3D.add(g.object3D),
                        this.object3D.add(_.object3D),
                        this.object3D.add(y.object3D),
                        this.object3D.add(x.object3D),
                        this.object3D.add(b.object3D),
                        this.object3D.add(M);
                    var A = Math.sqrt(e.width * e.width + e.height * e.height) / 2 + w;
                    this.boundingSphere = new s.Sphere(new s.Vector3(e.position.x, e.position.y, e.position.z), A),
                        p = d.uniforms.u_frameIndex,
                        T = this.object3D.position,
                        E = T.y
                }
                return o(t, [{
                    key: "tick",
                    value: function () {
                        c === d && (c = 0,
                            u++,
                            u >= d && (u = 0),
                            p.value = u,
                            p.needsUpdate = !0),
                            c++,
                            f.tick(),
                            m.tick(),
                            v.tick(),
                            g.tick(),
                            _.tick(),
                            y.tick(),
                            x.tick(),
                            b.tick(),
                            M += S,
                            T.y = E + Math.sin(M) * w
                    }
                }]),
                    t
            }();
        e.Spaceship2 = A
    }
    , function (t, e, i) {
        "use strict";
        function n(t, e) {
            if (!(t instanceof e))
                throw new TypeError("Cannot call a class as a function")
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var r = function t(e) {
            n(this, t),
                this.uniforms = {
                    u_frameColorMap: {
                        value: e.frameColorMap
                    },
                    u_colorMap: {
                        value: e.colorMap
                    },
                    u_uvs: {
                        value: e.uvs
                    },
                    u_frameIndex: {
                        value: 0
                    }
                },
                this.vertexShader = ["uniform float u_uvs[" + e.uvs.length + "];", "uniform int u_frameIndex;", "attribute float a_vertexIndex;", "varying vec2 v_frameColorMapUv;", function (t) {
                    return t ? "varying vec2 v_colorMapUv;" : ""
                }(e.colorMap), "void main()", "{", "   gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "   v_frameColorMapUv = vec2(u_uvs[u_frameIndex * 8 + int(a_vertexIndex) * 2], u_uvs[u_frameIndex * 8 + int(a_vertexIndex) * 2 + 1]);", function (t) {
                    return t ? "   v_colorMapUv = uv;" : ""
                }(e.colorMap), "}"].join("\n"),
                this.fragmentShader = ["uniform sampler2D u_frameColorMap;", function (t) {
                    return t ? "uniform sampler2D u_colorMap;" : ""
                }(e.colorMap), "varying vec2 v_frameColorMapUv;", function (t) {
                    return t ? "varying vec2 v_colorMapUv;" : ""
                }(e.colorMap), "void main()", "{", function (t) {
                    return t ? ["   vec4 frameColorMap = texture2D(u_frameColorMap, v_frameColorMapUv);", "   gl_FragColor = mix(texture2D(u_colorMap, v_colorMapUv), frameColorMap, frameColorMap.a);"].join("\n") : "    gl_FragColor = texture2D(u_frameColorMap, v_frameColorMapUv);"
                }(e.colorMap), "}"].join("\n"),
                this.transparent = e.transparent,
                this.depthTest = e.depthTest,
                this.depthWrite = e.depthTest
        };
        e.default = r
    }
    , function (t, e, i) {
        "use strict";
        function n(t, e) {
            if (!(t instanceof e))
                throw new TypeError("Cannot call a class as a function")
        }
        function r(t, e, i) {
            for (var n = [], r = 1 / e, o = 1 / t, a = 0; a < t; a++)
                for (var s = 0; s < e; s++)
                    n.push(s * r),
                        n.push(1 - a * o - o);
            return i && (n.length = n.length - 2 * i),
                n
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.Spaceship3 = void 0;
        var o = function () {
            function t(t, e) {
                for (var i = 0; i < e.length; i++) {
                    var n = e[i];
                    n.enumerable = n.enumerable || !1,
                        n.configurable = !0,
                        "value" in n && (n.writable = !0),
                        Object.defineProperty(t, n.key, n)
                }
            }
            return function (e, i, n) {
                return i && t(e.prototype, i),
                    n && t(e, n),
                    e
            }
        }()
            , a = i(4)
            , s = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(a)
            , h = i(135)
            , l = i(96)
            , c = 0
            , u = 0
            , d = Math.round(6)
            , p = null
            , f = null
            , m = null
            , v = null
            , g = 0
            , _ = 0
            , y = 0
            , x = 0
            , b = 0
            , w = function () {
                function t(e) {
                    n(this, t),
                        g = e.swingAmplitude || 0,
                        _ = e.swingSpeed || 0;
                    var i = new s.PlaneBufferGeometry(e.width, e.height, 1, 1)
                        , o = new s.MeshBasicMaterial({
                            map: e.texture,
                            transparent: !0,
                            depthTest: !1,
                            depthWrite: !1
                        })
                        , a = new s.Mesh(i, o);
                    a.material.renderOrder = 1,
                        f = new l.FrameSequence({
                            width: .25 * e.width,
                            height: .5 * e.height,
                            numberOfNumberOfVerticalFrames: 2,
                            numberOfHorizontalFrames: 2,
                            numberOfEmptyFrames: 0,
                            frameColorMap: e.framesBlueLights1,
                            rate: 10
                        }),
                        f.object3D.material.renderOrder = 10,
                        f.object3D.translateX(-.271957),
                        f.object3D.translateY(.200463),
                        m = new l.FrameSequence({
                            width: .03125 * e.width,
                            height: .0625 * e.height,
                            numberOfNumberOfVerticalFrames: 2,
                            numberOfHorizontalFrames: 2,
                            numberOfEmptyFrames: 0,
                            frameColorMap: e.framesBlueLights2,
                            rate: 10
                        }),
                        m.object3D.material.renderOrder = 10,
                        m.object3D.translateX(-.721666),
                        m.object3D.translateY(.310443),
                        v = new l.FrameSequence({
                            width: .0625 * e.width,
                            height: .0625 * e.height,
                            numberOfNumberOfVerticalFrames: 2,
                            numberOfHorizontalFrames: 2,
                            numberOfEmptyFrames: 0,
                            frameColorMap: e.framesBlueLights3,
                            rate: 10
                        }),
                        v.object3D.material.renderOrder = 10,
                        v.object3D.translateX(.496459),
                        v.object3D.translateY(.063972);
                    var c = [-.791609, .344912, 0, -.791609, .31449, 0, -.525924, .555837, 0, -.490094, .47674, 0, -.397476, .589639, 0, -.312295, .524739, 0, .524307, .201366, 0, .557545, .196296, 0, .590221, .190662, 0, .478674, .167, 0, .513603, .159329, 0, .544588, .152916, 0]
                        , u = new s.BufferGeometry;
                    u.addAttribute("position", new s.BufferAttribute(new Float32Array(c), 3));
                    var d = new s.ShaderMaterial(new h.RedLightsShader({
                        texture: e.framesRedLights,
                        frameOffsets: r(4, 4, 8)
                    }))
                        , b = new s.Points(u, d);
                    this.object3D = new s.Group,
                        this.object3D.translateX(e.position.x),
                        this.object3D.translateZ(e.position.z),
                        this.object3D.translateY(e.position.y),
                        this.object3D.rotateZ(e.rotation || 0),
                        this.object3D.add(a),
                        this.object3D.add(f.object3D),
                        this.object3D.add(m.object3D),
                        this.object3D.add(v.object3D),
                        this.object3D.add(b);
                    var w = Math.sqrt(e.width * e.width + e.height * e.height) / 2 + g;
                    this.boundingSphere = new s.Sphere(new s.Vector3(e.position.x, e.position.y, e.position.z), w),
                        p = d.uniforms.u_frameIndex,
                        x = this.object3D.position,
                        y = x.y
                }
                return o(t, [{
                    key: "tick",
                    value: function () {
                        c === d && (c = 0,
                            u++,
                            u >= d && (u = 0),
                            p.value = u,
                            p.needsUpdate = !0),
                            c++,
                            f.tick(),
                            m.tick(),
                            v.tick(),
                            b += _,
                            x.y = y + Math.sin(b) * g
                    }
                }]),
                    t
            }();
        e.Spaceship3 = w
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            h = t.minPointerValue,
                l = t.maxPointerValue,
                d = new o.SplineCurve([new o.Vector2(-4.30345, 4.7045), new o.Vector2(-4.30345, 4.07421), new o.Vector2(-4.30345, 3.44391), new o.Vector2(-4.25934, 2.81516), new o.Vector2(-4.07691, 2.21184), new o.Vector2(-3.7517, 1.67192), new o.Vector2(-3.3346, 1.19937), new o.Vector2(-2.84699, .799986), new o.Vector2(-2.29802, .490295), new o.Vector2(-1.69391, .310489), new o.Vector2(-1.06469, .273648), new o.Vector2(-.442831, .37645), new o.Vector2(.145004, .603884), new o.Vector2(.699445, .90367), new o.Vector2(1.25839, 1.19495), new o.Vector2(1.85644, 1.39398), new o.Vector2(2.4847, 1.4447), new o.Vector2(3.10891, 1.35728), new o.Vector2(3.67861, 1.08762), new o.Vector2(4.10869, .626858), new o.Vector2(4.3046, .027778), new o.Vector2(4.25161, -.600288), new o.Vector2(3.9547, -1.15627), new o.Vector2(3.53354, -1.6252), new o.Vector2(3.03371, -2.00919), new o.Vector2(2.47945, -2.30931), new o.Vector2(1.86817, -2.46298), new o.Vector2(1.24638, -2.56614), new o.Vector2(.633243, -2.71224), new o.Vector2(.035604, -2.91251), new o.Vector2(-.53653, -3.17697), new o.Vector2(-1.01763, -3.58417), new o.Vector2(-1.25066, -4.16981), new o.Vector2(-1.33387, -4.79459)]),
                this.pointer = h,
                this.pointerPosition = d.getPoint(this.pointer),
                this.pointerRotationY = 0,
                this.pointerMinMaxValue = !0,
                this.normal = {
                    x: 0,
                    y: -1
                }
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.SpaceshipPath = void 0;
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r)
            , a = Math.PI
            , s = 3 * Math.PI / 2
            , h = 0
            , l = 0
            , c = null
            , u = null
            , d = null
            , p = 0
            , f = 0
            , m = 1
            , v = 0;
        n.prototype.getPositionAt = function (t) {
            return d.getPoint(t)
        }
            ,
            n.prototype.setPointer = function (t) {
                c = this.pointer,
                    u = d.getPoint(c),
                    t >= l ? (this.pointer = l,
                        this.pointerMinMaxValue = !0) : t <= h ? (this.pointer = h,
                            this.pointerMinMaxValue = !0,
                            this.normal.x = 0,
                            this.normal.y = -1) : (this.pointer = t,
                                this.pointerMinMaxValue = !1),
                    this.pointerPosition = d.getPoint(this.pointer),
                    this.pointer !== c && (p = this.pointerPosition.x - u.x,
                        f = this.pointerPosition.y - u.y,
                        m = Math.sqrt(p * p + f * f),
                        this.normal.x = p / m,
                        this.normal.y = f / m,
                        0 === p ? (this.normal.x = 0,
                            t < 0 && (v = -s,
                                this.normal.y = 1),
                            t > 0 && (v = s,
                                this.normal.y = -1)) : (v = Math.atan(Math.abs(f / p)),
                                    p < 0 && f > 0 && (v = a - v),
                                    p < 0 && f < 0 && (v = a + v),
                                    p > 0 && f < 0 && (v = -v)),
                        this.pointerRotationY = v - s)
            }
            ,
            n.prototype.invertRotation = function () {
                this.pointerRotationY += a,
                    this.normal.x = -this.normal.x,
                    this.normal.y = -this.normal.y
            }
            ,
            e.SpaceshipPath = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            if (this._rotationSpeed = t.rotationSpeed || 0,
                this._swingAmplitude = t.swingAmplitude || 0,
                this._swingSpeed = t.swingSpeed || 0,
                t.material) {
                var e = new o.PlaneBufferGeometry(t.width, t.height, 1, 1);
                t.uv && e.addAttribute("uv", new o.BufferAttribute(new Float32Array(t.uv), 2)),
                    this.object3D = new o.Mesh(e, t.material)
            } else
                this._frameSequence = new a.FrameSequence({
                    colorMap: t.frames.colorMap,
                    frameColorMap: t.frames.frameColorMap,
                    width: t.width,
                    height: t.height,
                    numberOfNumberOfVerticalFrames: t.frames.numberOfNumberOfVerticalFrames,
                    numberOfHorizontalFrames: t.frames.numberOfHorizontalFrames,
                    numberOfEmptyFrames: t.frames.numberOfEmptyFrames,
                    rate: t.frames.rate
                }),
                    this.object3D = this._frameSequence.object3D;
            this.object3D.translateX(t.position.x),
                this.object3D.translateZ(t.position.z),
                this.object3D.translateY(t.position.y),
                this.object3D.rotateZ(t.rotation || 0),
                this.object3D.renderOrder = t.renderOrder || 0,
                0 !== this._rotationSpeed && 0 !== this._swingAmplitude && 0 !== this._swingSpeed ? this.tick = this._frameSequence ? this._tickSwingAndRotateAndAnimate : this._tickSwingAndRotate : 0 === this._rotationSpeed || 0 !== this._swingAmplitude && 0 !== this._swingSpeed ? 0 === this._rotationSpeed && 0 !== this._swingAmplitude && 0 !== this._swingSpeed && (this.tick = this._frameSequence ? this._tickSwingAndAnimate : this._tickSwing) : this.tick = this._frameSequence ? this._tickRotateAndAnimate : this._tickRotate,
                this._swingY = 0,
                this._positionY = this.object3D.position.y,
                0 !== this._rotationSpeed && (this.object3D.rotation.z += Math.random() * Math.PI * 2),
                0 !== this._swingAmplitude && 0 !== this._swingSpeed && (this.object3D.position.y = this._positionY + Math.sin(Math.random() * Math.PI * 2) * this._swingAmplitude);
            var i = Math.sqrt(t.width * t.width + t.height * t.height) / 2 + this._swingAmplitude;
            this.boundingSphere = new o.Sphere(new o.Vector3(t.position.x, t.position.y, t.position.z), i),
                this._object3DPosition = this.object3D.position,
                this._object3DRotation = this.object3D.rotation
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.Sprite = void 0;
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r)
            , a = i(96);
        n.prototype._tickRotate = function () {
            this._object3DRotation.z += this._rotationSpeed
        }
            ,
            n.prototype._tickRotateAndAnimate = function () {
                this._object3DRotation.z += this._rotationSpeed,
                    this._frameSequence.tick()
            }
            ,
            n.prototype._tickSwing = function () {
                this._swingY += this._swingSpeed,
                    this._object3DPosition.y = this._positionY + Math.sin(this._swingY) * this._swingAmplitude
            }
            ,
            n.prototype._tickSwingAndAnimate = function () {
                this._swingY += this._swingSpeed,
                    this._object3DPosition.y = this._positionY + Math.sin(this._swingY) * this._swingAmplitude,
                    this._frameSequence.tick()
            }
            ,
            n.prototype._tickSwingAndRotate = function () {
                this._object3DRotation.z += this._rotationSpeed,
                    this._swingY += this._swingSpeed,
                    this._object3DPosition.y = this._positionY + Math.sin(this._swingY) * this._swingAmplitude
            }
            ,
            n.prototype._tickSwingAndRotateAndAnimate = function () {
                this._object3DRotation.z += this._rotationSpeed,
                    this._swingY += this._swingSpeed,
                    this._object3DPosition.y = this._positionY + Math.sin(this._swingY) * this._swingAmplitude,
                    this._frameSequence.tick()
            }
            ,
            e.Sprite = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            var e = t.mesh;
            e.scale.set(.07, .07, .07),
                e.translateY(1),
                e.renderOrder = -1,
                e.children[0].material = new o.MeshStandardMaterial({
                    metalness: 1,
                    emissive: 16777215,
                    emissiveIntensity: .1
                });
            var i = new o.Group;
            i.translateX(t.position.x),
                i.translateY(t.position.y),
                i.translateZ(t.position.z),
                i.add(e),
                this.boundingSphere = new o.Sphere(new o.Vector3(t.position.x, t.position.y, t.position.z), Math.sqrt(.07 * .07 + .07 * .07) / 2 + 1);
            var n = new o.PointLight(5817087, 8, 1);
            n.translateY(.3),
                n.translateZ(.3),
                i.add(n),
                this.object3D = i,
                a = e.rotation,
                s = i.rotation
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.Sputnik = void 0;
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r)
            , a = null
            , s = null;
        n.prototype.tick = function () {
            s.z += .004,
                a.x += .005
        }
            ,
            e.Sputnik = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t, e) {
            if (!(t instanceof e))
                throw new TypeError("Cannot call a class as a function")
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.Starcloud = void 0;
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r)
            , a = function t(e) {
                n(this, t);
                var i = new o.PlaneBufferGeometry(2, 2, 1, 1)
                    , r = i.clone()
                    , a = i.clone();
                i.addAttribute("uv", new o.BufferAttribute(new Float32Array(e.uvs[0]), 2)),
                    r.addAttribute("uv", new o.BufferAttribute(new Float32Array(e.uvs[1]), 2)),
                    a.addAttribute("uv", new o.BufferAttribute(new Float32Array(e.uvs[2]), 2));
                var s = new o.Mesh(i, e.material);
                s.translateZ(e.positions[0].z),
                    s.renderOrder = -30;
                var h = new o.Mesh(r, e.material);
                h.translateZ(e.positions[1].z),
                    h.renderOrder = -20;
                var l = new o.Mesh(a, e.material);
                l.translateZ(e.positions[2].z),
                    l.renderOrder = -10,
                    this.object3D = new o.Group,
                    this.object3D.translateX(e.position.x),
                    this.object3D.translateZ(e.position.z),
                    this.object3D.translateY(e.position.y),
                    this.object3D.add(s),
                    this.object3D.add(h),
                    this.object3D.add(l);
                var c = Math.sqrt(8) / 2;
                this.boundingSphere = new o.Sphere(new o.Vector3(e.position.x, e.position.y, e.position.z), c)
            };
        e.Starcloud = a
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            for (var e = [], i = [], n = [], r = 0; r < 3e3; r++) {
                var a = o.Math.randFloatSpread(2e3)
                    , h = o.Math.randFloatSpread(2e3)
                    , l = o.Math.randFloatSpread(2e3)
                    , c = this._getVectorLength(a, h, l);
                c <= 1e3 && c >= 200 && e.push({
                    x: a,
                    y: h,
                    z: l
                })
            }
            var u = this;
            e.sort(function (t, e) {
                return u._getVectorLength(e.x, e.y, e.z) - u._getVectorLength(t.x, t.y, t.z)
            });
            for (var d = 0; d < e.length; d++)
                i.push(e[d].x, e[d].y, e[d].z);
            for (var p = this._getVectorLength(i[0], i[1], i[2]), f = p, m = null, v = 3; v < i.length; v += 3)
                m = this._getVectorLength(i[v], i[v + 1], i[v + 2]),
                    m < p ? p = m : m > f && (f = m);
            for (var g = [0, .5, .5, .5, 0, 0], _ = 0; _ < i.length; _ += 3) {
                m = this._getVectorLength(i[_], i[_ + 1], i[_ + 2]);
                var y = (m - p) / (f - p)
                    , x = 3 * Math.random() | 0;
                n.push(g[2 * x], g[2 * x + 1], (1 - y) * (12 - 12 * .4) + 12 * .4)
            }
            var b = new o.BufferGeometry;
            b.addAttribute("position", new o.BufferAttribute(new Float32Array(i), 3)),
                b.addAttribute("a_parameters", new o.BufferAttribute(new Float32Array(n), 3));
            var w = new o.ShaderMaterial({
                uniforms: {
                    u_stars: {
                        value: t.colorMap
                    }
                },
                vertexShader: s.default.vertexShader,
                fragmentShader: s.default.fragmentShader,
                transparent: !0,
                depthTest: !1,
                depthWrite: !1
            });
            this.object3D = new o.Points(b, w),
                this.object3D.renderOrder = 1
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.StarField = void 0;
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r)
            , a = i(382)
            , s = function (t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }(a);
        n.prototype._getVectorLength = function (t, e, i) {
            return Math.sqrt(t * t + e * e + i * i)
        }
            ,
            e.StarField = n
    }
    , function (t, e, i) {
        "use strict";
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var n = {
            vertexShader: ["attribute vec3 a_parameters;", "varying vec2 v_colorOffset;", "void main()", "{", "   gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "   gl_PointSize = a_parameters[2];", "   v_colorOffset = vec2(a_parameters[0], a_parameters[1]);", "}"].join(""),
            fragmentShader: ["uniform sampler2D u_stars;", "varying vec2 v_colorOffset;", "void main()", "{", "   gl_FragColor = texture2D(u_stars, vec2(gl_PointCoord.x * 0.5 + v_colorOffset.x, gl_PointCoord.y * 0.5 + v_colorOffset.y));", "}"].join("")
        };
        e.default = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            var e = new o.SphereBufferGeometry(.779, 32, 32)
                , i = new o.MeshBasicMaterial({
                    map: t.colorMap
                });
            i.depthTest = !1,
                i.depthWrite = !1;
            var n = new o.Mesh(e, i);
            this.object3D = new o.Group,
                this.object3D.translateX(t.position.x),
                this.object3D.translateY(t.position.y),
                this.object3D.translateZ(t.position.z),
                a = n.rotation,
                this.object3D.add(n),
                this.boundingSphere = new o.Sphere(new o.Vector3(t.position.x, t.position.y, t.position.z), .779)
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.Sun = void 0;
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r)
            , a = null;
        n.prototype.tick = function () {
            a.y += 24e-5
        }
            ,
            e.Sun = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            var e = new o.BoxBufferGeometry(1, 1, 1)
                , i = new o.MeshBasicMaterial({
                    map: t.colorMapLeft,
                    side: o.BackSide
                });
            i.depthTest = !1,
                i.depthWrite = !1;
            var n = new o.MeshBasicMaterial({
                map: t.colorMapRight,
                side: o.BackSide
            });
            n.depthTest = !1,
                n.depthWrite = !1;
            var r = new o.MeshBasicMaterial({
                map: t.colorMapTop,
                side: o.BackSide
            });
            r.depthTest = !1,
                r.depthWrite = !1;
            var a = new o.MeshBasicMaterial({
                map: t.colorMapBottom,
                side: o.BackSide
            });
            a.depthTest = !1,
                a.depthWrite = !1;
            var s = new o.MeshBasicMaterial({
                map: t.colorMapFront,
                side: o.BackSide
            });
            s.depthTest = !1,
                s.depthWrite = !1;
            var h = new o.MeshBasicMaterial({
                map: t.colorMapBack,
                side: o.BackSide
            });
            h.depthTest = !1,
                h.depthWrite = !1;
            var l = [i, n, r, a, s, h];
            this.object3D = new o.Mesh(e, l)
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.Universe = void 0;
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r);
        e.Universe = n
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            return t && t.__esModule ? t : {
                default: t
            }
        }
        function r() {
            h.default.call(this),
                this._assetType = {
                    AUDIO: "AUDIO",
                    IMAGE: "IMAGE",
                    OBJECT: "OBJECT"
                },
                this._assets = [],
                this._loadProgressChangeEvent = new c.default(c.default.LOAD_PROGRESS_CHANGE),
                this._loadProgressChangeEvent.progress = 0
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var o = i(4)
            , a = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(o)
            , s = i(136)
            , h = n(s)
            , l = i(68)
            , c = n(l)
            , u = i(386)
            , d = n(u)
            , p = i(387)
            , f = n(p);
        r.prototype = Object.create(h.default.prototype),
            r.prototype.constructor = r,
            r.prototype._addAsset = function (t, e, i) {
                for (var n = 0; n < this._assets.length; n++)
                    if (this._assets[n].name === e)
                        return;
                this._assets.push({
                    type: t,
                    name: e,
                    url: i,
                    data: null
                })
            }
            ,
            r.prototype._dispatchLoadProgressChangeEvent = function () {
                for (var t = 0, e = 0; e < this._assets.length; e++)
                    this._assets[e].data && t++;
                this._loadProgressChangeEvent.progress = Math.round(t / this._assets.length * 100),
                    this.dispatchEvent(this._loadProgressChangeEvent)
            }
            ,
            r.prototype._loadAudio = function (t) {
                var e = this;
                this._assets[t].audio = new Audio,
                    this._assets[t].audio.preload = "auto",
                    this._assets[t].audio.addEventListener("canplaythrough", function (i) {
                        e._assets[t].data = e._assets[t].url,
                            e._dispatchLoadProgressChangeEvent(),
                            e.isLoaded() && e.dispatchEvent(new c.default(c.default.LOAD))
                    }, !1),
                    this._assets[t].audio.src = this._assets[t].url
            }
            ,
            r.prototype._loadImage = function (t) {
                var e = this;
                (new a.TextureLoader).load(e._assets[t].url, function (i) {
                    e._assets[t].data = i,
                        e._dispatchLoadProgressChangeEvent(),
                        e.isLoaded() && e.dispatchEvent(new c.default(c.default.LOAD))
                }, void 0, function (t) {
                    e.dispatchEvent(new c.default(c.default.ERROR))
                })
            }
            ,
            r.prototype._loadObject = function (t) {
                var e = this
                    , i = new f.default
                    , n = new d.default;
                e._assets[t].mtlUrl ? n.load(e._assets[t].mtlUrl, function (n) {
                    n.preload(),
                        i.setMaterials(n),
                        i.load(e._assets[t].objUrl, function (i) {
                            e._assets[t].data = i,
                                e._dispatchLoadProgressChangeEvent(),
                                e.isLoaded() && e.dispatchEvent(new c.default(c.default.LOAD))
                        }, void 0, function (t) {
                            e.dispatchEvent(new c.default(c.default.ERROR))
                        })
                }) : i.load(e._assets[t].objUrl, function (i) {
                    e._assets[t].data = i,
                        e._dispatchLoadProgressChangeEvent(),
                        e.isLoaded() && e.dispatchEvent(new c.default(c.default.LOAD))
                }, void 0, function (t) {
                    e.dispatchEvent(new c.default(c.default.ERROR))
                })
            }
            ,
            r.prototype.addAudioAsset = function (t, e) {
                for (var i = 0; i < this._assets.length; i++)
                    if (this._assets[i].name === t)
                        return;
                this._assets.push({
                    type: this._assetType.AUDIO,
                    name: t,
                    url: e,
                    data: null
                })
            }
            ,
            r.prototype.addImageAsset = function (t, e) {
                for (var i = 0; i < this._assets.length; i++)
                    if (this._assets[i].name === t)
                        return;
                this._assets.push({
                    type: this._assetType.IMAGE,
                    name: t,
                    url: e,
                    data: null
                })
            }
            ,
            r.prototype.addObjectAsset = function (t, e, i) {
                for (var n = 0; n < this._assets.length; n++)
                    if (this._assets[n].name === t)
                        return;
                this._assets.push({
                    type: this._assetType.OBJECT,
                    name: t,
                    objUrl: e,
                    mtlUrl: i,
                    data: null
                })
            }
            ,
            r.prototype.getAsset = function (t) {
                for (var e = 0; e < this._assets.length; e++)
                    if (this._assets[e].name === t)
                        return this._assets[e].data;
                return null
            }
            ,
            r.prototype.isLoaded = function () {
                for (var t = 0; t < this._assets.length; t++)
                    if (!this._assets[t].data)
                        return !1;
                return !0
            }
            ,
            r.prototype.load = function () {
                this.dispatchEvent(this._loadProgressChangeEvent);
                for (var t = 0; t < this._assets.length; t++) {
                    var e = this._assets[t];
                    e.type === this._assetType.AUDIO ? this._loadAudio(t) : e.type === this._assetType.IMAGE ? this._loadImage(t) : e.type === this._assetType.OBJECT && this._loadObject(t)
                }
            }
            ,
            e.default = r
    }
    , function (t, e, i) {
        "use strict";
        function n(t) {
            this.manager = void 0 !== t ? t : o.DefaultLoadingManager
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var r = i(4)
            , o = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(r);
        n.prototype = {
            constructor: n,
            load: function (t, e, i, n) {
                var r = this
                    , a = new o.FileLoader(this.manager);
                a.setPath(this.path),
                    a.load(t, function (t) {
                        e(r.parse(t))
                    }, i, n)
            },
            setPath: function (t) {
                this.path = t
            },
            setTexturePath: function (t) {
                this.texturePath = t
            },
            setBaseUrl: function (t) {
                console.warn("MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead."),
                    this.setTexturePath(t)
            },
            setCrossOrigin: function (t) {
                this.crossOrigin = t
            },
            setMaterialOptions: function (t) {
                this.materialOptions = t
            },
            parse: function (t) {
                for (var e = t.split("\n"), i = {}, r = /\s+/, o = {}, a = 0; a < e.length; a++) {
                    var s = e[a];
                    if (s = s.trim(),
                        0 !== s.length && "#" !== s.charAt(0)) {
                        var h = s.indexOf(" ")
                            , l = h >= 0 ? s.substring(0, h) : s;
                        l = l.toLowerCase();
                        var c = h >= 0 ? s.substring(h + 1) : "";
                        if (c = c.trim(),
                            "newmtl" === l)
                            i = {
                                name: c
                            },
                                o[c] = i;
                        else if (i)
                            if ("ka" === l || "kd" === l || "ks" === l) {
                                var u = c.split(r, 3);
                                i[l] = [parseFloat(u[0]), parseFloat(u[1]), parseFloat(u[2])]
                            } else
                                i[l] = c
                    }
                }
                var d = new n.MaterialCreator(this.texturePath || this.path, this.materialOptions);
                return d.setCrossOrigin(this.crossOrigin),
                    d.setManager(this.manager),
                    d.setMaterials(o),
                    d
            }
        },
            n.MaterialCreator = function (t, e) {
                this.baseUrl = t || "",
                    this.options = e,
                    this.materialsInfo = {},
                    this.materials = {},
                    this.materialsArray = [],
                    this.nameLookup = {},
                    this.side = this.options && this.options.side ? this.options.side : o.FrontSide,
                    this.wrap = this.options && this.options.wrap ? this.options.wrap : o.RepeatWrapping
            }
            ,
            n.MaterialCreator.prototype = {
                constructor: n.MaterialCreator,
                crossOrigin: "Anonymous",
                setCrossOrigin: function (t) {
                    this.crossOrigin = t
                },
                setManager: function (t) {
                    this.manager = t
                },
                setMaterials: function (t) {
                    this.materialsInfo = this.convert(t),
                        this.materials = {},
                        this.materialsArray = [],
                        this.nameLookup = {}
                },
                convert: function (t) {
                    if (!this.options)
                        return t;
                    var e = {};
                    for (var i in t) {
                        var n = t[i]
                            , r = {};
                        e[i] = r;
                        for (var o in n) {
                            var a = !0
                                , s = n[o]
                                , h = o.toLowerCase();
                            switch (h) {
                                case "kd":
                                case "ka":
                                case "ks":
                                    this.options && this.options.normalizeRGB && (s = [s[0] / 255, s[1] / 255, s[2] / 255]),
                                        this.options && this.options.ignoreZeroRGBs && 0 === s[0] && 0 === s[1] && 0 === s[2] && (a = !1)
                            }
                            a && (r[h] = s)
                        }
                    }
                    return e
                },
                preload: function () {
                    for (var t in this.materialsInfo)
                        this.create(t)
                },
                getIndex: function (t) {
                    return this.nameLookup[t]
                },
                getAsArray: function () {
                    var t = 0;
                    for (var e in this.materialsInfo)
                        this.materialsArray[t] = this.create(e),
                            this.nameLookup[e] = t,
                            t++;
                    return this.materialsArray
                },
                create: function (t) {
                    return void 0 === this.materials[t] && this.createMaterial_(t),
                        this.materials[t]
                },
                createMaterial_: function (t) {
                    function e(t, e) {
                        return "string" != typeof e || "" === e ? "" : /^https?:\/\//i.test(e) ? e : t + e
                    }
                    function i(t, i) {
                        if (!a[t]) {
                            var r = n.getTextureParams(i, a)
                                , o = n.loadTexture(e(n.baseUrl, r.url));
                            o.repeat.copy(r.scale),
                                o.offset.copy(r.offset),
                                o.wrapS = n.wrap,
                                o.wrapT = n.wrap,
                                a[t] = o
                        }
                    }
                    var n = this
                        , r = this.materialsInfo[t]
                        , a = {
                            name: t,
                            side: this.side
                        };
                    for (var s in r) {
                        var h, l = r[s];
                        if ("" !== l)
                            switch (s.toLowerCase()) {
                                case "kd":
                                    a.color = (new o.Color).fromArray(l);
                                    break;
                                case "ks":
                                    a.specular = (new o.Color).fromArray(l);
                                    break;
                                case "map_kd":
                                    i("map", l);
                                    break;
                                case "map_ks":
                                    i("specularMap", l);
                                    break;
                                case "norm":
                                    i("normalMap", l);
                                    break;
                                case "map_bump":
                                case "bump":
                                    i("bumpMap", l);
                                    break;
                                case "ns":
                                    a.shininess = parseFloat(l);
                                    break;
                                case "d":
                                    h = parseFloat(l),
                                        h < 1 && (a.opacity = h,
                                            a.transparent = !0);
                                    break;
                                case "tr":
                                    h = parseFloat(l),
                                        h > 0 && (a.opacity = 1 - h,
                                            a.transparent = !0)
                            }
                    }
                    return this.materials[t] = new o.MeshPhongMaterial(a),
                        this.materials[t]
                },
                getTextureParams: function (t, e) {
                    var i, n = {
                        scale: new o.Vector2(1, 1),
                        offset: new o.Vector2(0, 0)
                    }, r = t.split(/\s+/);
                    return i = r.indexOf("-bm"),
                        i >= 0 && (e.bumpScale = parseFloat(r[i + 1]),
                            r.splice(i, 2)),
                        i = r.indexOf("-s"),
                        i >= 0 && (n.scale.set(parseFloat(r[i + 1]), parseFloat(r[i + 2])),
                            r.splice(i, 4)),
                        i = r.indexOf("-o"),
                        i >= 0 && (n.offset.set(parseFloat(r[i + 1]), parseFloat(r[i + 2])),
                            r.splice(i, 4)),
                        n.url = r.join(" ").trim(),
                        n
                },
                loadTexture: function (t, e, i, n, r) {
                    var a, s = o.Loader.Handlers.get(t), h = void 0 !== this.manager ? this.manager : o.DefaultLoadingManager;
                    return null === s && (s = new o.TextureLoader(h)),
                        s.setCrossOrigin && s.setCrossOrigin(this.crossOrigin),
                        a = s.load(t, i, n, r),
                        void 0 !== e && (a.mapping = e),
                        a
                }
            },
            e.default = n
    }
    , function (t, e, i) {
        "use strict";
        function n() {
            var t = {
                objects: [],
                object: {},
                vertices: [],
                normals: [],
                uvs: [],
                materialLibraries: [],
                startObject: function (t, e) {
                    if (this.object && !1 === this.object.fromDeclaration)
                        return this.object.name = t,
                            void (this.object.fromDeclaration = !1 !== e);
                    var i = this.object && "function" == typeof this.object.currentMaterial ? this.object.currentMaterial() : void 0;
                    if (this.object && "function" == typeof this.object._finalize && this.object._finalize(!0),
                        this.object = {
                            name: t || "",
                            fromDeclaration: !1 !== e,
                            geometry: {
                                vertices: [],
                                normals: [],
                                uvs: []
                            },
                            materials: [],
                            smooth: !0,
                            startMaterial: function (t, e) {
                                var i = this._finalize(!1);
                                i && (i.inherited || i.groupCount <= 0) && this.materials.splice(i.index, 1);
                                var n = {
                                    index: this.materials.length,
                                    name: t || "",
                                    mtllib: Array.isArray(e) && e.length > 0 ? e[e.length - 1] : "",
                                    smooth: void 0 !== i ? i.smooth : this.smooth,
                                    groupStart: void 0 !== i ? i.groupEnd : 0,
                                    groupEnd: -1,
                                    groupCount: -1,
                                    inherited: !1,
                                    clone: function (t) {
                                        var e = {
                                            index: "number" == typeof t ? t : this.index,
                                            name: this.name,
                                            mtllib: this.mtllib,
                                            smooth: this.smooth,
                                            groupStart: 0,
                                            groupEnd: -1,
                                            groupCount: -1,
                                            inherited: !1
                                        };
                                        return e.clone = this.clone.bind(e),
                                            e
                                    }
                                };
                                return this.materials.push(n),
                                    n
                            },
                            currentMaterial: function () {
                                if (this.materials.length > 0)
                                    return this.materials[this.materials.length - 1]
                            },
                            _finalize: function (t) {
                                var e = this.currentMaterial();
                                if (e && -1 === e.groupEnd && (e.groupEnd = this.geometry.vertices.length / 3,
                                    e.groupCount = e.groupEnd - e.groupStart,
                                    e.inherited = !1),
                                    t && this.materials.length > 1)
                                    for (var i = this.materials.length - 1; i >= 0; i--)
                                        this.materials[i].groupCount <= 0 && this.materials.splice(i, 1);
                                return t && 0 === this.materials.length && this.materials.push({
                                    name: "",
                                    smooth: this.smooth
                                }),
                                    e
                            }
                        },
                        i && i.name && "function" == typeof i.clone) {
                        var n = i.clone(0);
                        n.inherited = !0,
                            this.object.materials.push(n)
                    }
                    this.objects.push(this.object)
                },
                finalize: function () {
                    this.object && "function" == typeof this.object._finalize && this.object._finalize(!0)
                },
                parseVertexIndex: function (t, e) {
                    var i = parseInt(t, 10);
                    return 3 * (i >= 0 ? i - 1 : i + e / 3)
                },
                parseNormalIndex: function (t, e) {
                    var i = parseInt(t, 10);
                    return 3 * (i >= 0 ? i - 1 : i + e / 3)
                },
                parseUVIndex: function (t, e) {
                    var i = parseInt(t, 10);
                    return 2 * (i >= 0 ? i - 1 : i + e / 2)
                },
                addVertex: function (t, e, i) {
                    var n = this.vertices
                        , r = this.object.geometry.vertices;
                    r.push(n[t + 0], n[t + 1], n[t + 2]),
                        r.push(n[e + 0], n[e + 1], n[e + 2]),
                        r.push(n[i + 0], n[i + 1], n[i + 2])
                },
                addVertexLine: function (t) {
                    var e = this.vertices;
                    this.object.geometry.vertices.push(e[t + 0], e[t + 1], e[t + 2])
                },
                addNormal: function (t, e, i) {
                    var n = this.normals
                        , r = this.object.geometry.normals;
                    r.push(n[t + 0], n[t + 1], n[t + 2]),
                        r.push(n[e + 0], n[e + 1], n[e + 2]),
                        r.push(n[i + 0], n[i + 1], n[i + 2])
                },
                addUV: function (t, e, i) {
                    var n = this.uvs
                        , r = this.object.geometry.uvs;
                    r.push(n[t + 0], n[t + 1]),
                        r.push(n[e + 0], n[e + 1]),
                        r.push(n[i + 0], n[i + 1])
                },
                addUVLine: function (t) {
                    var e = this.uvs;
                    this.object.geometry.uvs.push(e[t + 0], e[t + 1])
                },
                addFace: function (t, e, i, n, r, o, a, s, h) {
                    var l = this.vertices.length
                        , c = this.parseVertexIndex(t, l)
                        , u = this.parseVertexIndex(e, l)
                        , d = this.parseVertexIndex(i, l);
                    if (this.addVertex(c, u, d),
                        void 0 !== n) {
                        var p = this.uvs.length;
                        c = this.parseUVIndex(n, p),
                            u = this.parseUVIndex(r, p),
                            d = this.parseUVIndex(o, p),
                            this.addUV(c, u, d)
                    }
                    if (void 0 !== a) {
                        var f = this.normals.length;
                        c = this.parseNormalIndex(a, f),
                            u = a === s ? c : this.parseNormalIndex(s, f),
                            d = a === h ? c : this.parseNormalIndex(h, f),
                            this.addNormal(c, u, d)
                    }
                },
                addLineGeometry: function (t, e) {
                    this.object.geometry.type = "Line";
                    for (var i = this.vertices.length, n = this.uvs.length, r = 0, o = t.length; r < o; r++)
                        this.addVertexLine(this.parseVertexIndex(t[r], i));
                    for (var a = 0, o = e.length; a < o; a++)
                        this.addUVLine(this.parseUVIndex(e[a], n))
                }
            };
            return t.startObject("", !1),
                t
        }
        function r(t) {
            this.manager = void 0 !== t ? t : a.DefaultLoadingManager,
                this.materials = null
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var o = i(4)
            , a = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(o)
            , s = /^[og]\s*(.+)?/
            , h = /^mtllib /
            , l = /^usemtl /;
        r.prototype = {
            constructor: r,
            load: function (t, e, i, n) {
                var r = this
                    , o = new a.FileLoader(r.manager);
                o.setPath(this.path),
                    o.load(t, function (t) {
                        e(r.parse(t))
                    }, i, n)
            },
            setPath: function (t) {
                this.path = t
            },
            setMaterials: function (t) {
                return this.materials = t,
                    this
            },
            parse: function (t) {
                console.time("OBJLoader");
                var e = new n;
                -1 !== t.indexOf("\r\n") && (t = t.replace(/\r\n/g, "\n")),
                    -1 !== t.indexOf("\\\n") && (t = t.replace(/\\\n/g, ""));
                for (var i = t.split("\n"), r = "", o = "", c = [], u = "function" == typeof "".trimLeft, d = 0, p = i.length; d < p; d++)
                    if (r = i[d],
                        r = u ? r.trimLeft() : r.trim(),
                        0 !== r.length && "#" !== (o = r.charAt(0)))
                        if ("v" === o) {
                            var f = r.split(/\s+/);
                            switch (f[0]) {
                                case "v":
                                    e.vertices.push(parseFloat(f[1]), parseFloat(f[2]), parseFloat(f[3]));
                                    break;
                                case "vn":
                                    e.normals.push(parseFloat(f[1]), parseFloat(f[2]), parseFloat(f[3]));
                                    break;
                                case "vt":
                                    e.uvs.push(parseFloat(f[1]), parseFloat(f[2]))
                            }
                        } else if ("f" === o) {
                            for (var m = r.substr(1).trim(), v = m.split(/\s+/), g = [], _ = 0, y = v.length; _ < y; _++) {
                                var x = v[_];
                                if (x.length > 0) {
                                    var b = x.split("/");
                                    g.push(b)
                                }
                            }
                            for (var w = g[0], _ = 1, y = g.length - 1; _ < y; _++) {
                                var S = g[_]
                                    , E = g[_ + 1];
                                e.addFace(w[0], S[0], E[0], w[1], S[1], E[1], w[2], S[2], E[2])
                            }
                        } else if ("l" === o) {
                            var T = r.substring(1).trim().split(" ")
                                , M = []
                                , A = [];
                            if (-1 === r.indexOf("/"))
                                M = T;
                            else
                                for (var P = 0, R = T.length; P < R; P++) {
                                    var L = T[P].split("/");
                                    "" !== L[0] && M.push(L[0]),
                                        "" !== L[1] && A.push(L[1])
                                }
                            e.addLineGeometry(M, A)
                        } else if (null !== (c = s.exec(r))) {
                            var O = (" " + c[0].substr(1).trim()).substr(1);
                            e.startObject(O)
                        } else if (l.test(r))
                            e.object.startMaterial(r.substring(7).trim(), e.materialLibraries);
                        else if (h.test(r))
                            e.materialLibraries.push(r.substring(7).trim());
                        else {
                            if ("s" !== o) {
                                if ("\0" === r)
                                    continue;
                                throw new Error("Unexpected line: '" + r + "'")
                            }
                            if (c = r.split(" "),
                                c.length > 1) {
                                var I = c[1].trim().toLowerCase();
                                e.object.smooth = "0" !== I && "off" !== I
                            } else
                                e.object.smooth = !0;
                            var C = e.object.currentMaterial();
                            C && (C.smooth = e.object.smooth)
                        }
                e.finalize();
                var D = new a.Group;
                D.materialLibraries = [].concat(e.materialLibraries);
                for (var d = 0, p = e.objects.length; d < p; d++) {
                    var N = e.objects[d]
                        , U = N.geometry
                        , B = N.materials
                        , F = "Line" === U.type;
                    if (0 !== U.vertices.length) {
                        var z = new a.BufferGeometry;
                        z.addAttribute("position", new a.BufferAttribute(new Float32Array(U.vertices), 3)),
                            U.normals.length > 0 ? z.addAttribute("normal", new a.BufferAttribute(new Float32Array(U.normals), 3)) : z.computeVertexNormals(),
                            U.uvs.length > 0 && z.addAttribute("uv", new a.BufferAttribute(new Float32Array(U.uvs), 2));
                        for (var G = [], j = 0, k = B.length; j < k; j++) {
                            var H = B[j]
                                , C = void 0;
                            if (null !== this.materials && (C = this.materials.create(H.name),
                                F && C && !(C instanceof a.LineBasicMaterial))) {
                                var V = new a.LineBasicMaterial;
                                V.copy(C),
                                    C = V
                            }
                            C || (C = F ? new a.LineBasicMaterial : new a.MeshPhongMaterial,
                                C.name = H.name),
                                C.flatShading = !H.smooth,
                                G.push(C)
                        }
                        var W;
                        if (G.length > 1) {
                            for (var j = 0, k = B.length; j < k; j++) {
                                var H = B[j];
                                z.addGroup(H.groupStart, H.groupCount, j)
                            }
                            W = F ? new a.LineSegments(z, G) : new a.Mesh(z, G)
                        } else
                            W = F ? new a.LineSegments(z, G[0]) : new a.Mesh(z, G[0]);
                        W.name = N.name,
                            D.add(W)
                    }
                }
                return console.timeEnd("OBJLoader"),
                    D
            }
        },
            e.default = r
    }
    , function (t, e) {
        (function () {
            var t;
            t = void 0 !== e && null !== e ? e : this,
                t.Lethargy = function () {
                    function t(t, e, i, n) {
                        this.stability = null != t ? Math.abs(t) : 8,
                            this.sensitivity = null != e ? 1 + Math.abs(e) : 100,
                            this.tolerance = null != i ? 1 + Math.abs(i) : 1.1,
                            this.delay = null != n ? n : 150,
                            this.lastUpDeltas = function () {
                                var t, e, i;
                                for (i = [],
                                    t = 1,
                                    e = 2 * this.stability; 1 <= e ? t <= e : t >= e; 1 <= e ? t++ : t--)
                                    i.push(null);
                                return i
                            }
                                .call(this),
                            this.lastDownDeltas = function () {
                                var t, e, i;
                                for (i = [],
                                    t = 1,
                                    e = 2 * this.stability; 1 <= e ? t <= e : t >= e; 1 <= e ? t++ : t--)
                                    i.push(null);
                                return i
                            }
                                .call(this),
                            this.deltasTimestamp = function () {
                                var t, e, i;
                                for (i = [],
                                    t = 1,
                                    e = 2 * this.stability; 1 <= e ? t <= e : t >= e; 1 <= e ? t++ : t--)
                                    i.push(null);
                                return i
                            }
                                .call(this)
                    }
                    return t.prototype.check = function (t) {
                        var e;
                        return t = t.originalEvent || t,
                            null != t.wheelDelta ? e = t.wheelDelta : null != t.deltaY ? e = -40 * t.deltaY : null == t.detail && 0 !== t.detail || (e = -40 * t.detail),
                            this.deltasTimestamp.push(Date.now()),
                            this.deltasTimestamp.shift(),
                            e > 0 ? (this.lastUpDeltas.push(e),
                                this.lastUpDeltas.shift(),
                                this.isInertia(1)) : (this.lastDownDeltas.push(e),
                                    this.lastDownDeltas.shift(),
                                    this.isInertia(-1))
                    }
                        ,
                        t.prototype.isInertia = function (t) {
                            var e, i, n, r, o, a, s;
                            return e = -1 === t ? this.lastDownDeltas : this.lastUpDeltas,
                                null === e[0] ? t : !(this.deltasTimestamp[2 * this.stability - 2] + this.delay > Date.now() && e[0] === e[2 * this.stability - 1]) && (n = e.slice(0, this.stability),
                                    i = e.slice(this.stability, 2 * this.stability),
                                    s = n.reduce(function (t, e) {
                                        return t + e
                                    }),
                                    o = i.reduce(function (t, e) {
                                        return t + e
                                    }),
                                    a = s / n.length,
                                    r = o / i.length,
                                    Math.abs(a) < Math.abs(r * this.tolerance) && this.sensitivity < Math.abs(r) && t)
                        }
                        ,
                        t.prototype.showLastUpDeltas = function () {
                            return this.lastUpDeltas
                        }
                        ,
                        t.prototype.showLastDownDeltas = function () {
                            return this.lastDownDeltas
                        }
                        ,
                        t
                }()
        }
        ).call(this)
    }
    , function (t, e, i) {
        "use strict";
        function n(t, e, i) {
            if (c.beginPath(),
                c.moveTo(.5, 32.5),
                c.arcTo(.5, .5, 32.5, .5, 32),
                c.lineTo(t - 32 - .5, .5),
                c.arcTo(t - .5, .5, t - .5, 32.5, 32),
                c.lineTo(t - .5, e - 32 - 32 - .5),
                c.arcTo(t - .5, e - 32 - .5, t - 32 - .5, e - 32 - .5, 32),
                "right" === i)
                c.lineTo(t - 32 - 24 - .5, e - 32 - .5),
                    c.arcTo(t - 32 - 32 - 24 - .5, e - 32 - .5, t - 32 - 32 - 24 - .5, e - .5, 32),
                    c.quadraticCurveTo(t - 32 - 32 - 24 - 27 - .5, e - .5, t - 32 - 32 - 24 - 54 - .5, e - 32 - .5);
            else if ("left" === i) {
                var n = t - 64 - 24 - 32 - 54;
                c.lineTo(t - 32 - n - .5, e - 32 - .5),
                    c.quadraticCurveTo(t - 32 - n - 27 - .5, e - .5, t - 32 - n - 54 - .5, e - .5),
                    c.arcTo(t - 32 - n - 54 - .5, e - 32 - .5, t - 32 - n - 54 - 32 - .5, e - 32 - .5, 32)
            }
            c.lineTo(32.5, e - 32 - .5),
                c.arcTo(.5, e - 32 - .5, .5, e - 32 - 32 - .5, 32)
        }
        function r(t, e, i, n) {
            l.width = t,
                l.height = e,
                c.save(),
                c.strokeStyle = i,
                c.lineWidth = n,
                c.clearRect(0, 0, t, e),
                c.beginPath(),
                c.moveTo(.5, 10.5),
                c.lineTo(.5, .5),
                c.lineTo(10.5, .5),
                c.moveTo(t - 10 - .5, .5),
                c.lineTo(t - .5, .5),
                c.lineTo(t - .5, 10.5),
                c.moveTo(t - .5, e - 10 - .5),
                c.lineTo(t - .5, e - .5),
                c.lineTo(t - 10 - .5, e - .5),
                c.moveTo(10.5, e - .5),
                c.lineTo(.5, e - .5),
                c.lineTo(.5, e - 10 - .5),
                c.stroke();
            var r = l.toDataURL();
            return c.restore(),
                r
        }
        function o(t, e) {
            c.save(),
                c.strokeStyle = "#3583f8",
                c.lineWidth = 2,
                c.clearRect(0, 0, t, e),
                c.beginPath(),
                c.moveTo(1, 33),
                c.arcTo(1, 1, 33, 1, 32),
                c.moveTo(t - 32 - 1, 1),
                c.arcTo(t - 1, 1, t - 1, 33, 32),
                c.moveTo(t - 1, e - 32 - 32 - 1),
                c.arcTo(t - 1, e - 32 - 1, t - 32 - 1, e - 32 - 1, 32),
                c.moveTo(33, e - 32 - 1),
                c.arcTo(1, e - 32 - 1, 1, e - 32 - 32 - 1, 32),
                c.stroke();
            c.moveTo(t - 32 + 4 + 0 - 1, e - 32 - 32 + 0 - 1),
                c.arc(t - 32 + 0 - 1, e - 32 - 32 + 0 - 1, 4, 0, 2 * Math.PI),
                c.stroke();
            var i = l.toDataURL();
            return c.restore(),
                i
        }
        function a(t, e, i, r) {
            n(t, e, r),
                c.clip(),
                c.drawImage(i, 0, 0, t, e)
        }
        function s(t, e, i, r) {
            c.strokeStyle = "#3583f8",
                c.lineWidth = i,
                n(t, e, r),
                c.closePath(),
                c.stroke()
        }
        function h(t, e, i, n, r) {
            r = r || "left",
                l.width = t,
                l.height = e,
                c.save(),
                a(t, e, i, r),
                s(t, e, n, r);
            var o = l.toDataURL();
            return c.restore(),
                o
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var l = document.createElement("canvas")
            , c = l.getContext("2d")
            , u = {
                createRectangularBubbles: function () {
                    for (var t = document.querySelectorAll(".text-3d .corners"), e = 0; e < t.length; e++)
                        t[e].parentNode.classList.contains("text-3d-shooting-hint") || t[e].parentNode.classList.contains("text-3d-trust-hint") ? (t[e].style.left = "-8px",
                            t[e].style.top = "-8px",
                            t[e].style.width = t[e].offsetWidth + 16 + "px",
                            t[e].style.height = t[e].offsetHeight + 16 + "px",
                            t[e].style.backgroundImage = 'url("' + r(t[e].offsetWidth, t[e].offsetHeight, "#3583f8", 6) + '")') : (t[e].style.left = "-16px",
                                t[e].style.top = "-16px",
                                t[e].style.width = t[e].offsetWidth + 32 + "px",
                                t[e].style.height = t[e].offsetHeight + 32 + "px",
                                t[e].style.backgroundImage = 'url("' + r(t[e].offsetWidth, t[e].offsetHeight, "#3583f8", 2) + '")')
                },
                createRoundedBubbles: function (t) {
                    for (var e = document.querySelectorAll(".bubble-3d"), i = 0; i < e.length; i++) {
                        var n = e[i];
                        // , r = n.querySelector(".bubble-3d-background");
                        // r.style.backgroundImage = 'url("' + h(n.offsetWidth, r.offsetHeight, t, 2, n.dataset.tailPosition) + '")';
                        var a = n.querySelector(".corners");
                        a && (a.style.backgroundImage = 'url("' + o(a.offsetWidth, a.offsetHeight) + '")')
                    }
                }
            };
        e.default = u
    }
    , function (t, e, i) {
        "use strict";
        function n(t, e) {
            if (!(t instanceof e))
                throw new TypeError("Cannot call a class as a function")
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var r = function () {
            function t(t, e) {
                for (var i = 0; i < e.length; i++) {
                    var n = e[i];
                    n.enumerable = n.enumerable || !1,
                        n.configurable = !0,
                        "value" in n && (n.writable = !0),
                        Object.defineProperty(t, n.key, n)
                }
            }
            return function (e, i, n) {
                return i && t(e.prototype, i),
                    n && t(e, n),
                    e
            }
        }()
            , o = i(391)
            , a = []
            , s = null
            , h = null
            , l = null
            , c = null
            , u = null
            , d = null
            , p = null
            , f = 0
            , m = null
            , v = null
            , g = null
            , _ = function () {
                function t(e) {
                    n(this, t),
                        s = e.scene,
                        h = e.spaceship,
                        u = e.audioMissileBlueSrc,
                        d = e.audioMissileRedSrc,
                        m = e.frustum,
                        v = e.path,
                        g = e.asteroids,
                        l = e.meshMissilesBlue.children[0],
                        l.material = e.materialMissiles,
                        l.scale.x = .006,
                        l.scale.y = .006,
                        c = e.meshMissilesRed.children[0],
                        c.material = e.materialMissiles,
                        c.scale.x = .006,
                        c.scale.y = .006,
                        p = e.materialMissileSparkles
                }
                return r(t, [{
                    key: "shoot",
                    value: function () {
                        var t = void 0;
                        if (f < 2) {
                            t = new Audio(u),
                                t.volume = .5;
                            var e = new o.Missile({
                                object3D: l.clone(),
                                position: h.position,
                                rotation: h.rotation,
                                scale: h.scale,
                                spaceship: h,
                                sound: t,
                                frustum: m,
                                path: v,
                                materialMissileSparkles: p
                            });
                            a.push(e),
                                s.add(e.object3D)
                        } else {
                            t = new Audio(d),
                                t.volume = .2;
                            var i = new o.Missile({
                                object3D: c.clone(),
                                position: h.position,
                                rotation: h.rotation,
                                scale: h.scale,
                                spaceship: h,
                                sound: t,
                                frustum: m,
                                path: v,
                                materialMissileSparkles: p
                            });
                            a.push(i),
                                s.add(i.object3D)
                        }
                        ++f > 2 && (f = 0)
                    }
                }, {
                    key: "tick",
                    value: function () {
                        for (var t = void 0, e = void 0, i = a.length - 1; i >= 0; i--)
                            if (t = a[i],
                                t.isExploded())
                                s.remove(t.object3D),
                                    a.splice(i, 1);
                            else {
                                if (!t.isSparkling())
                                    for (var n = g.length - 1; n >= 0; n--)
                                        if (e = g[n],
                                            t.object3D.position.distanceTo(e.object3D.position) <= .22 && !e.isExploded()) {
                                            e.explode(),
                                                t.sparkle();
                                            break
                                        }
                                t.tick()
                            }
                    }
                }]),
                    t
            }();
        e.default = _
    }
    , function (t, e, i) {
        "use strict";
        function n(t, e) {
            if (!(t instanceof e))
                throw new TypeError("Cannot call a class as a function")
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            e.Missile = void 0;
        var r = function () {
            function t(t, e) {
                for (var i = 0; i < e.length; i++) {
                    var n = e[i];
                    n.enumerable = n.enumerable || !1,
                        n.configurable = !0,
                        "value" in n && (n.writable = !0),
                        Object.defineProperty(t, n.key, n)
                }
            }
            return function (e, i, n) {
                return i && t(e.prototype, i),
                    n && t(e, n),
                    e
            }
        }()
            , o = i(4)
            , a = function (t) {
                if (t && t.__esModule)
                    return t;
                var e = {};
                if (null != t)
                    for (var i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e.default = t,
                    e
            }(o)
            , s = i(53)
            , h = function (t) {
                return t && t.__esModule ? t : {
                    default: t
                }
            }(s)
            , l = .003
            , c = [[0, 1, .5, 1, 0, .5, .5, .5], [.5, 1, 1, 1, .5, .5, 1, .5], [0, .5, .5, .5, 0, 0, .5, 0], [.5, .5, 1, .5, .5, 0, 1, 0]]
            , u = void 0
            , d = void 0
            , p = null
            , f = null
            , m = void 0
            , v = function () {
                function t(e) {
                    n(this, t),
                        u = e.position,
                        d = e.rotation,
                        p = e.frustum,
                        f = e.path,
                        m = e.materialMissileSparkles,
                        this._sparkles = [],
                        this._isSparkling = !1,
                        this._isExploded = !1,
                        this.normalX = f.normal.x,
                        this.normalY = f.normal.y,
                        this.object3D = new a.Group,
                        this.object3D.translateX(e.position.x),
                        this.object3D.translateY(e.position.y),
                        this.object3D.rotateZ(e.rotation.y),
                        this.object3D.scale.set(e.scale.x, e.scale.y, e.scale.z),
                        this._missleMesh = e.object3D,
                        this._missleMesh.scale.y = l,
                        this.object3D.add(this._missleMesh),
                        h.default.isPaused() || e.sound.play()
                }
                return r(t, [{
                    key: "isExploded",
                    value: function () {
                        return this._isExploded
                    }
                }, {
                    key: "isSparkling",
                    value: function () {
                        return this._isSparkling
                    }
                }, {
                    key: "sparkle",
                    value: function () {
                        this._missleMesh.geometry.dispose(),
                            this._missleMesh.material.dispose(),
                            this.object3D.remove(this._missleMesh),
                            this._missleMesh = null,
                            this._isSparkling = !0;
                        for (var t = 0; t < 72; t++) {
                            var e = void 0
                                , i = Math.random();
                            i >= .75 ? e = c[0] : i >= .5 ? e = c[1] : i >= .25 ? e = c[2] : i >= 0 && (e = c[3]);
                            var n = new a.PlaneBufferGeometry(.04, .04, 1);
                            n.addAttribute("uv", new a.BufferAttribute(new Float32Array(e), 2));
                            var r = new a.Mesh(n, m);
                            r.position.x = t < 32 ? .041946 : -.041946;
                            var o = 2 * Math.random() - 1
                                , s = 2 * Math.random() - 1
                                , h = 2 * Math.random() - 1
                                , l = Math.sqrt(o * o + s * s + h * h)
                                , u = Math.random() * (.025 - .015) + .015;
                            this._sparkles.push({
                                object3D: r,
                                normalX: o / l,
                                normalY: s / l,
                                normalZ: h / l,
                                speed: u,
                                startSpeed: u
                            }),
                                this.object3D.add(r)
                        }
                    }
                }, {
                    key: "tick",
                    value: function () {
                        if (p.containsPoint(this.object3D.position))
                            if (this._missleMesh)
                                this.object3D.position.x += .04 * this.normalX,
                                    this.object3D.position.y += .04 * this.normalY,
                                    this._missleMesh.scale.y += 24e-5,
                                    this._missleMesh.scale.y >= .006 && (this._missleMesh.scale.y = .006);
                            else {
                                if (0 === this._sparkles.length)
                                    return void (this._isExploded = !0);
                                for (var t = void 0, e = void 0, i = this._sparkles.length - 1; i >= 0; i--)
                                    t = this._sparkles[i],
                                        e = t.speed,
                                        t.object3D.position.x += t.normalX * e,
                                        t.object3D.position.y += t.normalY * e,
                                        t.object3D.position.z += t.normalZ * e,
                                        e *= .7,
                                        e <= .0015 ? (t.object3D.geometry.dispose(),
                                            t.object3D.material.dispose(),
                                            this.object3D.remove(t.object3D),
                                            this._sparkles.splice(i, 1)) : t.speed = e
                            }
                        else
                            this._missleMesh.geometry.dispose(),
                                this._missleMesh.material.dispose(),
                                this.object3D.remove(this._missleMesh),
                                this._missleMesh = null,
                                this._isExploded = !0
                    }
                }]),
                    t
            }();
        e.Missile = v
    }
    , function (t, e, i) {
        "use strict";
        function n(t, e) {
            function i(e) {
                e > o ? (a = r.slice(0, e - o) + n(),
                    a.length > o && (a = r.slice(0, e - o))) : a = n(),
                    t.innerHTML = a
            }
            function n() {
                var t = "";
                return t = "en" === i18n.language ? s : h,
                    t[Math.floor(Math.random() * t.length)]
            }
            var r = ""
                , o = ""
                , a = ""
                , s = ["a", "b", "c", "d", "e", "f", "g", "h", "j", "k", "l", "m", "n", "o", "p", "r", "s"]
                , h = ["а", "б", "в", "г", "д", "е", "ж", "з", "и", "к", "л", "м", "н"];
            this.to = function (t, e) {
                var n = this;
                r = t,
                    o = r.length,
                    this.index = 0,
                    window.TweenLite.killTweensOf(this),
                    window.TweenLite.to(this, e || 2, {
                        index: 2 * o,
                        ease: Quad.easeOut,
                        onUpdate: function () {
                            i(n.index)
                        }
                    })
            }
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
            i(393),
            e.default = n
    }
    , function (t, e, i) {
        "use strict";
        (function (n) {
            var r, o, a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) {
                return typeof t
            }
                : function (t) {
                    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
                }
                , s = void 0 !== t && t.exports && void 0 !== n ? n : window;
            (s._gsQueue || (s._gsQueue = [])).push(function () {
                s._gsDefine("TweenMax", ["core.Animation", "core.SimpleTimeline", "TweenLite"], function (t, e, i) {
                    var n = function (t) {
                        var e, i = [], n = t.length;
                        for (e = 0; e !== n; i.push(t[e++]))
                            ;
                        return i
                    }
                        , r = function (t, e, i) {
                            var n, r, o = t.cycle;
                            for (n in o)
                                r = o[n],
                                    t[n] = "function" == typeof r ? r(i, e[i]) : r[i % r.length];
                            delete t.cycle
                        }
                        , o = function t(e, n, r) {
                            i.call(this, e, n, r),
                                this._cycle = 0,
                                this._yoyo = !0 === this.vars.yoyo,
                                this._repeat = this.vars.repeat || 0,
                                this._repeatDelay = this.vars.repeatDelay || 0,
                                this._dirty = !0,
                                this.render = t.prototype.render
                        }
                        , a = 1e-10
                        , s = i._internals
                        , h = s.isSelector
                        , l = s.isArray
                        , c = o.prototype = i.to({}, .1, {})
                        , u = [];
                    o.version = "1.19.1",
                        c.constructor = o,
                        c.kill()._gc = !1,
                        o.killTweensOf = o.killDelayedCallsTo = i.killTweensOf,
                        o.getTweensOf = i.getTweensOf,
                        o.lagSmoothing = i.lagSmoothing,
                        o.ticker = i.ticker,
                        o.render = i.render,
                        c.invalidate = function () {
                            return this._yoyo = !0 === this.vars.yoyo,
                                this._repeat = this.vars.repeat || 0,
                                this._repeatDelay = this.vars.repeatDelay || 0,
                                this._uncache(!0),
                                i.prototype.invalidate.call(this)
                        }
                        ,
                        c.updateTo = function (t, e) {
                            var n, r = this.ratio, o = this.vars.immediateRender || t.immediateRender;
                            e && this._startTime < this._timeline._time && (this._startTime = this._timeline._time,
                                this._uncache(!1),
                                this._gc ? this._enabled(!0, !1) : this._timeline.insert(this, this._startTime - this._delay));
                            for (n in t)
                                this.vars[n] = t[n];
                            if (this._initted || o)
                                if (e)
                                    this._initted = !1,
                                        o && this.render(0, !0, !0);
                                else if (this._gc && this._enabled(!0, !1),
                                    this._notifyPluginsOfEnabled && this._firstPT && i._onPluginEvent("_onDisable", this),
                                    this._time / this._duration > .998) {
                                    var a = this._totalTime;
                                    this.render(0, !0, !1),
                                        this._initted = !1,
                                        this.render(a, !0, !1)
                                } else if (this._initted = !1,
                                    this._init(),
                                    this._time > 0 || o)
                                    for (var s, h = 1 / (1 - r), l = this._firstPT; l;)
                                        s = l.s + l.c,
                                            l.c *= h,
                                            l.s = s - l.c,
                                            l = l._next;
                            return this
                        }
                        ,
                        c.render = function (t, e, i) {
                            this._initted || 0 === this._duration && this.vars.repeat && this.invalidate();
                            var n, r, o, h, l, c, u, d, p = this._dirty ? this.totalDuration() : this._totalDuration, f = this._time, m = this._totalTime, v = this._cycle, g = this._duration, _ = this._rawPrevTime;
                            if (t >= p - 1e-7 && t >= 0 ? (this._totalTime = p,
                                this._cycle = this._repeat,
                                this._yoyo && 0 != (1 & this._cycle) ? (this._time = 0,
                                    this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0) : (this._time = g,
                                        this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1),
                                this._reversed || (n = !0,
                                    r = "onComplete",
                                    i = i || this._timeline.autoRemoveChildren),
                                0 === g && (this._initted || !this.vars.lazy || i) && (this._startTime === this._timeline._duration && (t = 0),
                                    (0 > _ || 0 >= t && t >= -1e-7 || _ === a && "isPause" !== this.data) && _ !== t && (i = !0,
                                        _ > a && (r = "onReverseComplete")),
                                    this._rawPrevTime = d = !e || t || _ === t ? t : a)) : 1e-7 > t ? (this._totalTime = this._time = this._cycle = 0,
                                        this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0,
                                        (0 !== m || 0 === g && _ > 0) && (r = "onReverseComplete",
                                            n = this._reversed),
                                        0 > t && (this._active = !1,
                                            0 === g && (this._initted || !this.vars.lazy || i) && (_ >= 0 && (i = !0),
                                                this._rawPrevTime = d = !e || t || _ === t ? t : a)),
                                        this._initted || (i = !0)) : (this._totalTime = this._time = t,
                                            0 !== this._repeat && (h = g + this._repeatDelay,
                                                this._cycle = this._totalTime / h >> 0,
                                                0 !== this._cycle && this._cycle === this._totalTime / h && t >= m && this._cycle--,
                                                this._time = this._totalTime - this._cycle * h,
                                                this._yoyo && 0 != (1 & this._cycle) && (this._time = g - this._time),
                                                this._time > g ? this._time = g : this._time < 0 && (this._time = 0)),
                                            this._easeType ? (l = this._time / g,
                                                c = this._easeType,
                                                u = this._easePower,
                                                (1 === c || 3 === c && l >= .5) && (l = 1 - l),
                                                3 === c && (l *= 2),
                                                1 === u ? l *= l : 2 === u ? l *= l * l : 3 === u ? l *= l * l * l : 4 === u && (l *= l * l * l * l),
                                                1 === c ? this.ratio = 1 - l : 2 === c ? this.ratio = l : this._time / g < .5 ? this.ratio = l / 2 : this.ratio = 1 - l / 2) : this.ratio = this._ease.getRatio(this._time / g)),
                                f === this._time && !i && v === this._cycle)
                                return void (m !== this._totalTime && this._onUpdate && (e || this._callback("onUpdate")));
                            if (!this._initted) {
                                if (this._init(),
                                    !this._initted || this._gc)
                                    return;
                                if (!i && this._firstPT && (!1 !== this.vars.lazy && this._duration || this.vars.lazy && !this._duration))
                                    return this._time = f,
                                        this._totalTime = m,
                                        this._rawPrevTime = _,
                                        this._cycle = v,
                                        s.lazyTweens.push(this),
                                        void (this._lazy = [t, e]);
                                this._time && !n ? this.ratio = this._ease.getRatio(this._time / g) : n && this._ease._calcEnd && (this.ratio = this._ease.getRatio(0 === this._time ? 0 : 1))
                            }
                            for (!1 !== this._lazy && (this._lazy = !1),
                                this._active || !this._paused && this._time !== f && t >= 0 && (this._active = !0),
                                0 === m && (2 === this._initted && t > 0 && this._init(),
                                    this._startAt && (t >= 0 ? this._startAt.render(t, e, i) : r || (r = "_dummyGS")),
                                    this.vars.onStart && (0 !== this._totalTime || 0 === g) && (e || this._callback("onStart"))),
                                o = this._firstPT; o;)
                                o.f ? o.t[o.p](o.c * this.ratio + o.s) : o.t[o.p] = o.c * this.ratio + o.s,
                                    o = o._next;
                            this._onUpdate && (0 > t && this._startAt && this._startTime && this._startAt.render(t, e, i),
                                e || (this._totalTime !== m || r) && this._callback("onUpdate")),
                                this._cycle !== v && (e || this._gc || this.vars.onRepeat && this._callback("onRepeat")),
                                r && (!this._gc || i) && (0 > t && this._startAt && !this._onUpdate && this._startTime && this._startAt.render(t, e, i),
                                    n && (this._timeline.autoRemoveChildren && this._enabled(!1, !1),
                                        this._active = !1),
                                    !e && this.vars[r] && this._callback(r),
                                    0 === g && this._rawPrevTime === a && d !== a && (this._rawPrevTime = 0))
                        }
                        ,
                        o.to = function (t, e, i) {
                            return new o(t, e, i)
                        }
                        ,
                        o.from = function (t, e, i) {
                            return i.runBackwards = !0,
                                i.immediateRender = 0 != i.immediateRender,
                                new o(t, e, i)
                        }
                        ,
                        o.fromTo = function (t, e, i, n) {
                            return n.startAt = i,
                                n.immediateRender = 0 != n.immediateRender && 0 != i.immediateRender,
                                new o(t, e, n)
                        }
                        ,
                        o.staggerTo = o.allTo = function (t, e, a, s, c, d, p) {
                            s = s || 0;
                            var f, m, v, g, _ = 0, y = [], x = function () {
                                a.onComplete && a.onComplete.apply(a.onCompleteScope || this, arguments),
                                    c.apply(p || a.callbackScope || this, d || u)
                            }, b = a.cycle, w = a.startAt && a.startAt.cycle;
                            for (l(t) || ("string" == typeof t && (t = i.selector(t) || t),
                                h(t) && (t = n(t))),
                                t = t || [],
                                0 > s && (t = n(t),
                                    t.reverse(),
                                    s *= -1),
                                f = t.length - 1,
                                v = 0; f >= v; v++) {
                                m = {};
                                for (g in a)
                                    m[g] = a[g];
                                if (b && (r(m, t, v),
                                    null != m.duration && (e = m.duration,
                                        delete m.duration)),
                                    w) {
                                    w = m.startAt = {};
                                    for (g in a.startAt)
                                        w[g] = a.startAt[g];
                                    r(m.startAt, t, v)
                                }
                                m.delay = _ + (m.delay || 0),
                                    v === f && c && (m.onComplete = x),
                                    y[v] = new o(t[v], e, m),
                                    _ += s
                            }
                            return y
                        }
                        ,
                        o.staggerFrom = o.allFrom = function (t, e, i, n, r, a, s) {
                            return i.runBackwards = !0,
                                i.immediateRender = 0 != i.immediateRender,
                                o.staggerTo(t, e, i, n, r, a, s)
                        }
                        ,
                        o.staggerFromTo = o.allFromTo = function (t, e, i, n, r, a, s, h) {
                            return n.startAt = i,
                                n.immediateRender = 0 != n.immediateRender && 0 != i.immediateRender,
                                o.staggerTo(t, e, n, r, a, s, h)
                        }
                        ,
                        o.delayedCall = function (t, e, i, n, r) {
                            return new o(e, 0, {
                                delay: t,
                                onComplete: e,
                                onCompleteParams: i,
                                callbackScope: n,
                                onReverseComplete: e,
                                onReverseCompleteParams: i,
                                immediateRender: !1,
                                useFrames: r,
                                overwrite: 0
                            })
                        }
                        ,
                        o.set = function (t, e) {
                            return new o(t, 0, e)
                        }
                        ,
                        o.isTweening = function (t) {
                            return i.getTweensOf(t, !0).length > 0
                        }
                        ;
                    var d = function t(e, n) {
                        for (var r = [], o = 0, a = e._first; a;)
                            a instanceof i ? r[o++] = a : (n && (r[o++] = a),
                                r = r.concat(t(a, n)),
                                o = r.length),
                                a = a._next;
                        return r
                    }
                        , p = o.getAllTweens = function (e) {
                            return d(t._rootTimeline, e).concat(d(t._rootFramesTimeline, e))
                        }
                        ;
                    o.killAll = function (t, i, n, r) {
                        null == i && (i = !0),
                            null == n && (n = !0);
                        var o, a, s, h = p(0 != r), l = h.length, c = i && n && r;
                        for (s = 0; l > s; s++)
                            a = h[s],
                                (c || a instanceof e || (o = a.target === a.vars.onComplete) && n || i && !o) && (t ? a.totalTime(a._reversed ? 0 : a.totalDuration()) : a._enabled(!1, !1))
                    }
                        ,
                        o.killChildTweensOf = function (t, e) {
                            if (null != t) {
                                var r, a, c, u, d, p = s.tweenLookup;
                                if ("string" == typeof t && (t = i.selector(t) || t),
                                    h(t) && (t = n(t)),
                                    l(t))
                                    for (u = t.length; --u > -1;)
                                        o.killChildTweensOf(t[u], e);
                                else {
                                    r = [];
                                    for (c in p)
                                        for (a = p[c].target.parentNode; a;)
                                            a === t && (r = r.concat(p[c].tweens)),
                                                a = a.parentNode;
                                    for (d = r.length,
                                        u = 0; d > u; u++)
                                        e && r[u].totalTime(r[u].totalDuration()),
                                            r[u]._enabled(!1, !1)
                                }
                            }
                        }
                        ;
                    var f = function (t, i, n, r) {
                        i = !1 !== i,
                            n = !1 !== n,
                            r = !1 !== r;
                        for (var o, a, s = p(r), h = i && n && r, l = s.length; --l > -1;)
                            a = s[l],
                                (h || a instanceof e || (o = a.target === a.vars.onComplete) && n || i && !o) && a.paused(t)
                    };
                    return o.pauseAll = function (t, e, i) {
                        f(!0, t, e, i)
                    }
                        ,
                        o.resumeAll = function (t, e, i) {
                            f(!1, t, e, i)
                        }
                        ,
                        o.globalTimeScale = function (e) {
                            var n = t._rootTimeline
                                , r = i.ticker.time;
                            return arguments.length ? (e = e || a,
                                n._startTime = r - (r - n._startTime) * n._timeScale / e,
                                n = t._rootFramesTimeline,
                                r = i.ticker.frame,
                                n._startTime = r - (r - n._startTime) * n._timeScale / e,
                                n._timeScale = t._rootTimeline._timeScale = e,
                                e) : n._timeScale
                        }
                        ,
                        c.progress = function (t, e) {
                            return arguments.length ? this.totalTime(this.duration() * (this._yoyo && 0 != (1 & this._cycle) ? 1 - t : t) + this._cycle * (this._duration + this._repeatDelay), e) : this._time / this.duration()
                        }
                        ,
                        c.totalProgress = function (t, e) {
                            return arguments.length ? this.totalTime(this.totalDuration() * t, e) : this._totalTime / this.totalDuration()
                        }
                        ,
                        c.time = function (t, e) {
                            return arguments.length ? (this._dirty && this.totalDuration(),
                                t > this._duration && (t = this._duration),
                                this._yoyo && 0 != (1 & this._cycle) ? t = this._duration - t + this._cycle * (this._duration + this._repeatDelay) : 0 !== this._repeat && (t += this._cycle * (this._duration + this._repeatDelay)),
                                this.totalTime(t, e)) : this._time
                        }
                        ,
                        c.duration = function (e) {
                            return arguments.length ? t.prototype.duration.call(this, e) : this._duration
                        }
                        ,
                        c.totalDuration = function (t) {
                            return arguments.length ? -1 === this._repeat ? this : this.duration((t - this._repeat * this._repeatDelay) / (this._repeat + 1)) : (this._dirty && (this._totalDuration = -1 === this._repeat ? 999999999999 : this._duration * (this._repeat + 1) + this._repeatDelay * this._repeat,
                                this._dirty = !1),
                                this._totalDuration)
                        }
                        ,
                        c.repeat = function (t) {
                            return arguments.length ? (this._repeat = t,
                                this._uncache(!0)) : this._repeat
                        }
                        ,
                        c.repeatDelay = function (t) {
                            return arguments.length ? (this._repeatDelay = t,
                                this._uncache(!0)) : this._repeatDelay
                        }
                        ,
                        c.yoyo = function (t) {
                            return arguments.length ? (this._yoyo = t,
                                this) : this._yoyo
                        }
                        ,
                        o
                }, !0),
                    s._gsDefine("TimelineLite", ["core.Animation", "core.SimpleTimeline", "TweenLite"], function (t, e, i) {
                        var n = function (t) {
                            e.call(this, t),
                                this._labels = {},
                                this.autoRemoveChildren = !0 === this.vars.autoRemoveChildren,
                                this.smoothChildTiming = !0 === this.vars.smoothChildTiming,
                                this._sortChildren = !0,
                                this._onUpdate = this.vars.onUpdate;
                            var i, n, r = this.vars;
                            for (n in r)
                                i = r[n],
                                    l(i) && -1 !== i.join("").indexOf("{self}") && (r[n] = this._swapSelfInParams(i));
                            l(r.tweens) && this.add(r.tweens, 0, r.align, r.stagger)
                        }
                            , r = 1e-10
                            , o = i._internals
                            , a = n._internals = {}
                            , h = o.isSelector
                            , l = o.isArray
                            , c = o.lazyTweens
                            , u = o.lazyRender
                            , d = s._gsDefine.globals
                            , p = function (t) {
                                var e, i = {};
                                for (e in t)
                                    i[e] = t[e];
                                return i
                            }
                            , f = function (t, e, i) {
                                var n, r, o = t.cycle;
                                for (n in o)
                                    r = o[n],
                                        t[n] = "function" == typeof r ? r(i, e[i]) : r[i % r.length];
                                delete t.cycle
                            }
                            , m = a.pauseCallback = function () { }
                            , v = function (t) {
                                var e, i = [], n = t.length;
                                for (e = 0; e !== n; i.push(t[e++]))
                                    ;
                                return i
                            }
                            , g = n.prototype = new e;
                        return n.version = "1.19.1",
                            g.constructor = n,
                            g.kill()._gc = g._forcingPlayhead = g._hasPause = !1,
                            g.to = function (t, e, n, r) {
                                var o = n.repeat && d.TweenMax || i;
                                return e ? this.add(new o(t, e, n), r) : this.set(t, n, r)
                            }
                            ,
                            g.from = function (t, e, n, r) {
                                return this.add((n.repeat && d.TweenMax || i).from(t, e, n), r)
                            }
                            ,
                            g.fromTo = function (t, e, n, r, o) {
                                var a = r.repeat && d.TweenMax || i;
                                return e ? this.add(a.fromTo(t, e, n, r), o) : this.set(t, r, o)
                            }
                            ,
                            g.staggerTo = function (t, e, r, o, a, s, l, c) {
                                var u, d, m = new n({
                                    onComplete: s,
                                    onCompleteParams: l,
                                    callbackScope: c,
                                    smoothChildTiming: this.smoothChildTiming
                                }), g = r.cycle;
                                for ("string" == typeof t && (t = i.selector(t) || t),
                                    t = t || [],
                                    h(t) && (t = v(t)),
                                    o = o || 0,
                                    0 > o && (t = v(t),
                                        t.reverse(),
                                        o *= -1),
                                    d = 0; d < t.length; d++)
                                    u = p(r),
                                        u.startAt && (u.startAt = p(u.startAt),
                                            u.startAt.cycle && f(u.startAt, t, d)),
                                        g && (f(u, t, d),
                                            null != u.duration && (e = u.duration,
                                                delete u.duration)),
                                        m.to(t[d], e, u, d * o);
                                return this.add(m, a)
                            }
                            ,
                            g.staggerFrom = function (t, e, i, n, r, o, a, s) {
                                return i.immediateRender = 0 != i.immediateRender,
                                    i.runBackwards = !0,
                                    this.staggerTo(t, e, i, n, r, o, a, s)
                            }
                            ,
                            g.staggerFromTo = function (t, e, i, n, r, o, a, s, h) {
                                return n.startAt = i,
                                    n.immediateRender = 0 != n.immediateRender && 0 != i.immediateRender,
                                    this.staggerTo(t, e, n, r, o, a, s, h)
                            }
                            ,
                            g.call = function (t, e, n, r) {
                                return this.add(i.delayedCall(0, t, e, n), r)
                            }
                            ,
                            g.set = function (t, e, n) {
                                return n = this._parseTimeOrLabel(n, 0, !0),
                                    null == e.immediateRender && (e.immediateRender = n === this._time && !this._paused),
                                    this.add(new i(t, 0, e), n)
                            }
                            ,
                            n.exportRoot = function (t, e) {
                                t = t || {},
                                    null == t.smoothChildTiming && (t.smoothChildTiming = !0);
                                var r, o, a = new n(t), s = a._timeline;
                                for (null == e && (e = !0),
                                    s._remove(a, !0),
                                    a._startTime = 0,
                                    a._rawPrevTime = a._time = a._totalTime = s._time,
                                    r = s._first; r;)
                                    o = r._next,
                                        e && r instanceof i && r.target === r.vars.onComplete || a.add(r, r._startTime - r._delay),
                                        r = o;
                                return s.add(a, 0),
                                    a
                            }
                            ,
                            g.add = function (r, o, a, s) {
                                var h, c, u, d, p, f;
                                if ("number" != typeof o && (o = this._parseTimeOrLabel(o, 0, !0, r)),
                                    !(r instanceof t)) {
                                    if (r instanceof Array || r && r.push && l(r)) {
                                        for (a = a || "normal",
                                            s = s || 0,
                                            h = o,
                                            c = r.length,
                                            u = 0; c > u; u++)
                                            l(d = r[u]) && (d = new n({
                                                tweens: d
                                            })),
                                                this.add(d, h),
                                                "string" != typeof d && "function" != typeof d && ("sequence" === a ? h = d._startTime + d.totalDuration() / d._timeScale : "start" === a && (d._startTime -= d.delay())),
                                                h += s;
                                        return this._uncache(!0)
                                    }
                                    if ("string" == typeof r)
                                        return this.addLabel(r, o);
                                    if ("function" != typeof r)
                                        throw "Cannot add " + r + " into the timeline; it is not a tween, timeline, function, or string.";
                                    r = i.delayedCall(0, r)
                                }
                                if (e.prototype.add.call(this, r, o),
                                    (this._gc || this._time === this._duration) && !this._paused && this._duration < this.duration())
                                    for (p = this,
                                        f = p.rawTime() > r._startTime; p._timeline;)
                                        f && p._timeline.smoothChildTiming ? p.totalTime(p._totalTime, !0) : p._gc && p._enabled(!0, !1),
                                            p = p._timeline;
                                return this
                            }
                            ,
                            g.remove = function (e) {
                                if (e instanceof t) {
                                    this._remove(e, !1);
                                    var i = e._timeline = e.vars.useFrames ? t._rootFramesTimeline : t._rootTimeline;
                                    return e._startTime = (e._paused ? e._pauseTime : i._time) - (e._reversed ? e.totalDuration() - e._totalTime : e._totalTime) / e._timeScale,
                                        this
                                }
                                if (e instanceof Array || e && e.push && l(e)) {
                                    for (var n = e.length; --n > -1;)
                                        this.remove(e[n]);
                                    return this
                                }
                                return "string" == typeof e ? this.removeLabel(e) : this.kill(null, e)
                            }
                            ,
                            g._remove = function (t, i) {
                                return e.prototype._remove.call(this, t, i),
                                    this._last ? this._time > this.duration() && (this._time = this._duration,
                                        this._totalTime = this._totalDuration) : this._time = this._totalTime = this._duration = this._totalDuration = 0,
                                    this
                            }
                            ,
                            g.append = function (t, e) {
                                return this.add(t, this._parseTimeOrLabel(null, e, !0, t))
                            }
                            ,
                            g.insert = g.insertMultiple = function (t, e, i, n) {
                                return this.add(t, e || 0, i, n)
                            }
                            ,
                            g.appendMultiple = function (t, e, i, n) {
                                return this.add(t, this._parseTimeOrLabel(null, e, !0, t), i, n)
                            }
                            ,
                            g.addLabel = function (t, e) {
                                return this._labels[t] = this._parseTimeOrLabel(e),
                                    this
                            }
                            ,
                            g.addPause = function (t, e, n, r) {
                                var o = i.delayedCall(0, m, n, r || this);
                                return o.vars.onComplete = o.vars.onReverseComplete = e,
                                    o.data = "isPause",
                                    this._hasPause = !0,
                                    this.add(o, t)
                            }
                            ,
                            g.removeLabel = function (t) {
                                return delete this._labels[t],
                                    this
                            }
                            ,
                            g.getLabelTime = function (t) {
                                return null != this._labels[t] ? this._labels[t] : -1
                            }
                            ,
                            g._parseTimeOrLabel = function (e, i, n, r) {
                                var o;
                                if (r instanceof t && r.timeline === this)
                                    this.remove(r);
                                else if (r && (r instanceof Array || r.push && l(r)))
                                    for (o = r.length; --o > -1;)
                                        r[o] instanceof t && r[o].timeline === this && this.remove(r[o]);
                                if ("string" == typeof i)
                                    return this._parseTimeOrLabel(i, n && "number" == typeof e && null == this._labels[i] ? e - this.duration() : 0, n);
                                if (i = i || 0,
                                    "string" != typeof e || !isNaN(e) && null == this._labels[e])
                                    null == e && (e = this.duration());
                                else {
                                    if (-1 === (o = e.indexOf("=")))
                                        return null == this._labels[e] ? n ? this._labels[e] = this.duration() + i : i : this._labels[e] + i;
                                    i = parseInt(e.charAt(o - 1) + "1", 10) * Number(e.substr(o + 1)),
                                        e = o > 1 ? this._parseTimeOrLabel(e.substr(0, o - 1), 0, n) : this.duration()
                                }
                                return Number(e) + i
                            }
                            ,
                            g.seek = function (t, e) {
                                return this.totalTime("number" == typeof t ? t : this._parseTimeOrLabel(t), !1 !== e)
                            }
                            ,
                            g.stop = function () {
                                return this.paused(!0)
                            }
                            ,
                            g.gotoAndPlay = function (t, e) {
                                return this.play(t, e)
                            }
                            ,
                            g.gotoAndStop = function (t, e) {
                                return this.pause(t, e)
                            }
                            ,
                            g.render = function (t, e, i) {
                                this._gc && this._enabled(!0, !1);
                                var n, o, a, s, h, l, d, p = this._dirty ? this.totalDuration() : this._totalDuration, f = this._time, m = this._startTime, v = this._timeScale, g = this._paused;
                                if (t >= p - 1e-7 && t >= 0)
                                    this._totalTime = this._time = p,
                                        this._reversed || this._hasPausedChild() || (o = !0,
                                            s = "onComplete",
                                            h = !!this._timeline.autoRemoveChildren,
                                            0 === this._duration && (0 >= t && t >= -1e-7 || this._rawPrevTime < 0 || this._rawPrevTime === r) && this._rawPrevTime !== t && this._first && (h = !0,
                                                this._rawPrevTime > r && (s = "onReverseComplete"))),
                                        this._rawPrevTime = this._duration || !e || t || this._rawPrevTime === t ? t : r,
                                        t = p + 1e-4;
                                else if (1e-7 > t)
                                    if (this._totalTime = this._time = 0,
                                        (0 !== f || 0 === this._duration && this._rawPrevTime !== r && (this._rawPrevTime > 0 || 0 > t && this._rawPrevTime >= 0)) && (s = "onReverseComplete",
                                            o = this._reversed),
                                        0 > t)
                                        this._active = !1,
                                            this._timeline.autoRemoveChildren && this._reversed ? (h = o = !0,
                                                s = "onReverseComplete") : this._rawPrevTime >= 0 && this._first && (h = !0),
                                            this._rawPrevTime = t;
                                    else {
                                        if (this._rawPrevTime = this._duration || !e || t || this._rawPrevTime === t ? t : r,
                                            0 === t && o)
                                            for (n = this._first; n && 0 === n._startTime;)
                                                n._duration || (o = !1),
                                                    n = n._next;
                                        t = 0,
                                            this._initted || (h = !0)
                                    }
                                else {
                                    if (this._hasPause && !this._forcingPlayhead && !e) {
                                        if (t >= f)
                                            for (n = this._first; n && n._startTime <= t && !l;)
                                                n._duration || "isPause" !== n.data || n.ratio || 0 === n._startTime && 0 === this._rawPrevTime || (l = n),
                                                    n = n._next;
                                        else
                                            for (n = this._last; n && n._startTime >= t && !l;)
                                                n._duration || "isPause" === n.data && n._rawPrevTime > 0 && (l = n),
                                                    n = n._prev;
                                        l && (this._time = t = l._startTime,
                                            this._totalTime = t + this._cycle * (this._totalDuration + this._repeatDelay))
                                    }
                                    this._totalTime = this._time = this._rawPrevTime = t
                                }
                                if (this._time !== f && this._first || i || h || l) {
                                    if (this._initted || (this._initted = !0),
                                        this._active || !this._paused && this._time !== f && t > 0 && (this._active = !0),
                                        0 === f && this.vars.onStart && (0 === this._time && this._duration || e || this._callback("onStart")),
                                        (d = this._time) >= f)
                                        for (n = this._first; n && (a = n._next,
                                            d === this._time && (!this._paused || g));)
                                            (n._active || n._startTime <= d && !n._paused && !n._gc) && (l === n && this.pause(),
                                                n._reversed ? n.render((n._dirty ? n.totalDuration() : n._totalDuration) - (t - n._startTime) * n._timeScale, e, i) : n.render((t - n._startTime) * n._timeScale, e, i)),
                                                n = a;
                                    else
                                        for (n = this._last; n && (a = n._prev,
                                            d === this._time && (!this._paused || g));) {
                                            if (n._active || n._startTime <= f && !n._paused && !n._gc) {
                                                if (l === n) {
                                                    for (l = n._prev; l && l.endTime() > this._time;)
                                                        l.render(l._reversed ? l.totalDuration() - (t - l._startTime) * l._timeScale : (t - l._startTime) * l._timeScale, e, i),
                                                            l = l._prev;
                                                    l = null,
                                                        this.pause()
                                                }
                                                n._reversed ? n.render((n._dirty ? n.totalDuration() : n._totalDuration) - (t - n._startTime) * n._timeScale, e, i) : n.render((t - n._startTime) * n._timeScale, e, i)
                                            }
                                            n = a
                                        }
                                    this._onUpdate && (e || (c.length && u(),
                                        this._callback("onUpdate"))),
                                        s && (this._gc || (m === this._startTime || v !== this._timeScale) && (0 === this._time || p >= this.totalDuration()) && (o && (c.length && u(),
                                            this._timeline.autoRemoveChildren && this._enabled(!1, !1),
                                            this._active = !1),
                                            !e && this.vars[s] && this._callback(s)))
                                }
                            }
                            ,
                            g._hasPausedChild = function () {
                                for (var t = this._first; t;) {
                                    if (t._paused || t instanceof n && t._hasPausedChild())
                                        return !0;
                                    t = t._next
                                }
                                return !1
                            }
                            ,
                            g.getChildren = function (t, e, n, r) {
                                r = r || -9999999999;
                                for (var o = [], a = this._first, s = 0; a;)
                                    a._startTime < r || (a instanceof i ? !1 !== e && (o[s++] = a) : (!1 !== n && (o[s++] = a),
                                        !1 !== t && (o = o.concat(a.getChildren(!0, e, n)),
                                            s = o.length))),
                                        a = a._next;
                                return o
                            }
                            ,
                            g.getTweensOf = function (t, e) {
                                var n, r, o = this._gc, a = [], s = 0;
                                for (o && this._enabled(!0, !0),
                                    n = i.getTweensOf(t),
                                    r = n.length; --r > -1;)
                                    (n[r].timeline === this || e && this._contains(n[r])) && (a[s++] = n[r]);
                                return o && this._enabled(!1, !0),
                                    a
                            }
                            ,
                            g.recent = function () {
                                return this._recent
                            }
                            ,
                            g._contains = function (t) {
                                for (var e = t.timeline; e;) {
                                    if (e === this)
                                        return !0;
                                    e = e.timeline
                                }
                                return !1
                            }
                            ,
                            g.shiftChildren = function (t, e, i) {
                                i = i || 0;
                                for (var n, r = this._first, o = this._labels; r;)
                                    r._startTime >= i && (r._startTime += t),
                                        r = r._next;
                                if (e)
                                    for (n in o)
                                        o[n] >= i && (o[n] += t);
                                return this._uncache(!0)
                            }
                            ,
                            g._kill = function (t, e) {
                                if (!t && !e)
                                    return this._enabled(!1, !1);
                                for (var i = e ? this.getTweensOf(e) : this.getChildren(!0, !0, !1), n = i.length, r = !1; --n > -1;)
                                    i[n]._kill(t, e) && (r = !0);
                                return r
                            }
                            ,
                            g.clear = function (t) {
                                var e = this.getChildren(!1, !0, !0)
                                    , i = e.length;
                                for (this._time = this._totalTime = 0; --i > -1;)
                                    e[i]._enabled(!1, !1);
                                return !1 !== t && (this._labels = {}),
                                    this._uncache(!0)
                            }
                            ,
                            g.invalidate = function () {
                                for (var e = this._first; e;)
                                    e.invalidate(),
                                        e = e._next;
                                return t.prototype.invalidate.call(this)
                            }
                            ,
                            g._enabled = function (t, i) {
                                if (t === this._gc)
                                    for (var n = this._first; n;)
                                        n._enabled(t, !0),
                                            n = n._next;
                                return e.prototype._enabled.call(this, t, i)
                            }
                            ,
                            g.totalTime = function (e, i, n) {
                                this._forcingPlayhead = !0;
                                var r = t.prototype.totalTime.apply(this, arguments);
                                return this._forcingPlayhead = !1,
                                    r
                            }
                            ,
                            g.duration = function (t) {
                                return arguments.length ? (0 !== this.duration() && 0 !== t && this.timeScale(this._duration / t),
                                    this) : (this._dirty && this.totalDuration(),
                                        this._duration)
                            }
                            ,
                            g.totalDuration = function (t) {
                                if (!arguments.length) {
                                    if (this._dirty) {
                                        for (var e, i, n = 0, r = this._last, o = 999999999999; r;)
                                            e = r._prev,
                                                r._dirty && r.totalDuration(),
                                                r._startTime > o && this._sortChildren && !r._paused ? this.add(r, r._startTime - r._delay) : o = r._startTime,
                                                r._startTime < 0 && !r._paused && (n -= r._startTime,
                                                    this._timeline.smoothChildTiming && (this._startTime += r._startTime / this._timeScale),
                                                    this.shiftChildren(-r._startTime, !1, -9999999999),
                                                    o = 0),
                                                i = r._startTime + r._totalDuration / r._timeScale,
                                                i > n && (n = i),
                                                r = e;
                                        this._duration = this._totalDuration = n,
                                            this._dirty = !1
                                    }
                                    return this._totalDuration
                                }
                                return t && this.totalDuration() ? this.timeScale(this._totalDuration / t) : this
                            }
                            ,
                            g.paused = function (e) {
                                if (!e)
                                    for (var i = this._first, n = this._time; i;)
                                        i._startTime === n && "isPause" === i.data && (i._rawPrevTime = 0),
                                            i = i._next;
                                return t.prototype.paused.apply(this, arguments)
                            }
                            ,
                            g.usesFrames = function () {
                                for (var e = this._timeline; e._timeline;)
                                    e = e._timeline;
                                return e === t._rootFramesTimeline
                            }
                            ,
                            g.rawTime = function (t) {
                                return t && (this._paused || this._repeat && this.time() > 0 && this.totalProgress() < 1) ? this._totalTime % (this._duration + this._repeatDelay) : this._paused ? this._totalTime : (this._timeline.rawTime(t) - this._startTime) * this._timeScale
                            }
                            ,
                            n
                    }, !0),
                    s._gsDefine("TimelineMax", ["TimelineLite", "TweenLite", "easing.Ease"], function (t, e, i) {
                        var n = function (e) {
                            t.call(this, e),
                                this._repeat = this.vars.repeat || 0,
                                this._repeatDelay = this.vars.repeatDelay || 0,
                                this._cycle = 0,
                                this._yoyo = !0 === this.vars.yoyo,
                                this._dirty = !0
                        }
                            , r = 1e-10
                            , o = e._internals
                            , a = o.lazyTweens
                            , h = o.lazyRender
                            , l = s._gsDefine.globals
                            , c = new i(null, null, 1, 0)
                            , u = n.prototype = new t;
                        return u.constructor = n,
                            u.kill()._gc = !1,
                            n.version = "1.19.1",
                            u.invalidate = function () {
                                return this._yoyo = !0 === this.vars.yoyo,
                                    this._repeat = this.vars.repeat || 0,
                                    this._repeatDelay = this.vars.repeatDelay || 0,
                                    this._uncache(!0),
                                    t.prototype.invalidate.call(this)
                            }
                            ,
                            u.addCallback = function (t, i, n, r) {
                                return this.add(e.delayedCall(0, t, n, r), i)
                            }
                            ,
                            u.removeCallback = function (t, e) {
                                if (t)
                                    if (null == e)
                                        this._kill(null, t);
                                    else
                                        for (var i = this.getTweensOf(t, !1), n = i.length, r = this._parseTimeOrLabel(e); --n > -1;)
                                            i[n]._startTime === r && i[n]._enabled(!1, !1);
                                return this
                            }
                            ,
                            u.removePause = function (e) {
                                return this.removeCallback(t._internals.pauseCallback, e)
                            }
                            ,
                            u.tweenTo = function (t, i) {
                                i = i || {};
                                var n, r, o, a = {
                                    ease: c,
                                    useFrames: this.usesFrames(),
                                    immediateRender: !1
                                }, s = i.repeat && l.TweenMax || e;
                                for (r in i)
                                    a[r] = i[r];
                                return a.time = this._parseTimeOrLabel(t),
                                    n = Math.abs(Number(a.time) - this._time) / this._timeScale || .001,
                                    o = new s(this, n, a),
                                    a.onStart = function () {
                                        o.target.paused(!0),
                                            o.vars.time !== o.target.time() && n === o.duration() && o.duration(Math.abs(o.vars.time - o.target.time()) / o.target._timeScale),
                                            i.onStart && i.onStart.apply(i.onStartScope || i.callbackScope || o, i.onStartParams || [])
                                    }
                                    ,
                                    o
                            }
                            ,
                            u.tweenFromTo = function (t, e, i) {
                                i = i || {},
                                    t = this._parseTimeOrLabel(t),
                                    i.startAt = {
                                        onComplete: this.seek,
                                        onCompleteParams: [t],
                                        callbackScope: this
                                    },
                                    i.immediateRender = !1 !== i.immediateRender;
                                var n = this.tweenTo(e, i);
                                return n.duration(Math.abs(n.vars.time - t) / this._timeScale || .001)
                            }
                            ,
                            u.render = function (t, e, i) {
                                this._gc && this._enabled(!0, !1);
                                var n, o, s, l, c, u, d, p, f = this._dirty ? this.totalDuration() : this._totalDuration, m = this._duration, v = this._time, g = this._totalTime, _ = this._startTime, y = this._timeScale, x = this._rawPrevTime, b = this._paused, w = this._cycle;
                                if (t >= f - 1e-7 && t >= 0)
                                    this._locked || (this._totalTime = f,
                                        this._cycle = this._repeat),
                                        this._reversed || this._hasPausedChild() || (o = !0,
                                            l = "onComplete",
                                            c = !!this._timeline.autoRemoveChildren,
                                            0 === this._duration && (0 >= t && t >= -1e-7 || 0 > x || x === r) && x !== t && this._first && (c = !0,
                                                x > r && (l = "onReverseComplete"))),
                                        this._rawPrevTime = this._duration || !e || t || this._rawPrevTime === t ? t : r,
                                        this._yoyo && 0 != (1 & this._cycle) ? this._time = t = 0 : (this._time = m,
                                            t = m + 1e-4);
                                else if (1e-7 > t)
                                    if (this._locked || (this._totalTime = this._cycle = 0),
                                        this._time = 0,
                                        (0 !== v || 0 === m && x !== r && (x > 0 || 0 > t && x >= 0) && !this._locked) && (l = "onReverseComplete",
                                            o = this._reversed),
                                        0 > t)
                                        this._active = !1,
                                            this._timeline.autoRemoveChildren && this._reversed ? (c = o = !0,
                                                l = "onReverseComplete") : x >= 0 && this._first && (c = !0),
                                            this._rawPrevTime = t;
                                    else {
                                        if (this._rawPrevTime = m || !e || t || this._rawPrevTime === t ? t : r,
                                            0 === t && o)
                                            for (n = this._first; n && 0 === n._startTime;)
                                                n._duration || (o = !1),
                                                    n = n._next;
                                        t = 0,
                                            this._initted || (c = !0)
                                    }
                                else if (0 === m && 0 > x && (c = !0),
                                    this._time = this._rawPrevTime = t,
                                    this._locked || (this._totalTime = t,
                                        0 !== this._repeat && (u = m + this._repeatDelay,
                                            this._cycle = this._totalTime / u >> 0,
                                            0 !== this._cycle && this._cycle === this._totalTime / u && t >= g && this._cycle--,
                                            this._time = this._totalTime - this._cycle * u,
                                            this._yoyo && 0 != (1 & this._cycle) && (this._time = m - this._time),
                                            this._time > m ? (this._time = m,
                                                t = m + 1e-4) : this._time < 0 ? this._time = t = 0 : t = this._time)),
                                    this._hasPause && !this._forcingPlayhead && !e && m > t) {
                                    if ((t = this._time) >= v || this._repeat && w !== this._cycle)
                                        for (n = this._first; n && n._startTime <= t && !d;)
                                            n._duration || "isPause" !== n.data || n.ratio || 0 === n._startTime && 0 === this._rawPrevTime || (d = n),
                                                n = n._next;
                                    else
                                        for (n = this._last; n && n._startTime >= t && !d;)
                                            n._duration || "isPause" === n.data && n._rawPrevTime > 0 && (d = n),
                                                n = n._prev;
                                    d && (this._time = t = d._startTime,
                                        this._totalTime = t + this._cycle * (this._totalDuration + this._repeatDelay))
                                }
                                if (this._cycle !== w && !this._locked) {
                                    var S = this._yoyo && 0 != (1 & w)
                                        , E = S === (this._yoyo && 0 != (1 & this._cycle))
                                        , T = this._totalTime
                                        , M = this._cycle
                                        , A = this._rawPrevTime
                                        , P = this._time;
                                    if (this._totalTime = w * m,
                                        this._cycle < w ? S = !S : this._totalTime += m,
                                        this._time = v,
                                        this._rawPrevTime = 0 === m ? x - 1e-4 : x,
                                        this._cycle = w,
                                        this._locked = !0,
                                        v = S ? 0 : m,
                                        this.render(v, e, 0 === m),
                                        e || this._gc || this.vars.onRepeat && (this._cycle = M,
                                            this._locked = !1,
                                            this._callback("onRepeat")),
                                        v !== this._time)
                                        return;
                                    if (E && (this._cycle = w,
                                        this._locked = !0,
                                        v = S ? m + 1e-4 : -1e-4,
                                        this.render(v, !0, !1)),
                                        this._locked = !1,
                                        this._paused && !b)
                                        return;
                                    this._time = P,
                                        this._totalTime = T,
                                        this._cycle = M,
                                        this._rawPrevTime = A
                                }
                                if (!(this._time !== v && this._first || i || c || d))
                                    return void (g !== this._totalTime && this._onUpdate && (e || this._callback("onUpdate")));
                                if (this._initted || (this._initted = !0),
                                    this._active || !this._paused && this._totalTime !== g && t > 0 && (this._active = !0),
                                    0 === g && this.vars.onStart && (0 === this._totalTime && this._totalDuration || e || this._callback("onStart")),
                                    (p = this._time) >= v)
                                    for (n = this._first; n && (s = n._next,
                                        p === this._time && (!this._paused || b));)
                                        (n._active || n._startTime <= this._time && !n._paused && !n._gc) && (d === n && this.pause(),
                                            n._reversed ? n.render((n._dirty ? n.totalDuration() : n._totalDuration) - (t - n._startTime) * n._timeScale, e, i) : n.render((t - n._startTime) * n._timeScale, e, i)),
                                            n = s;
                                else
                                    for (n = this._last; n && (s = n._prev,
                                        p === this._time && (!this._paused || b));) {
                                        if (n._active || n._startTime <= v && !n._paused && !n._gc) {
                                            if (d === n) {
                                                for (d = n._prev; d && d.endTime() > this._time;)
                                                    d.render(d._reversed ? d.totalDuration() - (t - d._startTime) * d._timeScale : (t - d._startTime) * d._timeScale, e, i),
                                                        d = d._prev;
                                                d = null,
                                                    this.pause()
                                            }
                                            n._reversed ? n.render((n._dirty ? n.totalDuration() : n._totalDuration) - (t - n._startTime) * n._timeScale, e, i) : n.render((t - n._startTime) * n._timeScale, e, i)
                                        }
                                        n = s
                                    }
                                this._onUpdate && (e || (a.length && h(),
                                    this._callback("onUpdate"))),
                                    l && (this._locked || this._gc || (_ === this._startTime || y !== this._timeScale) && (0 === this._time || f >= this.totalDuration()) && (o && (a.length && h(),
                                        this._timeline.autoRemoveChildren && this._enabled(!1, !1),
                                        this._active = !1),
                                        !e && this.vars[l] && this._callback(l)))
                            }
                            ,
                            u.getActive = function (t, e, i) {
                                null == t && (t = !0),
                                    null == e && (e = !0),
                                    null == i && (i = !1);
                                var n, r, o = [], a = this.getChildren(t, e, i), s = 0, h = a.length;
                                for (n = 0; h > n; n++)
                                    r = a[n],
                                        r.isActive() && (o[s++] = r);
                                return o
                            }
                            ,
                            u.getLabelAfter = function (t) {
                                t || 0 !== t && (t = this._time);
                                var e, i = this.getLabelsArray(), n = i.length;
                                for (e = 0; n > e; e++)
                                    if (i[e].time > t)
                                        return i[e].name;
                                return null
                            }
                            ,
                            u.getLabelBefore = function (t) {
                                null == t && (t = this._time);
                                for (var e = this.getLabelsArray(), i = e.length; --i > -1;)
                                    if (e[i].time < t)
                                        return e[i].name;
                                return null
                            }
                            ,
                            u.getLabelsArray = function () {
                                var t, e = [], i = 0;
                                for (t in this._labels)
                                    e[i++] = {
                                        time: this._labels[t],
                                        name: t
                                    };
                                return e.sort(function (t, e) {
                                    return t.time - e.time
                                }),
                                    e
                            }
                            ,
                            u.invalidate = function () {
                                return this._locked = !1,
                                    t.prototype.invalidate.call(this)
                            }
                            ,
                            u.progress = function (t, e) {
                                return arguments.length ? this.totalTime(this.duration() * (this._yoyo && 0 != (1 & this._cycle) ? 1 - t : t) + this._cycle * (this._duration + this._repeatDelay), e) : this._time / this.duration()
                            }
                            ,
                            u.totalProgress = function (t, e) {
                                return arguments.length ? this.totalTime(this.totalDuration() * t, e) : this._totalTime / this.totalDuration()
                            }
                            ,
                            u.totalDuration = function (e) {
                                return arguments.length ? -1 !== this._repeat && e ? this.timeScale(this.totalDuration() / e) : this : (this._dirty && (t.prototype.totalDuration.call(this),
                                    this._totalDuration = -1 === this._repeat ? 999999999999 : this._duration * (this._repeat + 1) + this._repeatDelay * this._repeat),
                                    this._totalDuration)
                            }
                            ,
                            u.time = function (t, e) {
                                return arguments.length ? (this._dirty && this.totalDuration(),
                                    t > this._duration && (t = this._duration),
                                    this._yoyo && 0 != (1 & this._cycle) ? t = this._duration - t + this._cycle * (this._duration + this._repeatDelay) : 0 !== this._repeat && (t += this._cycle * (this._duration + this._repeatDelay)),
                                    this.totalTime(t, e)) : this._time
                            }
                            ,
                            u.repeat = function (t) {
                                return arguments.length ? (this._repeat = t,
                                    this._uncache(!0)) : this._repeat
                            }
                            ,
                            u.repeatDelay = function (t) {
                                return arguments.length ? (this._repeatDelay = t,
                                    this._uncache(!0)) : this._repeatDelay
                            }
                            ,
                            u.yoyo = function (t) {
                                return arguments.length ? (this._yoyo = t,
                                    this) : this._yoyo
                            }
                            ,
                            u.currentLabel = function (t) {
                                return arguments.length ? this.seek(t, !0) : this.getLabelBefore(this._time + 1e-8)
                            }
                            ,
                            n
                    }, !0),
                    function () {
                        var t = 180 / Math.PI
                            , e = []
                            , i = []
                            , n = []
                            , r = {}
                            , o = s._gsDefine.globals
                            , a = function (t, e, i, n) {
                                i === n && (i = n - (n - e) / 1e6),
                                    t === e && (e = t + (i - t) / 1e6),
                                    this.a = t,
                                    this.b = e,
                                    this.c = i,
                                    this.d = n,
                                    this.da = n - t,
                                    this.ca = i - t,
                                    this.ba = e - t
                            }
                            , h = function (t, e, i, n) {
                                var r = {
                                    a: t
                                }
                                    , o = {}
                                    , a = {}
                                    , s = {
                                        c: n
                                    }
                                    , h = (t + e) / 2
                                    , l = (e + i) / 2
                                    , c = (i + n) / 2
                                    , u = (h + l) / 2
                                    , d = (l + c) / 2
                                    , p = (d - u) / 8;
                                return r.b = h + (t - h) / 4,
                                    o.b = u + p,
                                    r.c = o.a = (r.b + o.b) / 2,
                                    o.c = a.a = (u + d) / 2,
                                    a.b = d - p,
                                    s.b = c + (n - c) / 4,
                                    a.c = s.a = (a.b + s.b) / 2,
                                    [r, o, a, s]
                            }
                            , l = function (t, r, o, a, s) {
                                var l, c, u, d, p, f, m, v, g, _, y, x, b, w = t.length - 1, S = 0, E = t[0].a;
                                for (l = 0; w > l; l++)
                                    p = t[S],
                                        c = p.a,
                                        u = p.d,
                                        d = t[S + 1].d,
                                        s ? (y = e[l],
                                            x = i[l],
                                            b = (x + y) * r * .25 / (a ? .5 : n[l] || .5),
                                            f = u - (u - c) * (a ? .5 * r : 0 !== y ? b / y : 0),
                                            m = u + (d - u) * (a ? .5 * r : 0 !== x ? b / x : 0),
                                            v = u - (f + ((m - f) * (3 * y / (y + x) + .5) / 4 || 0))) : (f = u - (u - c) * r * .5,
                                                m = u + (d - u) * r * .5,
                                                v = u - (f + m) / 2),
                                        f += v,
                                        m += v,
                                        p.c = g = f,
                                        p.b = 0 !== l ? E : E = p.a + .6 * (p.c - p.a),
                                        p.da = u - c,
                                        p.ca = g - c,
                                        p.ba = E - c,
                                        o ? (_ = h(c, E, g, u),
                                            t.splice(S, 1, _[0], _[1], _[2], _[3]),
                                            S += 4) : S++,
                                        E = m;
                                p = t[S],
                                    p.b = E,
                                    p.c = E + .4 * (p.d - E),
                                    p.da = p.d - p.a,
                                    p.ca = p.c - p.a,
                                    p.ba = E - p.a,
                                    o && (_ = h(p.a, E, p.c, p.d),
                                        t.splice(S, 1, _[0], _[1], _[2], _[3]))
                            }
                            , c = function (t, n, r, o) {
                                var s, h, l, c, u, d, p = [];
                                if (o)
                                    for (t = [o].concat(t),
                                        h = t.length; --h > -1;)
                                        "string" == typeof (d = t[h][n]) && "=" === d.charAt(1) && (t[h][n] = o[n] + Number(d.charAt(0) + d.substr(2)));
                                if (0 > (s = t.length - 2))
                                    return p[0] = new a(t[0][n], 0, 0, t[-1 > s ? 0 : 1][n]),
                                        p;
                                for (h = 0; s > h; h++)
                                    l = t[h][n],
                                        c = t[h + 1][n],
                                        p[h] = new a(l, 0, 0, c),
                                        r && (u = t[h + 2][n],
                                            e[h] = (e[h] || 0) + (c - l) * (c - l),
                                            i[h] = (i[h] || 0) + (u - c) * (u - c));
                                return p[h] = new a(t[h][n], 0, 0, t[h + 1][n]),
                                    p
                            }
                            , u = function (t, o, a, s, h, u) {
                                var d, p, f, m, v, g, _, y, x = {}, b = [], w = u || t[0];
                                h = "string" == typeof h ? "," + h + "," : ",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",
                                    null == o && (o = 1);
                                for (p in t[0])
                                    b.push(p);
                                if (t.length > 1) {
                                    for (y = t[t.length - 1],
                                        _ = !0,
                                        d = b.length; --d > -1;)
                                        if (p = b[d],
                                            Math.abs(w[p] - y[p]) > .05) {
                                            _ = !1;
                                            break
                                        }
                                    _ && (t = t.concat(),
                                        u && t.unshift(u),
                                        t.push(t[1]),
                                        u = t[t.length - 3])
                                }
                                for (e.length = i.length = n.length = 0,
                                    d = b.length; --d > -1;)
                                    p = b[d],
                                        r[p] = -1 !== h.indexOf("," + p + ","),
                                        x[p] = c(t, p, r[p], u);
                                for (d = e.length; --d > -1;)
                                    e[d] = Math.sqrt(e[d]),
                                        i[d] = Math.sqrt(i[d]);
                                if (!s) {
                                    for (d = b.length; --d > -1;)
                                        if (r[p])
                                            for (f = x[b[d]],
                                                g = f.length - 1,
                                                m = 0; g > m; m++)
                                                v = f[m + 1].da / i[m] + f[m].da / e[m] || 0,
                                                    n[m] = (n[m] || 0) + v * v;
                                    for (d = n.length; --d > -1;)
                                        n[d] = Math.sqrt(n[d])
                                }
                                for (d = b.length,
                                    m = a ? 4 : 1; --d > -1;)
                                    p = b[d],
                                        f = x[p],
                                        l(f, o, a, s, r[p]),
                                        _ && (f.splice(0, m),
                                            f.splice(f.length - m, m));
                                return x
                            }
                            , d = function (t, e, i) {
                                e = e || "soft";
                                var n, r, o, s, h, l, c, u, d, p, f, m = {}, v = "cubic" === e ? 3 : 2, g = "soft" === e, _ = [];
                                if (g && i && (t = [i].concat(t)),
                                    null == t || t.length < v + 1)
                                    throw "invalid Bezier data";
                                for (d in t[0])
                                    _.push(d);
                                for (l = _.length; --l > -1;) {
                                    for (d = _[l],
                                        m[d] = h = [],
                                        p = 0,
                                        u = t.length,
                                        c = 0; u > c; c++)
                                        n = null == i ? t[c][d] : "string" == typeof (f = t[c][d]) && "=" === f.charAt(1) ? i[d] + Number(f.charAt(0) + f.substr(2)) : Number(f),
                                            g && c > 1 && u - 1 > c && (h[p++] = (n + h[p - 2]) / 2),
                                            h[p++] = n;
                                    for (u = p - v + 1,
                                        p = 0,
                                        c = 0; u > c; c += v)
                                        n = h[c],
                                            r = h[c + 1],
                                            o = h[c + 2],
                                            s = 2 === v ? 0 : h[c + 3],
                                            h[p++] = f = 3 === v ? new a(n, r, o, s) : new a(n, (2 * r + n) / 3, (2 * r + o) / 3, o);
                                    h.length = p
                                }
                                return m
                            }
                            , p = function (t, e, i) {
                                for (var n, r, o, a, s, h, l, c, u, d, p, f = 1 / i, m = t.length; --m > -1;)
                                    for (d = t[m],
                                        o = d.a,
                                        a = d.d - o,
                                        s = d.c - o,
                                        h = d.b - o,
                                        n = r = 0,
                                        c = 1; i >= c; c++)
                                        l = f * c,
                                            u = 1 - l,
                                            n = r - (r = (l * l * a + 3 * u * (l * s + u * h)) * l),
                                            p = m * i + c - 1,
                                            e[p] = (e[p] || 0) + n * n
                            }
                            , f = function (t, e) {
                                e = e >> 0 || 6;
                                var i, n, r, o, a = [], s = [], h = 0, l = 0, c = e - 1, u = [], d = [];
                                for (i in t)
                                    p(t[i], a, e);
                                for (r = a.length,
                                    n = 0; r > n; n++)
                                    h += Math.sqrt(a[n]),
                                        o = n % e,
                                        d[o] = h,
                                        o === c && (l += h,
                                            o = n / e >> 0,
                                            u[o] = d,
                                            s[o] = l,
                                            h = 0,
                                            d = []);
                                return {
                                    length: l,
                                    lengths: s,
                                    segments: u
                                }
                            }
                            , m = s._gsDefine.plugin({
                                propName: "bezier",
                                priority: -1,
                                version: "1.3.7",
                                API: 2,
                                global: !0,
                                init: function (t, e, i) {
                                    this._target = t,
                                        e instanceof Array && (e = {
                                            values: e
                                        }),
                                        this._func = {},
                                        this._mod = {},
                                        this._props = [],
                                        this._timeRes = null == e.timeResolution ? 6 : parseInt(e.timeResolution, 10);
                                    var n, r, o, a, s, h = e.values || [], l = {}, c = h[0], p = e.autoRotate || i.vars.orientToBezier;
                                    this._autoRotate = p ? p instanceof Array ? p : [["x", "y", "rotation", !0 === p ? 0 : Number(p) || 0]] : null;
                                    for (n in c)
                                        this._props.push(n);
                                    for (o = this._props.length; --o > -1;)
                                        n = this._props[o],
                                            this._overwriteProps.push(n),
                                            r = this._func[n] = "function" == typeof t[n],
                                            l[n] = r ? t[n.indexOf("set") || "function" != typeof t["get" + n.substr(3)] ? n : "get" + n.substr(3)]() : parseFloat(t[n]),
                                            s || l[n] !== h[0][n] && (s = l);
                                    if (this._beziers = "cubic" !== e.type && "quadratic" !== e.type && "soft" !== e.type ? u(h, isNaN(e.curviness) ? 1 : e.curviness, !1, "thruBasic" === e.type, e.correlate, s) : d(h, e.type, l),
                                        this._segCount = this._beziers[n].length,
                                        this._timeRes) {
                                        var m = f(this._beziers, this._timeRes);
                                        this._length = m.length,
                                            this._lengths = m.lengths,
                                            this._segments = m.segments,
                                            this._l1 = this._li = this._s1 = this._si = 0,
                                            this._l2 = this._lengths[0],
                                            this._curSeg = this._segments[0],
                                            this._s2 = this._curSeg[0],
                                            this._prec = 1 / this._curSeg.length
                                    }
                                    if (p = this._autoRotate)
                                        for (this._initialRotations = [],
                                            p[0] instanceof Array || (this._autoRotate = p = [p]),
                                            o = p.length; --o > -1;) {
                                            for (a = 0; 3 > a; a++)
                                                n = p[o][a],
                                                    this._func[n] = "function" == typeof t[n] && t[n.indexOf("set") || "function" != typeof t["get" + n.substr(3)] ? n : "get" + n.substr(3)];
                                            n = p[o][2],
                                                this._initialRotations[o] = (this._func[n] ? this._func[n].call(this._target) : this._target[n]) || 0,
                                                this._overwriteProps.push(n)
                                        }
                                    return this._startRatio = i.vars.runBackwards ? 1 : 0,
                                        !0
                                },
                                set: function (e) {
                                    var i, n, r, o, a, s, h, l, c, u, d = this._segCount, p = this._func, f = this._target, m = e !== this._startRatio;
                                    if (this._timeRes) {
                                        if (c = this._lengths,
                                            u = this._curSeg,
                                            e *= this._length,
                                            r = this._li,
                                            e > this._l2 && d - 1 > r) {
                                            for (l = d - 1; l > r && (this._l2 = c[++r]) <= e;)
                                                ;
                                            this._l1 = c[r - 1],
                                                this._li = r,
                                                this._curSeg = u = this._segments[r],
                                                this._s2 = u[this._s1 = this._si = 0]
                                        } else if (e < this._l1 && r > 0) {
                                            for (; r > 0 && (this._l1 = c[--r]) >= e;)
                                                ;
                                            0 === r && e < this._l1 ? this._l1 = 0 : r++,
                                                this._l2 = c[r],
                                                this._li = r,
                                                this._curSeg = u = this._segments[r],
                                                this._s1 = u[(this._si = u.length - 1) - 1] || 0,
                                                this._s2 = u[this._si]
                                        }
                                        if (i = r,
                                            e -= this._l1,
                                            r = this._si,
                                            e > this._s2 && r < u.length - 1) {
                                            for (l = u.length - 1; l > r && (this._s2 = u[++r]) <= e;)
                                                ;
                                            this._s1 = u[r - 1],
                                                this._si = r
                                        } else if (e < this._s1 && r > 0) {
                                            for (; r > 0 && (this._s1 = u[--r]) >= e;)
                                                ;
                                            0 === r && e < this._s1 ? this._s1 = 0 : r++,
                                                this._s2 = u[r],
                                                this._si = r
                                        }
                                        s = (r + (e - this._s1) / (this._s2 - this._s1)) * this._prec || 0
                                    } else
                                        i = 0 > e ? 0 : e >= 1 ? d - 1 : d * e >> 0,
                                            s = (e - i * (1 / d)) * d;
                                    for (n = 1 - s,
                                        r = this._props.length; --r > -1;)
                                        o = this._props[r],
                                            a = this._beziers[o][i],
                                            h = (s * s * a.da + 3 * n * (s * a.ca + n * a.ba)) * s + a.a,
                                            this._mod[o] && (h = this._mod[o](h, f)),
                                            p[o] ? f[o](h) : f[o] = h;
                                    if (this._autoRotate) {
                                        var v, g, _, y, x, b, w, S = this._autoRotate;
                                        for (r = S.length; --r > -1;)
                                            o = S[r][2],
                                                b = S[r][3] || 0,
                                                w = !0 === S[r][4] ? 1 : t,
                                                a = this._beziers[S[r][0]],
                                                v = this._beziers[S[r][1]],
                                                a && v && (a = a[i],
                                                    v = v[i],
                                                    g = a.a + (a.b - a.a) * s,
                                                    y = a.b + (a.c - a.b) * s,
                                                    g += (y - g) * s,
                                                    y += (a.c + (a.d - a.c) * s - y) * s,
                                                    _ = v.a + (v.b - v.a) * s,
                                                    x = v.b + (v.c - v.b) * s,
                                                    _ += (x - _) * s,
                                                    x += (v.c + (v.d - v.c) * s - x) * s,
                                                    h = m ? Math.atan2(x - _, y - g) * w + b : this._initialRotations[r],
                                                    this._mod[o] && (h = this._mod[o](h, f)),
                                                    p[o] ? f[o](h) : f[o] = h)
                                    }
                                }
                            })
                            , v = m.prototype;
                        m.bezierThrough = u,
                            m.cubicToQuadratic = h,
                            m._autoCSS = !0,
                            m.quadraticToCubic = function (t, e, i) {
                                return new a(t, (2 * e + t) / 3, (2 * e + i) / 3, i)
                            }
                            ,
                            m._cssRegister = function () {
                                var t = o.CSSPlugin;
                                if (t) {
                                    var e = t._internals
                                        , i = e._parseToProxy
                                        , n = e._setPluginRatio
                                        , r = e.CSSPropTween;
                                    e._registerComplexSpecialProp("bezier", {
                                        parser: function (t, e, o, a, s, h) {
                                            e instanceof Array && (e = {
                                                values: e
                                            }),
                                                h = new m;
                                            var l, c, u, d = e.values, p = d.length - 1, f = [], v = {};
                                            if (0 > p)
                                                return s;
                                            for (l = 0; p >= l; l++)
                                                u = i(t, d[l], a, s, h, p !== l),
                                                    f[l] = u.end;
                                            for (c in e)
                                                v[c] = e[c];
                                            return v.values = f,
                                                s = new r(t, "bezier", 0, 0, u.pt, 2),
                                                s.data = u,
                                                s.plugin = h,
                                                s.setRatio = n,
                                                0 === v.autoRotate && (v.autoRotate = !0),
                                                !v.autoRotate || v.autoRotate instanceof Array || (l = !0 === v.autoRotate ? 0 : Number(v.autoRotate),
                                                    v.autoRotate = null != u.end.left ? [["left", "top", "rotation", l, !1]] : null != u.end.x && [["x", "y", "rotation", l, !1]]),
                                                v.autoRotate && (a._transform || a._enableTransforms(!1),
                                                    u.autoRotate = a._target._gsTransform,
                                                    u.proxy.rotation = u.autoRotate.rotation || 0,
                                                    a._overwriteProps.push("rotation")),
                                                h._onInitTween(u.proxy, v, a._tween),
                                                s
                                        }
                                    })
                                }
                            }
                            ,
                            v._mod = function (t) {
                                for (var e, i = this._overwriteProps, n = i.length; --n > -1;)
                                    (e = t[i[n]]) && "function" == typeof e && (this._mod[i[n]] = e)
                            }
                            ,
                            v._kill = function (t) {
                                var e, i, n = this._props;
                                for (e in this._beziers)
                                    if (e in t)
                                        for (delete this._beziers[e],
                                            delete this._func[e],
                                            i = n.length; --i > -1;)
                                            n[i] === e && n.splice(i, 1);
                                if (n = this._autoRotate)
                                    for (i = n.length; --i > -1;)
                                        t[n[i][2]] && n.splice(i, 1);
                                return this._super._kill.call(this, t)
                            }
                    }(),
                    s._gsDefine("plugins.CSSPlugin", ["plugins.TweenPlugin", "TweenLite"], function (t, e) {
                        var i, n, r, o, h = function e() {
                            t.call(this, "css"),
                                this._overwriteProps.length = 0,
                                this.setRatio = e.prototype.setRatio
                        }, l = s._gsDefine.globals, c = {}, u = h.prototype = new t("css");
                        u.constructor = h,
                            h.version = "1.19.1",
                            h.API = 2,
                            h.defaultTransformPerspective = 0,
                            h.defaultSkewType = "compensated",
                            h.defaultSmoothOrigin = !0,
                            u = "px",
                            h.suffixMap = {
                                top: u,
                                right: u,
                                bottom: u,
                                left: u,
                                width: u,
                                height: u,
                                fontSize: u,
                                padding: u,
                                margin: u,
                                perspective: u,
                                lineHeight: ""
                            };
                        var d, p, f, m, v, g, _, y, x = /(?:\-|\.|\b)(\d|\.|e\-)+/g, b = /(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g, w = /(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi, S = /(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g, E = /(?:\d|\-|\+|=|#|\.)*/g, T = /opacity *= *([^)]*)/i, M = /opacity:([^;]*)/i, A = /alpha\(opacity *=.+?\)/i, P = /^(rgb|hsl)/, R = /([A-Z])/g, L = /-([a-z])/gi, O = /(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi, I = function (t, e) {
                            return e.toUpperCase()
                        }, C = /(?:Left|Right|Width)/i, D = /(M11|M12|M21|M22)=[\d\-\.e]+/gi, N = /progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i, U = /,(?=[^\)]*(?:\(|$))/gi, B = /[\s,\(]/i, F = Math.PI / 180, z = 180 / Math.PI, G = {}, j = {
                            style: {}
                        }, k = s.document || {
                            createElement: function () {
                                return j
                            }
                        }, H = function (t, e) {
                            return k.createElementNS ? k.createElementNS(e || "http://www.w3.org/1999/xhtml", t) : k.createElement(t)
                        }, V = H("div"), W = H("img"), X = h._internals = {
                            _specialProps: c
                        }, Y = (s.navigator || {}).userAgent || "", q = function () {
                            var t = Y.indexOf("Android")
                                , e = H("a");
                            return f = -1 !== Y.indexOf("Safari") && -1 === Y.indexOf("Chrome") && (-1 === t || parseFloat(Y.substr(t + 8, 2)) > 3),
                                v = f && parseFloat(Y.substr(Y.indexOf("Version/") + 8, 2)) < 6,
                                m = -1 !== Y.indexOf("Firefox"),
                                (/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(Y) || /Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(Y)) && (g = parseFloat(RegExp.$1)),
                                !!e && (e.style.cssText = "top:1px;opacity:.55;",
                                    /^0.55/.test(e.style.opacity))
                        }(), Z = function (t) {
                            return T.test("string" == typeof t ? t : (t.currentStyle ? t.currentStyle.filter : t.style.filter) || "") ? parseFloat(RegExp.$1) / 100 : 1
                        }, J = function (t) {
                            s.console && console.log(t)
                        }, K = "", Q = "", $ = function (t, e) {
                            e = e || V;
                            var i, n, r = e.style;
                            if (void 0 !== r[t])
                                return t;
                            for (t = t.charAt(0).toUpperCase() + t.substr(1),
                                i = ["O", "Moz", "ms", "Ms", "Webkit"],
                                n = 5; --n > -1 && void 0 === r[i[n] + t];)
                                ;
                            return n >= 0 ? (Q = 3 === n ? "ms" : i[n],
                                K = "-" + Q.toLowerCase() + "-",
                                Q + t) : null
                        }, tt = k.defaultView ? k.defaultView.getComputedStyle : function () { }
                            , et = h.getStyle = function (t, e, i, n, r) {
                                var o;
                                return q || "opacity" !== e ? (!n && t.style[e] ? o = t.style[e] : (i = i || tt(t)) ? o = i[e] || i.getPropertyValue(e) || i.getPropertyValue(e.replace(R, "-$1").toLowerCase()) : t.currentStyle && (o = t.currentStyle[e]),
                                    null == r || o && "none" !== o && "auto" !== o && "auto auto" !== o ? o : r) : Z(t)
                            }
                            , it = X.convertToPixels = function (t, i, n, r, o) {
                                if ("px" === r || !r)
                                    return n;
                                if ("auto" === r || !n)
                                    return 0;
                                var a, s, l, c = C.test(i), u = t, d = V.style, p = 0 > n, f = 1 === n;
                                if (p && (n = -n),
                                    f && (n *= 100),
                                    "%" === r && -1 !== i.indexOf("border"))
                                    a = n / 100 * (c ? t.clientWidth : t.clientHeight);
                                else {
                                    if (d.cssText = "border:0 solid red;position:" + et(t, "position") + ";line-height:0;",
                                        "%" !== r && u.appendChild && "v" !== r.charAt(0) && "rem" !== r)
                                        d[c ? "borderLeftWidth" : "borderTopWidth"] = n + r;
                                    else {
                                        if (u = t.parentNode || k.body,
                                            s = u._gsCache,
                                            l = e.ticker.frame,
                                            s && c && s.time === l)
                                            return s.width * n / 100;
                                        d[c ? "width" : "height"] = n + r
                                    }
                                    u.appendChild(V),
                                        a = parseFloat(V[c ? "offsetWidth" : "offsetHeight"]),
                                        u.removeChild(V),
                                        c && "%" === r && !1 !== h.cacheWidths && (s = u._gsCache = u._gsCache || {},
                                            s.time = l,
                                            s.width = a / n * 100),
                                        0 !== a || o || (a = it(t, i, n, r, !0))
                                }
                                return f && (a /= 100),
                                    p ? -a : a
                            }
                            , nt = X.calculateOffset = function (t, e, i) {
                                if ("absolute" !== et(t, "position", i))
                                    return 0;
                                var n = "left" === e ? "Left" : "Top"
                                    , r = et(t, "margin" + n, i);
                                return t["offset" + n] - (it(t, e, parseFloat(r), r.replace(E, "")) || 0)
                            }
                            , rt = function (t, e) {
                                var i, n, r, o = {};
                                if (e = e || tt(t, null))
                                    if (i = e.length)
                                        for (; --i > -1;)
                                            r = e[i],
                                                (-1 === r.indexOf("-transform") || Ot === r) && (o[r.replace(L, I)] = e.getPropertyValue(r));
                                    else
                                        for (i in e)
                                            (-1 === i.indexOf("Transform") || Lt === i) && (o[i] = e[i]);
                                else if (e = t.currentStyle || t.style)
                                    for (i in e)
                                        "string" == typeof i && void 0 === o[i] && (o[i.replace(L, I)] = e[i]);
                                return q || (o.opacity = Z(t)),
                                    n = Wt(t, e, !1),
                                    o.rotation = n.rotation,
                                    o.skewX = n.skewX,
                                    o.scaleX = n.scaleX,
                                    o.scaleY = n.scaleY,
                                    o.x = n.x,
                                    o.y = n.y,
                                    Ct && (o.z = n.z,
                                        o.rotationX = n.rotationX,
                                        o.rotationY = n.rotationY,
                                        o.scaleZ = n.scaleZ),
                                    o.filters && delete o.filters,
                                    o
                            }, ot = function (t, e, i, n, r) {
                                var o, a, s, h = {}, l = t.style;
                                for (a in i)
                                    "cssText" !== a && "length" !== a && isNaN(a) && (e[a] !== (o = i[a]) || r && r[a]) && -1 === a.indexOf("Origin") && ("number" == typeof o || "string" == typeof o) && (h[a] = "auto" !== o || "left" !== a && "top" !== a ? "" !== o && "auto" !== o && "none" !== o || "string" != typeof e[a] || "" === e[a].replace(S, "") ? o : 0 : nt(t, a),
                                        void 0 !== l[a] && (s = new xt(l, a, l[a], s)));
                                if (n)
                                    for (a in n)
                                        "className" !== a && (h[a] = n[a]);
                                return {
                                    difs: h,
                                    firstMPT: s
                                }
                            }, at = {
                                width: ["Left", "Right"],
                                height: ["Top", "Bottom"]
                            }, st = ["marginLeft", "marginRight", "marginTop", "marginBottom"], ht = function (t, e, i) {
                                if ("svg" === (t.nodeName + "").toLowerCase())
                                    return (i || tt(t))[e] || 0;
                                if (t.getCTM && kt(t))
                                    return t.getBBox()[e] || 0;
                                var n = parseFloat("width" === e ? t.offsetWidth : t.offsetHeight)
                                    , r = at[e]
                                    , o = r.length;
                                for (i = i || tt(t, null); --o > -1;)
                                    n -= parseFloat(et(t, "padding" + r[o], i, !0)) || 0,
                                        n -= parseFloat(et(t, "border" + r[o] + "Width", i, !0)) || 0;
                                return n
                            }, lt = function t(e, i) {
                                if ("contain" === e || "auto" === e || "auto auto" === e)
                                    return e + " ";
                                (null == e || "" === e) && (e = "0 0");
                                var n, r = e.split(" "), o = -1 !== e.indexOf("left") ? "0%" : -1 !== e.indexOf("right") ? "100%" : r[0], a = -1 !== e.indexOf("top") ? "0%" : -1 !== e.indexOf("bottom") ? "100%" : r[1];
                                if (r.length > 3 && !i) {
                                    for (r = e.split(", ").join(",").split(","),
                                        e = [],
                                        n = 0; n < r.length; n++)
                                        e.push(t(r[n]));
                                    return e.join(",")
                                }
                                return null == a ? a = "center" === o ? "50%" : "0" : "center" === a && (a = "50%"),
                                    ("center" === o || isNaN(parseFloat(o)) && -1 === (o + "").indexOf("=")) && (o = "50%"),
                                    e = o + " " + a + (r.length > 2 ? " " + r[2] : ""),
                                    i && (i.oxp = -1 !== o.indexOf("%"),
                                        i.oyp = -1 !== a.indexOf("%"),
                                        i.oxr = "=" === o.charAt(1),
                                        i.oyr = "=" === a.charAt(1),
                                        i.ox = parseFloat(o.replace(S, "")),
                                        i.oy = parseFloat(a.replace(S, "")),
                                        i.v = e),
                                    i || e
                            }, ct = function (t, e) {
                                return "function" == typeof t && (t = t(y, _)),
                                    "string" == typeof t && "=" === t.charAt(1) ? parseInt(t.charAt(0) + "1", 10) * parseFloat(t.substr(2)) : parseFloat(t) - parseFloat(e) || 0
                            }, ut = function (t, e) {
                                return "function" == typeof t && (t = t(y, _)),
                                    null == t ? e : "string" == typeof t && "=" === t.charAt(1) ? parseInt(t.charAt(0) + "1", 10) * parseFloat(t.substr(2)) + e : parseFloat(t) || 0
                            }, dt = function (t, e, i, n) {
                                var r, o, a, s, h;
                                return "function" == typeof t && (t = t(y, _)),
                                    null == t ? s = e : "number" == typeof t ? s = t : (r = 360,
                                        o = t.split("_"),
                                        h = "=" === t.charAt(1),
                                        a = (h ? parseInt(t.charAt(0) + "1", 10) * parseFloat(o[0].substr(2)) : parseFloat(o[0])) * (-1 === t.indexOf("rad") ? 1 : z) - (h ? 0 : e),
                                        o.length && (n && (n[i] = e + a),
                                            -1 !== t.indexOf("short") && (a %= r) !== a % (r / 2) && (a = 0 > a ? a + r : a - r),
                                            -1 !== t.indexOf("_cw") && 0 > a ? a = (a + 9999999999 * r) % r - (a / r | 0) * r : -1 !== t.indexOf("ccw") && a > 0 && (a = (a - 9999999999 * r) % r - (a / r | 0) * r)),
                                        s = e + a),
                                    1e-6 > s && s > -1e-6 && (s = 0),
                                    s
                            }, pt = {
                                aqua: [0, 255, 255],
                                lime: [0, 255, 0],
                                silver: [192, 192, 192],
                                black: [0, 0, 0],
                                maroon: [128, 0, 0],
                                teal: [0, 128, 128],
                                blue: [0, 0, 255],
                                navy: [0, 0, 128],
                                white: [255, 255, 255],
                                fuchsia: [255, 0, 255],
                                olive: [128, 128, 0],
                                yellow: [255, 255, 0],
                                orange: [255, 165, 0],
                                gray: [128, 128, 128],
                                purple: [128, 0, 128],
                                green: [0, 128, 0],
                                red: [255, 0, 0],
                                pink: [255, 192, 203],
                                cyan: [0, 255, 255],
                                transparent: [255, 255, 255, 0]
                            }, ft = function (t, e, i) {
                                return t = 0 > t ? t + 1 : t > 1 ? t - 1 : t,
                                    255 * (1 > 6 * t ? e + (i - e) * t * 6 : .5 > t ? i : 2 > 3 * t ? e + (i - e) * (2 / 3 - t) * 6 : e) + .5 | 0
                            }, mt = h.parseColor = function (t, e) {
                                var i, n, r, o, a, s, h, l, c, u, d;
                                if (t)
                                    if ("number" == typeof t)
                                        i = [t >> 16, t >> 8 & 255, 255 & t];
                                    else {
                                        if ("," === t.charAt(t.length - 1) && (t = t.substr(0, t.length - 1)),
                                            pt[t])
                                            i = pt[t];
                                        else if ("#" === t.charAt(0))
                                            4 === t.length && (n = t.charAt(1),
                                                r = t.charAt(2),
                                                o = t.charAt(3),
                                                t = "#" + n + n + r + r + o + o),
                                                t = parseInt(t.substr(1), 16),
                                                i = [t >> 16, t >> 8 & 255, 255 & t];
                                        else if ("hsl" === t.substr(0, 3))
                                            if (i = d = t.match(x),
                                                e) {
                                                if (-1 !== t.indexOf("="))
                                                    return t.match(b)
                                            } else
                                                a = Number(i[0]) % 360 / 360,
                                                    s = Number(i[1]) / 100,
                                                    h = Number(i[2]) / 100,
                                                    r = .5 >= h ? h * (s + 1) : h + s - h * s,
                                                    n = 2 * h - r,
                                                    i.length > 3 && (i[3] = Number(t[3])),
                                                    i[0] = ft(a + 1 / 3, n, r),
                                                    i[1] = ft(a, n, r),
                                                    i[2] = ft(a - 1 / 3, n, r);
                                        else
                                            i = t.match(x) || pt.transparent;
                                        i[0] = Number(i[0]),
                                            i[1] = Number(i[1]),
                                            i[2] = Number(i[2]),
                                            i.length > 3 && (i[3] = Number(i[3]))
                                    }
                                else
                                    i = pt.black;
                                return e && !d && (n = i[0] / 255,
                                    r = i[1] / 255,
                                    o = i[2] / 255,
                                    l = Math.max(n, r, o),
                                    c = Math.min(n, r, o),
                                    h = (l + c) / 2,
                                    l === c ? a = s = 0 : (u = l - c,
                                        s = h > .5 ? u / (2 - l - c) : u / (l + c),
                                        a = l === n ? (r - o) / u + (o > r ? 6 : 0) : l === r ? (o - n) / u + 2 : (n - r) / u + 4,
                                        a *= 60),
                                    i[0] = a + .5 | 0,
                                    i[1] = 100 * s + .5 | 0,
                                    i[2] = 100 * h + .5 | 0),
                                    i
                            }
                            , vt = function (t, e) {
                                var i, n, r, o = t.match(gt) || [], a = 0, s = o.length ? "" : t;
                                for (i = 0; i < o.length; i++)
                                    n = o[i],
                                        r = t.substr(a, t.indexOf(n, a) - a),
                                        a += r.length + n.length,
                                        n = mt(n, e),
                                        3 === n.length && n.push(1),
                                        s += r + (e ? "hsla(" + n[0] + "," + n[1] + "%," + n[2] + "%," + n[3] : "rgba(" + n.join(",")) + ")";
                                return s + t.substr(a)
                            }, gt = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";
                        for (u in pt)
                            gt += "|" + u + "\\b";
                        gt = new RegExp(gt + ")", "gi"),
                            h.colorStringFilter = function (t) {
                                var e, i = t[0] + t[1];
                                gt.test(i) && (e = -1 !== i.indexOf("hsl(") || -1 !== i.indexOf("hsla("),
                                    t[0] = vt(t[0], e),
                                    t[1] = vt(t[1], e)),
                                    gt.lastIndex = 0
                            }
                            ,
                            e.defaultStringFilter || (e.defaultStringFilter = h.colorStringFilter);
                        var _t = function (t, e, i, n) {
                            if (null == t)
                                return function (t) {
                                    return t
                                }
                                    ;
                            var r, o = e ? (t.match(gt) || [""])[0] : "", a = t.split(o).join("").match(w) || [], s = t.substr(0, t.indexOf(a[0])), h = ")" === t.charAt(t.length - 1) ? ")" : "", l = -1 !== t.indexOf(" ") ? " " : ",", c = a.length, u = c > 0 ? a[0].replace(x, "") : "";
                            return c ? r = e ? function (t) {
                                var e, d, p, f;
                                if ("number" == typeof t)
                                    t += u;
                                else if (n && U.test(t)) {
                                    for (f = t.replace(U, "|").split("|"),
                                        p = 0; p < f.length; p++)
                                        f[p] = r(f[p]);
                                    return f.join(",")
                                }
                                if (e = (t.match(gt) || [o])[0],
                                    d = t.split(e).join("").match(w) || [],
                                    p = d.length,
                                    c > p--)
                                    for (; ++p < c;)
                                        d[p] = i ? d[(p - 1) / 2 | 0] : a[p];
                                return s + d.join(l) + l + e + h + (-1 !== t.indexOf("inset") ? " inset" : "")
                            }
                                : function (t) {
                                    var e, o, d;
                                    if ("number" == typeof t)
                                        t += u;
                                    else if (n && U.test(t)) {
                                        for (o = t.replace(U, "|").split("|"),
                                            d = 0; d < o.length; d++)
                                            o[d] = r(o[d]);
                                        return o.join(",")
                                    }
                                    if (e = t.match(w) || [],
                                        d = e.length,
                                        c > d--)
                                        for (; ++d < c;)
                                            e[d] = i ? e[(d - 1) / 2 | 0] : a[d];
                                    return s + e.join(l) + h
                                }
                                : function (t) {
                                    return t
                                }
                        }
                            , yt = function (t) {
                                return t = t.split(","),
                                    function (e, i, n, r, o, a, s) {
                                        var h, l = (i + "").split(" ");
                                        for (s = {},
                                            h = 0; 4 > h; h++)
                                            s[t[h]] = l[h] = l[h] || l[(h - 1) / 2 >> 0];
                                        return r.parse(e, s, o, a)
                                    }
                            }
                            , xt = (X._setPluginRatio = function (t) {
                                this.plugin.setRatio(t);
                                for (var e, i, n, r, o, a = this.data, s = a.proxy, h = a.firstMPT; h;)
                                    e = s[h.v],
                                        h.r ? e = Math.round(e) : 1e-6 > e && e > -1e-6 && (e = 0),
                                        h.t[h.p] = e,
                                        h = h._next;
                                if (a.autoRotate && (a.autoRotate.rotation = a.mod ? a.mod(s.rotation, this.t) : s.rotation),
                                    1 === t || 0 === t)
                                    for (h = a.firstMPT,
                                        o = 1 === t ? "e" : "b"; h;) {
                                        if (i = h.t,
                                            i.type) {
                                            if (1 === i.type) {
                                                for (r = i.xs0 + i.s + i.xs1,
                                                    n = 1; n < i.l; n++)
                                                    r += i["xn" + n] + i["xs" + (n + 1)];
                                                i[o] = r
                                            }
                                        } else
                                            i[o] = i.s + i.xs0;
                                        h = h._next
                                    }
                            }
                                ,
                                function (t, e, i, n, r) {
                                    this.t = t,
                                        this.p = e,
                                        this.v = i,
                                        this.r = r,
                                        n && (n._prev = this,
                                            this._next = n)
                                }
                            )
                            , bt = (X._parseToProxy = function (t, e, i, n, r, o) {
                                var a, s, h, l, c, u = n, d = {}, p = {}, f = i._transform, m = G;
                                for (i._transform = null,
                                    G = e,
                                    n = c = i.parse(t, e, n, r),
                                    G = m,
                                    o && (i._transform = f,
                                        u && (u._prev = null,
                                            u._prev && (u._prev._next = null))); n && n !== u;) {
                                    if (n.type <= 1 && (s = n.p,
                                        p[s] = n.s + n.c,
                                        d[s] = n.s,
                                        o || (l = new xt(n, "s", s, l, n.r),
                                            n.c = 0),
                                        1 === n.type))
                                        for (a = n.l; --a > 0;)
                                            h = "xn" + a,
                                                s = n.p + "_" + h,
                                                p[s] = n.data[h],
                                                d[s] = n[h],
                                                o || (l = new xt(n, h, s, l, n.rxp[h]));
                                    n = n._next
                                }
                                return {
                                    proxy: d,
                                    end: p,
                                    firstMPT: l,
                                    pt: c
                                }
                            }
                                ,
                                X.CSSPropTween = function (t, e, n, r, a, s, h, l, c, u, d) {
                                    this.t = t,
                                        this.p = e,
                                        this.s = n,
                                        this.c = r,
                                        this.n = h || e,
                                        t instanceof bt || o.push(this.n),
                                        this.r = l,
                                        this.type = s || 0,
                                        c && (this.pr = c,
                                            i = !0),
                                        this.b = void 0 === u ? n : u,
                                        this.e = void 0 === d ? n + r : d,
                                        a && (this._next = a,
                                            a._prev = this)
                                }
                            )
                            , wt = function (t, e, i, n, r, o) {
                                var a = new bt(t, e, i, n - i, r, -1, o);
                                return a.b = i,
                                    a.e = a.xs0 = n,
                                    a
                            }
                            , St = h.parseComplex = function (t, e, i, n, r, o, a, s, l, c) {
                                i = i || o || "",
                                    "function" == typeof n && (n = n(y, _)),
                                    a = new bt(t, e, 0, 0, a, c ? 2 : 1, null, !1, s, i, n),
                                    n += "",
                                    r && gt.test(n + i) && (n = [i, n],
                                        h.colorStringFilter(n),
                                        i = n[0],
                                        n = n[1]);
                                var u, p, f, m, v, g, w, S, E, T, M, A, P, R = i.split(", ").join(",").split(" "), L = n.split(", ").join(",").split(" "), O = R.length, I = !1 !== d;
                                for ((-1 !== n.indexOf(",") || -1 !== i.indexOf(",")) && (R = R.join(" ").replace(U, ", ").split(" "),
                                    L = L.join(" ").replace(U, ", ").split(" "),
                                    O = R.length),
                                    O !== L.length && (R = (o || "").split(" "),
                                        O = R.length),
                                    a.plugin = l,
                                    a.setRatio = c,
                                    gt.lastIndex = 0,
                                    u = 0; O > u; u++)
                                    if (m = R[u],
                                        v = L[u],
                                        (S = parseFloat(m)) || 0 === S)
                                        a.appendXtra("", S, ct(v, S), v.replace(b, ""), I && -1 !== v.indexOf("px"), !0);
                                    else if (r && gt.test(m))
                                        A = v.indexOf(")") + 1,
                                            A = ")" + (A ? v.substr(A) : ""),
                                            P = -1 !== v.indexOf("hsl") && q,
                                            m = mt(m, P),
                                            v = mt(v, P),
                                            E = m.length + v.length > 6,
                                            E && !q && 0 === v[3] ? (a["xs" + a.l] += a.l ? " transparent" : "transparent",
                                                a.e = a.e.split(L[u]).join("transparent")) : (q || (E = !1),
                                                    P ? a.appendXtra(E ? "hsla(" : "hsl(", m[0], ct(v[0], m[0]), ",", !1, !0).appendXtra("", m[1], ct(v[1], m[1]), "%,", !1).appendXtra("", m[2], ct(v[2], m[2]), E ? "%," : "%" + A, !1) : a.appendXtra(E ? "rgba(" : "rgb(", m[0], v[0] - m[0], ",", !0, !0).appendXtra("", m[1], v[1] - m[1], ",", !0).appendXtra("", m[2], v[2] - m[2], E ? "," : A, !0),
                                                    E && (m = m.length < 4 ? 1 : m[3],
                                                        a.appendXtra("", m, (v.length < 4 ? 1 : v[3]) - m, A, !1))),
                                            gt.lastIndex = 0;
                                    else if (g = m.match(x)) {
                                        if (!(w = v.match(b)) || w.length !== g.length)
                                            return a;
                                        for (f = 0,
                                            p = 0; p < g.length; p++)
                                            M = g[p],
                                                T = m.indexOf(M, f),
                                                a.appendXtra(m.substr(f, T - f), Number(M), ct(w[p], M), "", I && "px" === m.substr(T + M.length, 2), 0 === p),
                                                f = T + M.length;
                                        a["xs" + a.l] += m.substr(f)
                                    } else
                                        a["xs" + a.l] += a.l || a["xs" + a.l] ? " " + v : v;
                                if (-1 !== n.indexOf("=") && a.data) {
                                    for (A = a.xs0 + a.data.s,
                                        u = 1; u < a.l; u++)
                                        A += a["xs" + u] + a.data["xn" + u];
                                    a.e = A + a["xs" + u]
                                }
                                return a.l || (a.type = -1,
                                    a.xs0 = a.e),
                                    a.xfirst || a
                            }
                            , Et = 9;
                        for (u = bt.prototype,
                            u.l = u.pr = 0; --Et > 0;)
                            u["xn" + Et] = 0,
                                u["xs" + Et] = "";
                        u.xs0 = "",
                            u._next = u._prev = u.xfirst = u.data = u.plugin = u.setRatio = u.rxp = null,
                            u.appendXtra = function (t, e, i, n, r, o) {
                                var a = this
                                    , s = a.l;
                                return a["xs" + s] += o && (s || a["xs" + s]) ? " " + t : t || "",
                                    i || 0 === s || a.plugin ? (a.l++,
                                        a.type = a.setRatio ? 2 : 1,
                                        a["xs" + a.l] = n || "",
                                        s > 0 ? (a.data["xn" + s] = e + i,
                                            a.rxp["xn" + s] = r,
                                            a["xn" + s] = e,
                                            a.plugin || (a.xfirst = new bt(a, "xn" + s, e, i, a.xfirst || a, 0, a.n, r, a.pr),
                                                a.xfirst.xs0 = 0),
                                            a) : (a.data = {
                                                s: e + i
                                            },
                                                a.rxp = {},
                                                a.s = e,
                                                a.c = i,
                                                a.r = r,
                                                a)) : (a["xs" + s] += e + (n || ""),
                                                    a)
                            }
                            ;
                        var Tt = function (t, e) {
                            e = e || {},
                                this.p = e.prefix ? $(t) || t : t,
                                c[t] = c[this.p] = this,
                                this.format = e.formatter || _t(e.defaultValue, e.color, e.collapsible, e.multi),
                                e.parser && (this.parse = e.parser),
                                this.clrs = e.color,
                                this.multi = e.multi,
                                this.keyword = e.keyword,
                                this.dflt = e.defaultValue,
                                this.pr = e.priority || 0
                        }
                            , Mt = X._registerComplexSpecialProp = function (t, e, i) {
                                "object" != (void 0 === e ? "undefined" : a(e)) && (e = {
                                    parser: i
                                });
                                var n, r = t.split(","), o = e.defaultValue;
                                for (i = i || [o],
                                    n = 0; n < r.length; n++)
                                    e.prefix = 0 === n && e.prefix,
                                        e.defaultValue = i[n] || o,
                                        new Tt(r[n], e)
                            }
                            , At = X._registerPluginProp = function (t) {
                                if (!c[t]) {
                                    var e = t.charAt(0).toUpperCase() + t.substr(1) + "Plugin";
                                    Mt(t, {
                                        parser: function (t, i, n, r, o, a, s) {
                                            var h = l.com.greensock.plugins[e];
                                            return h ? (h._cssRegister(),
                                                c[n].parse(t, i, n, r, o, a, s)) : (J("Error: " + e + " js file not loaded."),
                                                    o)
                                        }
                                    })
                                }
                            }
                            ;
                        u = Tt.prototype,
                            u.parseComplex = function (t, e, i, n, r, o) {
                                var a, s, h, l, c, u, d = this.keyword;
                                if (this.multi && (U.test(i) || U.test(e) ? (s = e.replace(U, "|").split("|"),
                                    h = i.replace(U, "|").split("|")) : d && (s = [e],
                                        h = [i])),
                                    h) {
                                    for (l = h.length > s.length ? h.length : s.length,
                                        a = 0; l > a; a++)
                                        e = s[a] = s[a] || this.dflt,
                                            i = h[a] = h[a] || this.dflt,
                                            d && (c = e.indexOf(d),
                                                u = i.indexOf(d),
                                                c !== u && (-1 === u ? s[a] = s[a].split(d).join("") : -1 === c && (s[a] += " " + d)));
                                    e = s.join(", "),
                                        i = h.join(", ")
                                }
                                return St(t, this.p, e, i, this.clrs, this.dflt, n, this.pr, r, o)
                            }
                            ,
                            u.parse = function (t, e, i, n, o, a, s) {
                                return this.parseComplex(t.style, this.format(et(t, this.p, r, !1, this.dflt)), this.format(e), o, a)
                            }
                            ,
                            h.registerSpecialProp = function (t, e, i) {
                                Mt(t, {
                                    parser: function (t, n, r, o, a, s, h) {
                                        var l = new bt(t, r, 0, 0, a, 2, r, !1, i);
                                        return l.plugin = s,
                                            l.setRatio = e(t, n, o._tween, r),
                                            l
                                    },
                                    priority: i
                                })
                            }
                            ,
                            h.useSVGTransformAttr = !0;
                        var Pt, Rt = "scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","), Lt = $("transform"), Ot = K + "transform", It = $("transformOrigin"), Ct = null !== $("perspective"), Dt = X.Transform = function () {
                            this.perspective = parseFloat(h.defaultTransformPerspective) || 0,
                                this.force3D = !(!1 === h.defaultForce3D || !Ct) && (h.defaultForce3D || "auto")
                        }
                            , Nt = s.SVGElement, Ut = function (t, e, i) {
                                var n, r = k.createElementNS("http://www.w3.org/2000/svg", t), o = /([a-z])([A-Z])/g;
                                for (n in i)
                                    r.setAttributeNS(null, n.replace(o, "$1-$2").toLowerCase(), i[n]);
                                return e.appendChild(r),
                                    r
                            }, Bt = k.documentElement || {}, Ft = function () {
                                var t, e, i, n = g || /Android/i.test(Y) && !s.chrome;
                                return k.createElementNS && !n && (t = Ut("svg", Bt),
                                    e = Ut("rect", t, {
                                        width: 100,
                                        height: 50,
                                        x: 100
                                    }),
                                    i = e.getBoundingClientRect().width,
                                    e.style[It] = "50% 50%",
                                    e.style[Lt] = "scaleX(0.5)",
                                    n = i === e.getBoundingClientRect().width && !(m && Ct),
                                    Bt.removeChild(t)),
                                    n
                            }(), zt = function (t, e, i, n, r, o) {
                                var a, s, l, c, u, d, p, f, m, v, g, _, y, x, b = t._gsTransform, w = Vt(t, !0);
                                b && (y = b.xOrigin,
                                    x = b.yOrigin),
                                    (!n || (a = n.split(" ")).length < 2) && (p = t.getBBox(),
                                        0 === p.x && 0 === p.y && p.width + p.height === 0 && (p = {
                                            x: parseFloat(t.hasAttribute("x") ? t.getAttribute("x") : t.hasAttribute("cx") ? t.getAttribute("cx") : 0) || 0,
                                            y: parseFloat(t.hasAttribute("y") ? t.getAttribute("y") : t.hasAttribute("cy") ? t.getAttribute("cy") : 0) || 0,
                                            width: 0,
                                            height: 0
                                        }),
                                        e = lt(e).split(" "),
                                        a = [(-1 !== e[0].indexOf("%") ? parseFloat(e[0]) / 100 * p.width : parseFloat(e[0])) + p.x, (-1 !== e[1].indexOf("%") ? parseFloat(e[1]) / 100 * p.height : parseFloat(e[1])) + p.y]),
                                    i.xOrigin = c = parseFloat(a[0]),
                                    i.yOrigin = u = parseFloat(a[1]),
                                    n && w !== Ht && (d = w[0],
                                        p = w[1],
                                        f = w[2],
                                        m = w[3],
                                        v = w[4],
                                        g = w[5],
                                        (_ = d * m - p * f) && (s = c * (m / _) + u * (-f / _) + (f * g - m * v) / _,
                                            l = c * (-p / _) + u * (d / _) - (d * g - p * v) / _,
                                            c = i.xOrigin = a[0] = s,
                                            u = i.yOrigin = a[1] = l)),
                                    b && (o && (i.xOffset = b.xOffset,
                                        i.yOffset = b.yOffset,
                                        b = i),
                                        r || !1 !== r && !1 !== h.defaultSmoothOrigin ? (s = c - y,
                                            l = u - x,
                                            b.xOffset += s * w[0] + l * w[2] - s,
                                            b.yOffset += s * w[1] + l * w[3] - l) : b.xOffset = b.yOffset = 0),
                                    o || t.setAttribute("data-svg-origin", a.join(" "))
                            }, Gt = function t(e) {
                                var i, n = H("svg", this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"), r = this.parentNode, o = this.nextSibling, a = this.style.cssText;
                                if (Bt.appendChild(n),
                                    n.appendChild(this),
                                    this.style.display = "block",
                                    e)
                                    try {
                                        i = this.getBBox(),
                                            this._originalGetBBox = this.getBBox,
                                            this.getBBox = t
                                    } catch (t) { }
                                else
                                    this._originalGetBBox && (i = this._originalGetBBox());
                                return o ? r.insertBefore(this, o) : r.appendChild(this),
                                    Bt.removeChild(n),
                                    this.style.cssText = a,
                                    i
                            }, jt = function (t) {
                                try {
                                    return t.getBBox()
                                } catch (e) {
                                    return Gt.call(t, !0)
                                }
                            }, kt = function (t) {
                                return !(!(Nt && t.getCTM && jt(t)) || t.parentNode && !t.ownerSVGElement)
                            }, Ht = [1, 0, 0, 1, 0, 0], Vt = function (t, e) {
                                var i, n, r, o, a, s, h = t._gsTransform || new Dt, l = t.style;
                                if (Lt ? n = et(t, Ot, null, !0) : t.currentStyle && (n = t.currentStyle.filter.match(D),
                                    n = n && 4 === n.length ? [n[0].substr(4), Number(n[2].substr(4)), Number(n[1].substr(4)), n[3].substr(4), h.x || 0, h.y || 0].join(",") : ""),
                                    i = !n || "none" === n || "matrix(1, 0, 0, 1, 0, 0)" === n,
                                    i && Lt && ((s = "none" === tt(t).display) || !t.parentNode) && (s && (o = l.display,
                                        l.display = "block"),
                                        t.parentNode || (a = 1,
                                            Bt.appendChild(t)),
                                        n = et(t, Ot, null, !0),
                                        i = !n || "none" === n || "matrix(1, 0, 0, 1, 0, 0)" === n,
                                        o ? l.display = o : s && Zt(l, "display"),
                                        a && Bt.removeChild(t)),
                                    (h.svg || t.getCTM && kt(t)) && (i && -1 !== (l[Lt] + "").indexOf("matrix") && (n = l[Lt],
                                        i = 0),
                                        r = t.getAttribute("transform"),
                                        i && r && (-1 !== r.indexOf("matrix") ? (n = r,
                                            i = 0) : -1 !== r.indexOf("translate") && (n = "matrix(1,0,0,1," + r.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",") + ")",
                                                i = 0))),
                                    i)
                                    return Ht;
                                for (r = (n || "").match(x) || [],
                                    Et = r.length; --Et > -1;)
                                    o = Number(r[Et]),
                                        r[Et] = (a = o - (o |= 0)) ? (1e5 * a + (0 > a ? -.5 : .5) | 0) / 1e5 + o : o;
                                return e && r.length > 6 ? [r[0], r[1], r[4], r[5], r[12], r[13]] : r
                            }, Wt = X.getTransform = function (t, i, n, r) {
                                if (t._gsTransform && n && !r)
                                    return t._gsTransform;
                                var o, a, s, l, c, u, d = n ? t._gsTransform || new Dt : new Dt, p = d.scaleX < 0, f = 1e5, m = Ct ? parseFloat(et(t, It, i, !1, "0 0 0").split(" ")[2]) || d.zOrigin || 0 : 0, v = parseFloat(h.defaultTransformPerspective) || 0;
                                if (d.svg = !(!t.getCTM || !kt(t)),
                                    d.svg && (zt(t, et(t, It, i, !1, "50% 50%") + "", d, t.getAttribute("data-svg-origin")),
                                        Pt = h.useSVGTransformAttr || Ft),
                                    (o = Vt(t)) !== Ht) {
                                    if (16 === o.length) {
                                        var g, _, y, x, b, w = o[0], S = o[1], E = o[2], T = o[3], M = o[4], A = o[5], P = o[6], R = o[7], L = o[8], O = o[9], I = o[10], C = o[12], D = o[13], N = o[14], U = o[11], B = Math.atan2(P, I);
                                        d.zOrigin && (N = -d.zOrigin,
                                            C = L * N - o[12],
                                            D = O * N - o[13],
                                            N = I * N + d.zOrigin - o[14]),
                                            d.rotationX = B * z,
                                            B && (x = Math.cos(-B),
                                                b = Math.sin(-B),
                                                g = M * x + L * b,
                                                _ = A * x + O * b,
                                                y = P * x + I * b,
                                                L = M * -b + L * x,
                                                O = A * -b + O * x,
                                                I = P * -b + I * x,
                                                U = R * -b + U * x,
                                                M = g,
                                                A = _,
                                                P = y),
                                            B = Math.atan2(-E, I),
                                            d.rotationY = B * z,
                                            B && (x = Math.cos(-B),
                                                b = Math.sin(-B),
                                                g = w * x - L * b,
                                                _ = S * x - O * b,
                                                y = E * x - I * b,
                                                O = S * b + O * x,
                                                I = E * b + I * x,
                                                U = T * b + U * x,
                                                w = g,
                                                S = _,
                                                E = y),
                                            B = Math.atan2(S, w),
                                            d.rotation = B * z,
                                            B && (x = Math.cos(-B),
                                                b = Math.sin(-B),
                                                w = w * x + M * b,
                                                _ = S * x + A * b,
                                                A = S * -b + A * x,
                                                P = E * -b + P * x,
                                                S = _),
                                            d.rotationX && Math.abs(d.rotationX) + Math.abs(d.rotation) > 359.9 && (d.rotationX = d.rotation = 0,
                                                d.rotationY = 180 - d.rotationY),
                                            d.scaleX = (Math.sqrt(w * w + S * S) * f + .5 | 0) / f,
                                            d.scaleY = (Math.sqrt(A * A + O * O) * f + .5 | 0) / f,
                                            d.scaleZ = (Math.sqrt(P * P + I * I) * f + .5 | 0) / f,
                                            d.rotationX || d.rotationY ? d.skewX = 0 : (d.skewX = M || A ? Math.atan2(M, A) * z + d.rotation : d.skewX || 0,
                                                Math.abs(d.skewX) > 90 && Math.abs(d.skewX) < 270 && (p ? (d.scaleX *= -1,
                                                    d.skewX += d.rotation <= 0 ? 180 : -180,
                                                    d.rotation += d.rotation <= 0 ? 180 : -180) : (d.scaleY *= -1,
                                                        d.skewX += d.skewX <= 0 ? 180 : -180))),
                                            d.perspective = U ? 1 / (0 > U ? -U : U) : 0,
                                            d.x = C,
                                            d.y = D,
                                            d.z = N,
                                            d.svg && (d.x -= d.xOrigin - (d.xOrigin * w - d.yOrigin * M),
                                                d.y -= d.yOrigin - (d.yOrigin * S - d.xOrigin * A))
                                    } else if (!Ct || r || !o.length || d.x !== o[4] || d.y !== o[5] || !d.rotationX && !d.rotationY) {
                                        var F = o.length >= 6
                                            , G = F ? o[0] : 1
                                            , j = o[1] || 0
                                            , k = o[2] || 0
                                            , H = F ? o[3] : 1;
                                        d.x = o[4] || 0,
                                            d.y = o[5] || 0,
                                            s = Math.sqrt(G * G + j * j),
                                            l = Math.sqrt(H * H + k * k),
                                            c = G || j ? Math.atan2(j, G) * z : d.rotation || 0,
                                            u = k || H ? Math.atan2(k, H) * z + c : d.skewX || 0,
                                            Math.abs(u) > 90 && Math.abs(u) < 270 && (p ? (s *= -1,
                                                u += 0 >= c ? 180 : -180,
                                                c += 0 >= c ? 180 : -180) : (l *= -1,
                                                    u += 0 >= u ? 180 : -180)),
                                            d.scaleX = s,
                                            d.scaleY = l,
                                            d.rotation = c,
                                            d.skewX = u,
                                            Ct && (d.rotationX = d.rotationY = d.z = 0,
                                                d.perspective = v,
                                                d.scaleZ = 1),
                                            d.svg && (d.x -= d.xOrigin - (d.xOrigin * G + d.yOrigin * k),
                                                d.y -= d.yOrigin - (d.xOrigin * j + d.yOrigin * H))
                                    }
                                    d.zOrigin = m;
                                    for (a in d)
                                        d[a] < 2e-5 && d[a] > -2e-5 && (d[a] = 0)
                                }
                                return n && (t._gsTransform = d,
                                    d.svg && (Pt && t.style[Lt] ? e.delayedCall(.001, function () {
                                        Zt(t.style, Lt)
                                    }) : !Pt && t.getAttribute("transform") && e.delayedCall(.001, function () {
                                        t.removeAttribute("transform")
                                    }))),
                                    d
                            }
                            , Xt = function (t) {
                                var e, i, n = this.data, r = -n.rotation * F, o = r + n.skewX * F, a = 1e5, s = (Math.cos(r) * n.scaleX * a | 0) / a, h = (Math.sin(r) * n.scaleX * a | 0) / a, l = (Math.sin(o) * -n.scaleY * a | 0) / a, c = (Math.cos(o) * n.scaleY * a | 0) / a, u = this.t.style, d = this.t.currentStyle;
                                if (d) {
                                    i = h,
                                        h = -l,
                                        l = -i,
                                        e = d.filter,
                                        u.filter = "";
                                    var p, f, m = this.t.offsetWidth, v = this.t.offsetHeight, _ = "absolute" !== d.position, y = "progid:DXImageTransform.Microsoft.Matrix(M11=" + s + ", M12=" + h + ", M21=" + l + ", M22=" + c, x = n.x + m * n.xPercent / 100, b = n.y + v * n.yPercent / 100;
                                    if (null != n.ox && (p = (n.oxp ? m * n.ox * .01 : n.ox) - m / 2,
                                        f = (n.oyp ? v * n.oy * .01 : n.oy) - v / 2,
                                        x += p - (p * s + f * h),
                                        b += f - (p * l + f * c)),
                                        _ ? (p = m / 2,
                                            f = v / 2,
                                            y += ", Dx=" + (p - (p * s + f * h) + x) + ", Dy=" + (f - (p * l + f * c) + b) + ")") : y += ", sizingMethod='auto expand')",
                                        -1 !== e.indexOf("DXImageTransform.Microsoft.Matrix(") ? u.filter = e.replace(N, y) : u.filter = y + " " + e,
                                        (0 === t || 1 === t) && 1 === s && 0 === h && 0 === l && 1 === c && (_ && -1 === y.indexOf("Dx=0, Dy=0") || T.test(e) && 100 !== parseFloat(RegExp.$1) || -1 === e.indexOf(e.indexOf("Alpha")) && u.removeAttribute("filter")),
                                        !_) {
                                        var w, S, M, A = 8 > g ? 1 : -1;
                                        for (p = n.ieOffsetX || 0,
                                            f = n.ieOffsetY || 0,
                                            n.ieOffsetX = Math.round((m - ((0 > s ? -s : s) * m + (0 > h ? -h : h) * v)) / 2 + x),
                                            n.ieOffsetY = Math.round((v - ((0 > c ? -c : c) * v + (0 > l ? -l : l) * m)) / 2 + b),
                                            Et = 0; 4 > Et; Et++)
                                            S = st[Et],
                                                w = d[S],
                                                i = -1 !== w.indexOf("px") ? parseFloat(w) : it(this.t, S, parseFloat(w), w.replace(E, "")) || 0,
                                                M = i !== n[S] ? 2 > Et ? -n.ieOffsetX : -n.ieOffsetY : 2 > Et ? p - n.ieOffsetX : f - n.ieOffsetY,
                                                u[S] = (n[S] = Math.round(i - M * (0 === Et || 2 === Et ? 1 : A))) + "px"
                                    }
                                }
                            }, Yt = X.set3DTransformRatio = X.setTransformRatio = function (t) {
                                var e, i, n, r, o, a, s, h, l, c, u, d, p, f, v, g, _, y, x, b, w, S, E, T = this.data, M = this.t.style, A = T.rotation, P = T.rotationX, R = T.rotationY, L = T.scaleX, O = T.scaleY, I = T.scaleZ, C = T.x, D = T.y, N = T.z, U = T.svg, B = T.perspective, z = T.force3D, G = T.skewY, j = T.skewX;
                                if (G && (j += G,
                                    A += G),
                                    ((1 === t || 0 === t) && "auto" === z && (this.tween._totalTime === this.tween._totalDuration || !this.tween._totalTime) || !z) && !N && !B && !R && !P && 1 === I || Pt && U || !Ct)
                                    return void (A || j || U ? (A *= F,
                                        S = j * F,
                                        E = 1e5,
                                        i = Math.cos(A) * L,
                                        o = Math.sin(A) * L,
                                        n = Math.sin(A - S) * -O,
                                        a = Math.cos(A - S) * O,
                                        S && "simple" === T.skewType && (e = Math.tan(S - G * F),
                                            e = Math.sqrt(1 + e * e),
                                            n *= e,
                                            a *= e,
                                            G && (e = Math.tan(G * F),
                                                e = Math.sqrt(1 + e * e),
                                                i *= e,
                                                o *= e)),
                                        U && (C += T.xOrigin - (T.xOrigin * i + T.yOrigin * n) + T.xOffset,
                                            D += T.yOrigin - (T.xOrigin * o + T.yOrigin * a) + T.yOffset,
                                            Pt && (T.xPercent || T.yPercent) && (v = this.t.getBBox(),
                                                C += .01 * T.xPercent * v.width,
                                                D += .01 * T.yPercent * v.height),
                                            v = 1e-6,
                                            v > C && C > -v && (C = 0),
                                            v > D && D > -v && (D = 0)),
                                        x = (i * E | 0) / E + "," + (o * E | 0) / E + "," + (n * E | 0) / E + "," + (a * E | 0) / E + "," + C + "," + D + ")",
                                        U && Pt ? this.t.setAttribute("transform", "matrix(" + x) : M[Lt] = (T.xPercent || T.yPercent ? "translate(" + T.xPercent + "%," + T.yPercent + "%) matrix(" : "matrix(") + x) : M[Lt] = (T.xPercent || T.yPercent ? "translate(" + T.xPercent + "%," + T.yPercent + "%) matrix(" : "matrix(") + L + ",0,0," + O + "," + C + "," + D + ")");
                                if (m && (v = 1e-4,
                                    v > L && L > -v && (L = I = 2e-5),
                                    v > O && O > -v && (O = I = 2e-5),
                                    !B || T.z || T.rotationX || T.rotationY || (B = 0)),
                                    A || j)
                                    A *= F,
                                        g = i = Math.cos(A),
                                        _ = o = Math.sin(A),
                                        j && (A -= j * F,
                                            g = Math.cos(A),
                                            _ = Math.sin(A),
                                            "simple" === T.skewType && (e = Math.tan((j - G) * F),
                                                e = Math.sqrt(1 + e * e),
                                                g *= e,
                                                _ *= e,
                                                T.skewY && (e = Math.tan(G * F),
                                                    e = Math.sqrt(1 + e * e),
                                                    i *= e,
                                                    o *= e))),
                                        n = -_,
                                        a = g;
                                else {
                                    if (!(R || P || 1 !== I || B || U))
                                        return void (M[Lt] = (T.xPercent || T.yPercent ? "translate(" + T.xPercent + "%," + T.yPercent + "%) translate3d(" : "translate3d(") + C + "px," + D + "px," + N + "px)" + (1 !== L || 1 !== O ? " scale(" + L + "," + O + ")" : ""));
                                    i = a = 1,
                                        n = o = 0
                                }
                                c = 1,
                                    r = s = h = l = u = d = 0,
                                    p = B ? -1 / B : 0,
                                    f = T.zOrigin,
                                    v = 1e-6,
                                    b = ",",
                                    w = "0",
                                    A = R * F,
                                    A && (g = Math.cos(A),
                                        _ = Math.sin(A),
                                        h = -_,
                                        u = p * -_,
                                        r = i * _,
                                        s = o * _,
                                        c = g,
                                        p *= g,
                                        i *= g,
                                        o *= g),
                                    A = P * F,
                                    A && (g = Math.cos(A),
                                        _ = Math.sin(A),
                                        e = n * g + r * _,
                                        y = a * g + s * _,
                                        l = c * _,
                                        d = p * _,
                                        r = n * -_ + r * g,
                                        s = a * -_ + s * g,
                                        c *= g,
                                        p *= g,
                                        n = e,
                                        a = y),
                                    1 !== I && (r *= I,
                                        s *= I,
                                        c *= I,
                                        p *= I),
                                    1 !== O && (n *= O,
                                        a *= O,
                                        l *= O,
                                        d *= O),
                                    1 !== L && (i *= L,
                                        o *= L,
                                        h *= L,
                                        u *= L),
                                    (f || U) && (f && (C += r * -f,
                                        D += s * -f,
                                        N += c * -f + f),
                                        U && (C += T.xOrigin - (T.xOrigin * i + T.yOrigin * n) + T.xOffset,
                                            D += T.yOrigin - (T.xOrigin * o + T.yOrigin * a) + T.yOffset),
                                        v > C && C > -v && (C = w),
                                        v > D && D > -v && (D = w),
                                        v > N && N > -v && (N = 0)),
                                    x = T.xPercent || T.yPercent ? "translate(" + T.xPercent + "%," + T.yPercent + "%) matrix3d(" : "matrix3d(",
                                    x += (v > i && i > -v ? w : i) + b + (v > o && o > -v ? w : o) + b + (v > h && h > -v ? w : h),
                                    x += b + (v > u && u > -v ? w : u) + b + (v > n && n > -v ? w : n) + b + (v > a && a > -v ? w : a),
                                    P || R || 1 !== I ? (x += b + (v > l && l > -v ? w : l) + b + (v > d && d > -v ? w : d) + b + (v > r && r > -v ? w : r),
                                        x += b + (v > s && s > -v ? w : s) + b + (v > c && c > -v ? w : c) + b + (v > p && p > -v ? w : p) + b) : x += ",0,0,0,0,1,0,",
                                    x += C + b + D + b + N + b + (B ? 1 + -N / B : 1) + ")",
                                    M[Lt] = x
                            }
                            ;
                        u = Dt.prototype,
                            u.x = u.y = u.z = u.skewX = u.skewY = u.rotation = u.rotationX = u.rotationY = u.zOrigin = u.xPercent = u.yPercent = u.xOffset = u.yOffset = 0,
                            u.scaleX = u.scaleY = u.scaleZ = 1,
                            Mt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin", {
                                parser: function (t, e, i, n, o, s, l) {
                                    if (n._lastParsedTransform === l)
                                        return o;
                                    n._lastParsedTransform = l;
                                    var c, u = l.scale && "function" == typeof l.scale ? l.scale : 0;
                                    "function" == typeof l[i] && (c = l[i],
                                        l[i] = e),
                                        u && (l.scale = u(y, t));
                                    var d, p, f, m, v, g, x, b, w, S = t._gsTransform, E = t.style, T = Rt.length, M = l, A = {}, P = "transformOrigin", R = Wt(t, r, !0, M.parseTransform), L = M.transform && ("function" == typeof M.transform ? M.transform(y, _) : M.transform);
                                    if (n._transform = R,
                                        L && "string" == typeof L && Lt)
                                        p = V.style,
                                            p[Lt] = L,
                                            p.display = "block",
                                            p.position = "absolute",
                                            k.body.appendChild(V),
                                            d = Wt(V, null, !1),
                                            R.svg && (g = R.xOrigin,
                                                x = R.yOrigin,
                                                d.x -= R.xOffset,
                                                d.y -= R.yOffset,
                                                (M.transformOrigin || M.svgOrigin) && (L = {},
                                                    zt(t, lt(M.transformOrigin), L, M.svgOrigin, M.smoothOrigin, !0),
                                                    g = L.xOrigin,
                                                    x = L.yOrigin,
                                                    d.x -= L.xOffset - R.xOffset,
                                                    d.y -= L.yOffset - R.yOffset),
                                                (g || x) && (b = Vt(V, !0),
                                                    d.x -= g - (g * b[0] + x * b[2]),
                                                    d.y -= x - (g * b[1] + x * b[3]))),
                                            k.body.removeChild(V),
                                            d.perspective || (d.perspective = R.perspective),
                                            null != M.xPercent && (d.xPercent = ut(M.xPercent, R.xPercent)),
                                            null != M.yPercent && (d.yPercent = ut(M.yPercent, R.yPercent));
                                    else if ("object" == (void 0 === M ? "undefined" : a(M))) {
                                        if (d = {
                                            scaleX: ut(null != M.scaleX ? M.scaleX : M.scale, R.scaleX),
                                            scaleY: ut(null != M.scaleY ? M.scaleY : M.scale, R.scaleY),
                                            scaleZ: ut(M.scaleZ, R.scaleZ),
                                            x: ut(M.x, R.x),
                                            y: ut(M.y, R.y),
                                            z: ut(M.z, R.z),
                                            xPercent: ut(M.xPercent, R.xPercent),
                                            yPercent: ut(M.yPercent, R.yPercent),
                                            perspective: ut(M.transformPerspective, R.perspective)
                                        },
                                            null != (v = M.directionalRotation))
                                            if ("object" == (void 0 === v ? "undefined" : a(v)))
                                                for (p in v)
                                                    M[p] = v[p];
                                            else
                                                M.rotation = v;
                                        "string" == typeof M.x && -1 !== M.x.indexOf("%") && (d.x = 0,
                                            d.xPercent = ut(M.x, R.xPercent)),
                                            "string" == typeof M.y && -1 !== M.y.indexOf("%") && (d.y = 0,
                                                d.yPercent = ut(M.y, R.yPercent)),
                                            d.rotation = dt("rotation" in M ? M.rotation : "shortRotation" in M ? M.shortRotation + "_short" : "rotationZ" in M ? M.rotationZ : R.rotation, R.rotation, "rotation", A),
                                            Ct && (d.rotationX = dt("rotationX" in M ? M.rotationX : "shortRotationX" in M ? M.shortRotationX + "_short" : R.rotationX || 0, R.rotationX, "rotationX", A),
                                                d.rotationY = dt("rotationY" in M ? M.rotationY : "shortRotationY" in M ? M.shortRotationY + "_short" : R.rotationY || 0, R.rotationY, "rotationY", A)),
                                            d.skewX = dt(M.skewX, R.skewX),
                                            d.skewY = dt(M.skewY, R.skewY)
                                    }
                                    for (Ct && null != M.force3D && (R.force3D = M.force3D,
                                        m = !0),
                                        R.skewType = M.skewType || R.skewType || h.defaultSkewType,
                                        (f = R.force3D || R.z || R.rotationX || R.rotationY || d.z || d.rotationX || d.rotationY || d.perspective) || null == M.scale || (d.scaleZ = 1); --T > -1;)
                                        w = Rt[T],
                                            ((L = d[w] - R[w]) > 1e-6 || -1e-6 > L || null != M[w] || null != G[w]) && (m = !0,
                                                o = new bt(R, w, R[w], L, o),
                                                w in A && (o.e = A[w]),
                                                o.xs0 = 0,
                                                o.plugin = s,
                                                n._overwriteProps.push(o.n));
                                    return L = M.transformOrigin,
                                        R.svg && (L || M.svgOrigin) && (g = R.xOffset,
                                            x = R.yOffset,
                                            zt(t, lt(L), d, M.svgOrigin, M.smoothOrigin),
                                            o = wt(R, "xOrigin", (S ? R : d).xOrigin, d.xOrigin, o, P),
                                            o = wt(R, "yOrigin", (S ? R : d).yOrigin, d.yOrigin, o, P),
                                            (g !== R.xOffset || x !== R.yOffset) && (o = wt(R, "xOffset", S ? g : R.xOffset, R.xOffset, o, P),
                                                o = wt(R, "yOffset", S ? x : R.yOffset, R.yOffset, o, P)),
                                            L = "0px 0px"),
                                        (L || Ct && f && R.zOrigin) && (Lt ? (m = !0,
                                            w = It,
                                            L = (L || et(t, w, r, !1, "50% 50%")) + "",
                                            o = new bt(E, w, 0, 0, o, -1, P),
                                            o.b = E[w],
                                            o.plugin = s,
                                            Ct ? (p = R.zOrigin,
                                                L = L.split(" "),
                                                R.zOrigin = (L.length > 2 && (0 === p || "0px" !== L[2]) ? parseFloat(L[2]) : p) || 0,
                                                o.xs0 = o.e = L[0] + " " + (L[1] || "50%") + " 0px",
                                                o = new bt(R, "zOrigin", 0, 0, o, -1, o.n),
                                                o.b = p,
                                                o.xs0 = o.e = R.zOrigin) : o.xs0 = o.e = L) : lt(L + "", R)),
                                        m && (n._transformType = R.svg && Pt || !f && 3 !== this._transformType ? 2 : 3),
                                        c && (l[i] = c),
                                        u && (l.scale = u),
                                        o
                                },
                                prefix: !0
                            }),
                            Mt("boxShadow", {
                                defaultValue: "0px 0px 0px 0px #999",
                                prefix: !0,
                                color: !0,
                                multi: !0,
                                keyword: "inset"
                            }),
                            Mt("borderRadius", {
                                defaultValue: "0px",
                                parser: function (t, e, i, o, a, s) {
                                    e = this.format(e);
                                    var h, l, c, u, d, p, f, m, v, g, _, y, x, b, w, S, E = ["borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"], T = t.style;
                                    for (v = parseFloat(t.offsetWidth),
                                        g = parseFloat(t.offsetHeight),
                                        h = e.split(" "),
                                        l = 0; l < E.length; l++)
                                        this.p.indexOf("border") && (E[l] = $(E[l])),
                                            d = u = et(t, E[l], r, !1, "0px"),
                                            -1 !== d.indexOf(" ") && (u = d.split(" "),
                                                d = u[0],
                                                u = u[1]),
                                            p = c = h[l],
                                            f = parseFloat(d),
                                            y = d.substr((f + "").length),
                                            x = "=" === p.charAt(1),
                                            x ? (m = parseInt(p.charAt(0) + "1", 10),
                                                p = p.substr(2),
                                                m *= parseFloat(p),
                                                _ = p.substr((m + "").length - (0 > m ? 1 : 0)) || "") : (m = parseFloat(p),
                                                    _ = p.substr((m + "").length)),
                                            "" === _ && (_ = n[i] || y),
                                            _ !== y && (b = it(t, "borderLeft", f, y),
                                                w = it(t, "borderTop", f, y),
                                                "%" === _ ? (d = b / v * 100 + "%",
                                                    u = w / g * 100 + "%") : "em" === _ ? (S = it(t, "borderLeft", 1, "em"),
                                                        d = b / S + "em",
                                                        u = w / S + "em") : (d = b + "px",
                                                            u = w + "px"),
                                                x && (p = parseFloat(d) + m + _,
                                                    c = parseFloat(u) + m + _)),
                                            a = St(T, E[l], d + " " + u, p + " " + c, !1, "0px", a);
                                    return a
                                },
                                prefix: !0,
                                formatter: _t("0px 0px 0px 0px", !1, !0)
                            }),
                            Mt("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius", {
                                defaultValue: "0px",
                                parser: function (t, e, i, n, o, a) {
                                    return St(t.style, i, this.format(et(t, i, r, !1, "0px 0px")), this.format(e), !1, "0px", o)
                                },
                                prefix: !0,
                                formatter: _t("0px 0px", !1, !0)
                            }),
                            Mt("backgroundPosition", {
                                defaultValue: "0 0",
                                parser: function (t, e, i, n, o, a) {
                                    var s, h, l, c, u, d, p = "background-position", f = r || tt(t, null), m = this.format((f ? g ? f.getPropertyValue(p + "-x") + " " + f.getPropertyValue(p + "-y") : f.getPropertyValue(p) : t.currentStyle.backgroundPositionX + " " + t.currentStyle.backgroundPositionY) || "0 0"), v = this.format(e);
                                    if (-1 !== m.indexOf("%") != (-1 !== v.indexOf("%")) && v.split(",").length < 2 && (d = et(t, "backgroundImage").replace(O, "")) && "none" !== d) {
                                        for (s = m.split(" "),
                                            h = v.split(" "),
                                            W.setAttribute("src", d),
                                            l = 2; --l > -1;)
                                            m = s[l],
                                                (c = -1 !== m.indexOf("%")) !== (-1 !== h[l].indexOf("%")) && (u = 0 === l ? t.offsetWidth - W.width : t.offsetHeight - W.height,
                                                    s[l] = c ? parseFloat(m) / 100 * u + "px" : parseFloat(m) / u * 100 + "%");
                                        m = s.join(" ")
                                    }
                                    return this.parseComplex(t.style, m, v, o, a)
                                },
                                formatter: lt
                            }),
                            Mt("backgroundSize", {
                                defaultValue: "0 0",
                                formatter: function (t) {
                                    return t += "",
                                        lt(-1 === t.indexOf(" ") ? t + " " + t : t)
                                }
                            }),
                            Mt("perspective", {
                                defaultValue: "0px",
                                prefix: !0
                            }),
                            Mt("perspectiveOrigin", {
                                defaultValue: "50% 50%",
                                prefix: !0
                            }),
                            Mt("transformStyle", {
                                prefix: !0
                            }),
                            Mt("backfaceVisibility", {
                                prefix: !0
                            }),
                            Mt("userSelect", {
                                prefix: !0
                            }),
                            Mt("margin", {
                                parser: yt("marginTop,marginRight,marginBottom,marginLeft")
                            }),
                            Mt("padding", {
                                parser: yt("paddingTop,paddingRight,paddingBottom,paddingLeft")
                            }),
                            Mt("clip", {
                                defaultValue: "rect(0px,0px,0px,0px)",
                                parser: function (t, e, i, n, o, a) {
                                    var s, h, l;
                                    return 9 > g ? (h = t.currentStyle,
                                        l = 8 > g ? " " : ",",
                                        s = "rect(" + h.clipTop + l + h.clipRight + l + h.clipBottom + l + h.clipLeft + ")",
                                        e = this.format(e).split(",").join(l)) : (s = this.format(et(t, this.p, r, !1, this.dflt)),
                                            e = this.format(e)),
                                        this.parseComplex(t.style, s, e, o, a)
                                }
                            }),
                            Mt("textShadow", {
                                defaultValue: "0px 0px 0px #999",
                                color: !0,
                                multi: !0
                            }),
                            Mt("autoRound,strictUnits", {
                                parser: function (t, e, i, n, r) {
                                    return r
                                }
                            }),
                            Mt("border", {
                                defaultValue: "0px solid #000",
                                parser: function (t, e, i, n, o, a) {
                                    var s = et(t, "borderTopWidth", r, !1, "0px")
                                        , h = this.format(e).split(" ")
                                        , l = h[0].replace(E, "");
                                    return "px" !== l && (s = parseFloat(s) / it(t, "borderTopWidth", 1, l) + l),
                                        this.parseComplex(t.style, this.format(s + " " + et(t, "borderTopStyle", r, !1, "solid") + " " + et(t, "borderTopColor", r, !1, "#000")), h.join(" "), o, a)
                                },
                                color: !0,
                                formatter: function (t) {
                                    var e = t.split(" ");
                                    return e[0] + " " + (e[1] || "solid") + " " + (t.match(gt) || ["#000"])[0]
                                }
                            }),
                            Mt("borderWidth", {
                                parser: yt("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")
                            }),
                            Mt("float,cssFloat,styleFloat", {
                                parser: function (t, e, i, n, r, o) {
                                    var a = t.style
                                        , s = "cssFloat" in a ? "cssFloat" : "styleFloat";
                                    return new bt(a, s, 0, 0, r, -1, i, !1, 0, a[s], e)
                                }
                            });
                        var qt = function (t) {
                            var e, i = this.t, n = i.filter || et(this.data, "filter") || "", r = this.s + this.c * t | 0;
                            100 === r && (-1 === n.indexOf("atrix(") && -1 === n.indexOf("radient(") && -1 === n.indexOf("oader(") ? (i.removeAttribute("filter"),
                                e = !et(this.data, "filter")) : (i.filter = n.replace(A, ""),
                                    e = !0)),
                                e || (this.xn1 && (i.filter = n = n || "alpha(opacity=" + r + ")"),
                                    -1 === n.indexOf("pacity") ? 0 === r && this.xn1 || (i.filter = n + " alpha(opacity=" + r + ")") : i.filter = n.replace(T, "opacity=" + r))
                        };
                        Mt("opacity,alpha,autoAlpha", {
                            defaultValue: "1",
                            parser: function (t, e, i, n, o, a) {
                                var s = parseFloat(et(t, "opacity", r, !1, "1"))
                                    , h = t.style
                                    , l = "autoAlpha" === i;
                                return "string" == typeof e && "=" === e.charAt(1) && (e = ("-" === e.charAt(0) ? -1 : 1) * parseFloat(e.substr(2)) + s),
                                    l && 1 === s && "hidden" === et(t, "visibility", r) && 0 !== e && (s = 0),
                                    q ? o = new bt(h, "opacity", s, e - s, o) : (o = new bt(h, "opacity", 100 * s, 100 * (e - s), o),
                                        o.xn1 = l ? 1 : 0,
                                        h.zoom = 1,
                                        o.type = 2,
                                        o.b = "alpha(opacity=" + o.s + ")",
                                        o.e = "alpha(opacity=" + (o.s + o.c) + ")",
                                        o.data = t,
                                        o.plugin = a,
                                        o.setRatio = qt),
                                    l && (o = new bt(h, "visibility", 0, 0, o, -1, null, !1, 0, 0 !== s ? "inherit" : "hidden", 0 === e ? "hidden" : "inherit"),
                                        o.xs0 = "inherit",
                                        n._overwriteProps.push(o.n),
                                        n._overwriteProps.push(i)),
                                    o
                            }
                        });
                        var Zt = function (t, e) {
                            e && (t.removeProperty ? (("ms" === e.substr(0, 2) || "webkit" === e.substr(0, 6)) && (e = "-" + e),
                                t.removeProperty(e.replace(R, "-$1").toLowerCase())) : t.removeAttribute(e))
                        }
                            , Jt = function (t) {
                                if (this.t._gsClassPT = this,
                                    1 === t || 0 === t) {
                                    this.t.setAttribute("class", 0 === t ? this.b : this.e);
                                    for (var e = this.data, i = this.t.style; e;)
                                        e.v ? i[e.p] = e.v : Zt(i, e.p),
                                            e = e._next;
                                    1 === t && this.t._gsClassPT === this && (this.t._gsClassPT = null)
                                } else
                                    this.t.getAttribute("class") !== this.e && this.t.setAttribute("class", this.e)
                            };
                        Mt("className", {
                            parser: function (t, e, n, o, a, s, h) {
                                var l, c, u, d, p, f = t.getAttribute("class") || "", m = t.style.cssText;
                                if (a = o._classNamePT = new bt(t, n, 0, 0, a, 2),
                                    a.setRatio = Jt,
                                    a.pr = -11,
                                    i = !0,
                                    a.b = f,
                                    c = rt(t, r),
                                    u = t._gsClassPT) {
                                    for (d = {},
                                        p = u.data; p;)
                                        d[p.p] = 1,
                                            p = p._next;
                                    u.setRatio(1)
                                }
                                return t._gsClassPT = a,
                                    a.e = "=" !== e.charAt(1) ? e : f.replace(new RegExp("(?:\\s|^)" + e.substr(2) + "(?![\\w-])"), "") + ("+" === e.charAt(0) ? " " + e.substr(2) : ""),
                                    t.setAttribute("class", a.e),
                                    l = ot(t, c, rt(t), h, d),
                                    t.setAttribute("class", f),
                                    a.data = l.firstMPT,
                                    t.style.cssText = m,
                                    a = a.xfirst = o.parse(t, l.difs, a, s)
                            }
                        });
                        var Kt = function (t) {
                            if ((1 === t || 0 === t) && this.data._totalTime === this.data._totalDuration && "isFromStart" !== this.data.data) {
                                var e, i, n, r, o, a = this.t.style, s = c.transform.parse;
                                if ("all" === this.e)
                                    a.cssText = "",
                                        r = !0;
                                else
                                    for (e = this.e.split(" ").join("").split(","),
                                        n = e.length; --n > -1;)
                                        i = e[n],
                                            c[i] && (c[i].parse === s ? r = !0 : i = "transformOrigin" === i ? It : c[i].p),
                                            Zt(a, i);
                                r && (Zt(a, Lt),
                                    (o = this.t._gsTransform) && (o.svg && (this.t.removeAttribute("data-svg-origin"),
                                        this.t.removeAttribute("transform")),
                                        delete this.t._gsTransform))
                            }
                        };
                        for (Mt("clearProps", {
                            parser: function (t, e, n, r, o) {
                                return o = new bt(t, n, 0, 0, o, 2),
                                    o.setRatio = Kt,
                                    o.e = e,
                                    o.pr = -10,
                                    o.data = r._tween,
                                    i = !0,
                                    o
                            }
                        }),
                            u = "bezier,throwProps,physicsProps,physics2D".split(","),
                            Et = u.length; Et--;)
                            At(u[Et]);
                        u = h.prototype,
                            u._firstPT = u._lastParsedTransform = u._transform = null,
                            u._onInitTween = function (t, e, a, s) {
                                if (!t.nodeType)
                                    return !1;
                                this._target = _ = t,
                                    this._tween = a,
                                    this._vars = e,
                                    y = s,
                                    d = e.autoRound,
                                    i = !1,
                                    n = e.suffixMap || h.suffixMap,
                                    r = tt(t, ""),
                                    o = this._overwriteProps;
                                var l, u, m, g, x, b, w, S, E, T = t.style;
                                if (p && "" === T.zIndex && ("auto" === (l = et(t, "zIndex", r)) || "" === l) && this._addLazySet(T, "zIndex", 0),
                                    "string" == typeof e && (g = T.cssText,
                                        l = rt(t, r),
                                        T.cssText = g + ";" + e,
                                        l = ot(t, l, rt(t)).difs,
                                        !q && M.test(e) && (l.opacity = parseFloat(RegExp.$1)),
                                        e = l,
                                        T.cssText = g),
                                    e.className ? this._firstPT = u = c.className.parse(t, e.className, "className", this, null, null, e) : this._firstPT = u = this.parse(t, e, null),
                                    this._transformType) {
                                    for (E = 3 === this._transformType,
                                        Lt ? f && (p = !0,
                                            "" === T.zIndex && ("auto" === (w = et(t, "zIndex", r)) || "" === w) && this._addLazySet(T, "zIndex", 0),
                                            v && this._addLazySet(T, "WebkitBackfaceVisibility", this._vars.WebkitBackfaceVisibility || (E ? "visible" : "hidden"))) : T.zoom = 1,
                                        m = u; m && m._next;)
                                        m = m._next;
                                    S = new bt(t, "transform", 0, 0, null, 2),
                                        this._linkCSSP(S, null, m),
                                        S.setRatio = Lt ? Yt : Xt,
                                        S.data = this._transform || Wt(t, r, !0),
                                        S.tween = a,
                                        S.pr = -1,
                                        o.pop()
                                }
                                if (i) {
                                    for (; u;) {
                                        for (b = u._next,
                                            m = g; m && m.pr > u.pr;)
                                            m = m._next;
                                        (u._prev = m ? m._prev : x) ? u._prev._next = u : g = u,
                                            (u._next = m) ? m._prev = u : x = u,
                                            u = b
                                    }
                                    this._firstPT = g
                                }
                                return !0
                            }
                            ,
                            u.parse = function (t, e, i, o) {
                                var a, s, h, l, u, p, f, m, v, g, x = t.style;
                                for (a in e)
                                    p = e[a],
                                        "function" == typeof p && (p = p(y, _)),
                                        s = c[a],
                                        s ? i = s.parse(t, p, a, this, i, o, e) : (u = et(t, a, r) + "",
                                            v = "string" == typeof p,
                                            "color" === a || "fill" === a || "stroke" === a || -1 !== a.indexOf("Color") || v && P.test(p) ? (v || (p = mt(p),
                                                p = (p.length > 3 ? "rgba(" : "rgb(") + p.join(",") + ")"),
                                                i = St(x, a, u, p, !0, "transparent", i, 0, o)) : v && B.test(p) ? i = St(x, a, u, p, !0, null, i, 0, o) : (h = parseFloat(u),
                                                    f = h || 0 === h ? u.substr((h + "").length) : "",
                                                    ("" === u || "auto" === u) && ("width" === a || "height" === a ? (h = ht(t, a, r),
                                                        f = "px") : "left" === a || "top" === a ? (h = nt(t, a, r),
                                                            f = "px") : (h = "opacity" !== a ? 0 : 1,
                                                                f = "")),
                                                    g = v && "=" === p.charAt(1),
                                                    g ? (l = parseInt(p.charAt(0) + "1", 10),
                                                        p = p.substr(2),
                                                        l *= parseFloat(p),
                                                        m = p.replace(E, "")) : (l = parseFloat(p),
                                                            m = v ? p.replace(E, "") : ""),
                                                    "" === m && (m = a in n ? n[a] : f),
                                                    p = l || 0 === l ? (g ? l + h : l) + m : e[a],
                                                    f !== m && "" !== m && (l || 0 === l) && h && (h = it(t, a, h, f),
                                                        "%" === m ? (h /= it(t, a, 100, "%") / 100,
                                                            !0 !== e.strictUnits && (u = h + "%")) : "em" === m || "rem" === m || "vw" === m || "vh" === m ? h /= it(t, a, 1, m) : "px" !== m && (l = it(t, a, l, m),
                                                                m = "px"),
                                                        g && (l || 0 === l) && (p = l + h + m)),
                                                    g && (l += h),
                                                    !h && 0 !== h || !l && 0 !== l ? void 0 !== x[a] && (p || p + "" != "NaN" && null != p) ? (i = new bt(x, a, l || h || 0, 0, i, -1, a, !1, 0, u, p),
                                                        i.xs0 = "none" !== p || "display" !== a && -1 === a.indexOf("Style") ? p : u) : J("invalid " + a + " tween value: " + e[a]) : (i = new bt(x, a, h, l - h, i, 0, a, !1 !== d && ("px" === m || "zIndex" === a), 0, u, p),
                                                            i.xs0 = m))),
                                        o && i && !i.plugin && (i.plugin = o);
                                return i
                            }
                            ,
                            u.setRatio = function (t) {
                                var e, i, n, r = this._firstPT;
                                if (1 !== t || this._tween._time !== this._tween._duration && 0 !== this._tween._time)
                                    if (t || this._tween._time !== this._tween._duration && 0 !== this._tween._time || -1e-6 === this._tween._rawPrevTime)
                                        for (; r;) {
                                            if (e = r.c * t + r.s,
                                                r.r ? e = Math.round(e) : 1e-6 > e && e > -1e-6 && (e = 0),
                                                r.type)
                                                if (1 === r.type)
                                                    if (2 === (n = r.l))
                                                        r.t[r.p] = r.xs0 + e + r.xs1 + r.xn1 + r.xs2;
                                                    else if (3 === n)
                                                        r.t[r.p] = r.xs0 + e + r.xs1 + r.xn1 + r.xs2 + r.xn2 + r.xs3;
                                                    else if (4 === n)
                                                        r.t[r.p] = r.xs0 + e + r.xs1 + r.xn1 + r.xs2 + r.xn2 + r.xs3 + r.xn3 + r.xs4;
                                                    else if (5 === n)
                                                        r.t[r.p] = r.xs0 + e + r.xs1 + r.xn1 + r.xs2 + r.xn2 + r.xs3 + r.xn3 + r.xs4 + r.xn4 + r.xs5;
                                                    else {
                                                        for (i = r.xs0 + e + r.xs1,
                                                            n = 1; n < r.l; n++)
                                                            i += r["xn" + n] + r["xs" + (n + 1)];
                                                        r.t[r.p] = i
                                                    }
                                                else
                                                    -1 === r.type ? r.t[r.p] = r.xs0 : r.setRatio && r.setRatio(t);
                                            else
                                                r.t[r.p] = e + r.xs0;
                                            r = r._next
                                        }
                                    else
                                        for (; r;)
                                            2 !== r.type ? r.t[r.p] = r.b : r.setRatio(t),
                                                r = r._next;
                                else
                                    for (; r;) {
                                        if (2 !== r.type)
                                            if (r.r && -1 !== r.type)
                                                if (e = Math.round(r.s + r.c),
                                                    r.type) {
                                                    if (1 === r.type) {
                                                        for (n = r.l,
                                                            i = r.xs0 + e + r.xs1,
                                                            n = 1; n < r.l; n++)
                                                            i += r["xn" + n] + r["xs" + (n + 1)];
                                                        r.t[r.p] = i
                                                    }
                                                } else
                                                    r.t[r.p] = e + r.xs0;
                                            else
                                                r.t[r.p] = r.e;
                                        else
                                            r.setRatio(t);
                                        r = r._next
                                    }
                            }
                            ,
                            u._enableTransforms = function (t) {
                                this._transform = this._transform || Wt(this._target, r, !0),
                                    this._transformType = this._transform.svg && Pt || !t && 3 !== this._transformType ? 2 : 3
                            }
                            ;
                        var Qt = function (t) {
                            this.t[this.p] = this.e,
                                this.data._linkCSSP(this, this._next, null, !0)
                        };
                        u._addLazySet = function (t, e, i) {
                            var n = this._firstPT = new bt(t, e, 0, 0, this._firstPT, 2);
                            n.e = i,
                                n.setRatio = Qt,
                                n.data = this
                        }
                            ,
                            u._linkCSSP = function (t, e, i, n) {
                                return t && (e && (e._prev = t),
                                    t._next && (t._next._prev = t._prev),
                                    t._prev ? t._prev._next = t._next : this._firstPT === t && (this._firstPT = t._next,
                                        n = !0),
                                    i ? i._next = t : n || null !== this._firstPT || (this._firstPT = t),
                                    t._next = e,
                                    t._prev = i),
                                    t
                            }
                            ,
                            u._mod = function (t) {
                                for (var e = this._firstPT; e;)
                                    "function" == typeof t[e.p] && t[e.p] === Math.round && (e.r = 1),
                                        e = e._next
                            }
                            ,
                            u._kill = function (e) {
                                var i, n, r, o = e;
                                if (e.autoAlpha || e.alpha) {
                                    o = {};
                                    for (n in e)
                                        o[n] = e[n];
                                    o.opacity = 1,
                                        o.autoAlpha && (o.visibility = 1)
                                }
                                for (e.className && (i = this._classNamePT) && (r = i.xfirst,
                                    r && r._prev ? this._linkCSSP(r._prev, i._next, r._prev._prev) : r === this._firstPT && (this._firstPT = i._next),
                                    i._next && this._linkCSSP(i._next, i._next._next, r._prev),
                                    this._classNamePT = null),
                                    i = this._firstPT; i;)
                                    i.plugin && i.plugin !== n && i.plugin._kill && (i.plugin._kill(e),
                                        n = i.plugin),
                                        i = i._next;
                                return t.prototype._kill.call(this, o)
                            }
                            ;
                        var $t = function t(e, i, n) {
                            var r, o, a, s;
                            if (e.slice)
                                for (o = e.length; --o > -1;)
                                    t(e[o], i, n);
                            else
                                for (r = e.childNodes,
                                    o = r.length; --o > -1;)
                                    a = r[o],
                                        s = a.type,
                                        a.style && (i.push(rt(a)),
                                            n && n.push(a)),
                                        1 !== s && 9 !== s && 11 !== s || !a.childNodes.length || t(a, i, n)
                        };
                        return h.cascadeTo = function (t, i, n) {
                            var r, o, a, s, h = e.to(t, i, n), l = [h], c = [], u = [], d = [], p = e._internals.reservedProps;
                            for (t = h._targets || h.target,
                                $t(t, c, d),
                                h.render(i, !0, !0),
                                $t(t, u),
                                h.render(0, !0, !0),
                                h._enabled(!0),
                                r = d.length; --r > -1;)
                                if (o = ot(d[r], c[r], u[r]),
                                    o.firstMPT) {
                                    o = o.difs;
                                    for (a in n)
                                        p[a] && (o[a] = n[a]);
                                    s = {};
                                    for (a in o)
                                        s[a] = c[r][a];
                                    l.push(e.fromTo(d[r], i, s, o))
                                }
                            return l
                        }
                            ,
                            t.activate([h]),
                            h
                    }, !0),
                    function () {
                        var t = s._gsDefine.plugin({
                            propName: "roundProps",
                            version: "1.6.0",
                            priority: -1,
                            API: 2,
                            init: function (t, e, i) {
                                return this._tween = i,
                                    !0
                            }
                        })
                            , e = function (t) {
                                for (; t;)
                                    t.f || t.blob || (t.m = Math.round),
                                        t = t._next
                            }
                            , i = t.prototype;
                        i._onInitAllProps = function () {
                            for (var t, i, n, r = this._tween, o = r.vars.roundProps.join ? r.vars.roundProps : r.vars.roundProps.split(","), a = o.length, s = {}, h = r._propLookup.roundProps; --a > -1;)
                                s[o[a]] = Math.round;
                            for (a = o.length; --a > -1;)
                                for (t = o[a],
                                    i = r._firstPT; i;)
                                    n = i._next,
                                        i.pg ? i.t._mod(s) : i.n === t && (2 === i.f && i.t ? e(i.t._firstPT) : (this._add(i.t, t, i.s, i.c),
                                            n && (n._prev = i._prev),
                                            i._prev ? i._prev._next = n : r._firstPT === i && (r._firstPT = n),
                                            i._next = i._prev = null,
                                            r._propLookup[t] = h)),
                                        i = n;
                            return !1
                        }
                            ,
                            i._add = function (t, e, i, n) {
                                this._addTween(t, e, i, i + n, e, Math.round),
                                    this._overwriteProps.push(e)
                            }
                    }(),
                    function () {
                        s._gsDefine.plugin({
                            propName: "attr",
                            API: 2,
                            version: "0.6.0",
                            init: function (t, e, i, n) {
                                var r, o;
                                if ("function" != typeof t.setAttribute)
                                    return !1;
                                for (r in e)
                                    o = e[r],
                                        "function" == typeof o && (o = o(n, t)),
                                        this._addTween(t, "setAttribute", t.getAttribute(r) + "", o + "", r, !1, r),
                                        this._overwriteProps.push(r);
                                return !0
                            }
                        })
                    }(),
                    s._gsDefine.plugin({
                        propName: "directionalRotation",
                        version: "0.3.0",
                        API: 2,
                        init: function (t, e, i, n) {
                            "object" != (void 0 === e ? "undefined" : a(e)) && (e = {
                                rotation: e
                            }),
                                this.finals = {};
                            var r, o, s, h, l, c, u = !0 === e.useRadians ? 2 * Math.PI : 360;
                            for (r in e)
                                "useRadians" !== r && (h = e[r],
                                    "function" == typeof h && (h = h(n, t)),
                                    c = (h + "").split("_"),
                                    o = c[0],
                                    s = parseFloat("function" != typeof t[r] ? t[r] : t[r.indexOf("set") || "function" != typeof t["get" + r.substr(3)] ? r : "get" + r.substr(3)]()),
                                    h = this.finals[r] = "string" == typeof o && "=" === o.charAt(1) ? s + parseInt(o.charAt(0) + "1", 10) * Number(o.substr(2)) : Number(o) || 0,
                                    l = h - s,
                                    c.length && (o = c.join("_"),
                                        -1 !== o.indexOf("short") && (l %= u) !== l % (u / 2) && (l = 0 > l ? l + u : l - u),
                                        -1 !== o.indexOf("_cw") && 0 > l ? l = (l + 9999999999 * u) % u - (l / u | 0) * u : -1 !== o.indexOf("ccw") && l > 0 && (l = (l - 9999999999 * u) % u - (l / u | 0) * u)),
                                    (l > 1e-6 || -1e-6 > l) && (this._addTween(t, r, s, s + l, r),
                                        this._overwriteProps.push(r)));
                            return !0
                        },
                        set: function (t) {
                            var e;
                            if (1 !== t)
                                this._super.setRatio.call(this, t);
                            else
                                for (e = this._firstPT; e;)
                                    e.f ? e.t[e.p](this.finals[e.p]) : e.t[e.p] = this.finals[e.p],
                                        e = e._next
                        }
                    })._autoCSS = !0,
                    s._gsDefine("easing.Back", ["easing.Ease"], function (t) {
                        var e, i, n, r = s.GreenSockGlobals || s, o = r.com.greensock, a = 2 * Math.PI, h = Math.PI / 2, l = o._class, c = function (e, i) {
                            var n = l("easing." + e, function () { }, !0)
                                , r = n.prototype = new t;
                            return r.constructor = n,
                                r.getRatio = i,
                                n
                        }, u = t.register || function () { }
                            , d = function (t, e, i, n, r) {
                                var o = l("easing." + t, {
                                    easeOut: new e,
                                    easeIn: new i,
                                    easeInOut: new n
                                }, !0);
                                return u(o, t),
                                    o
                            }, p = function (t, e, i) {
                                this.t = t,
                                    this.v = e,
                                    i && (this.next = i,
                                        i.prev = this,
                                        this.c = i.v - e,
                                        this.gap = i.t - t)
                            }, f = function (e, i) {
                                var n = l("easing." + e, function (t) {
                                    this._p1 = t || 0 === t ? t : 1.70158,
                                        this._p2 = 1.525 * this._p1
                                }, !0)
                                    , r = n.prototype = new t;
                                return r.constructor = n,
                                    r.getRatio = i,
                                    r.config = function (t) {
                                        return new n(t)
                                    }
                                    ,
                                    n
                            }, m = d("Back", f("BackOut", function (t) {
                                return (t -= 1) * t * ((this._p1 + 1) * t + this._p1) + 1
                            }), f("BackIn", function (t) {
                                return t * t * ((this._p1 + 1) * t - this._p1)
                            }), f("BackInOut", function (t) {
                                return (t *= 2) < 1 ? .5 * t * t * ((this._p2 + 1) * t - this._p2) : .5 * ((t -= 2) * t * ((this._p2 + 1) * t + this._p2) + 2)
                            })), v = l("easing.SlowMo", function (t, e, i) {
                                e = e || 0 === e ? e : .7,
                                    null == t ? t = .7 : t > 1 && (t = 1),
                                    this._p = 1 !== t ? e : 0,
                                    this._p1 = (1 - t) / 2,
                                    this._p2 = t,
                                    this._p3 = this._p1 + this._p2,
                                    this._calcEnd = !0 === i
                            }, !0), g = v.prototype = new t;
                        return g.constructor = v,
                            g.getRatio = function (t) {
                                var e = t + (.5 - t) * this._p;
                                return t < this._p1 ? this._calcEnd ? 1 - (t = 1 - t / this._p1) * t : e - (t = 1 - t / this._p1) * t * t * t * e : t > this._p3 ? this._calcEnd ? 1 - (t = (t - this._p3) / this._p1) * t : e + (t - e) * (t = (t - this._p3) / this._p1) * t * t * t : this._calcEnd ? 1 : e
                            }
                            ,
                            v.ease = new v(.7, .7),
                            g.config = v.config = function (t, e, i) {
                                return new v(t, e, i)
                            }
                            ,
                            e = l("easing.SteppedEase", function (t) {
                                t = t || 1,
                                    this._p1 = 1 / t,
                                    this._p2 = t + 1
                            }, !0),
                            g = e.prototype = new t,
                            g.constructor = e,
                            g.getRatio = function (t) {
                                return 0 > t ? t = 0 : t >= 1 && (t = .999999999),
                                    (this._p2 * t >> 0) * this._p1
                            }
                            ,
                            g.config = e.config = function (t) {
                                return new e(t)
                            }
                            ,
                            i = l("easing.RoughEase", function (e) {
                                e = e || {};
                                for (var i, n, r, o, a, s, h = e.taper || "none", l = [], c = 0, u = 0 | (e.points || 20), d = u, f = !1 !== e.randomize, m = !0 === e.clamp, v = e.template instanceof t ? e.template : null, g = "number" == typeof e.strength ? .4 * e.strength : .4; --d > -1;)
                                    i = f ? Math.random() : 1 / u * d,
                                        n = v ? v.getRatio(i) : i,
                                        "none" === h ? r = g : "out" === h ? (o = 1 - i,
                                            r = o * o * g) : "in" === h ? r = i * i * g : .5 > i ? (o = 2 * i,
                                                r = o * o * .5 * g) : (o = 2 * (1 - i),
                                                    r = o * o * .5 * g),
                                        f ? n += Math.random() * r - .5 * r : d % 2 ? n += .5 * r : n -= .5 * r,
                                        m && (n > 1 ? n = 1 : 0 > n && (n = 0)),
                                        l[c++] = {
                                            x: i,
                                            y: n
                                        };
                                for (l.sort(function (t, e) {
                                    return t.x - e.x
                                }),
                                    s = new p(1, 1, null),
                                    d = u; --d > -1;)
                                    a = l[d],
                                        s = new p(a.x, a.y, s);
                                this._prev = new p(0, 0, 0 !== s.t ? s : s.next)
                            }, !0),
                            g = i.prototype = new t,
                            g.constructor = i,
                            g.getRatio = function (t) {
                                var e = this._prev;
                                if (t > e.t) {
                                    for (; e.next && t >= e.t;)
                                        e = e.next;
                                    e = e.prev
                                } else
                                    for (; e.prev && t <= e.t;)
                                        e = e.prev;
                                return this._prev = e,
                                    e.v + (t - e.t) / e.gap * e.c
                            }
                            ,
                            g.config = function (t) {
                                return new i(t)
                            }
                            ,
                            i.ease = new i,
                            d("Bounce", c("BounceOut", function (t) {
                                return 1 / 2.75 > t ? 7.5625 * t * t : 2 / 2.75 > t ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : 2.5 / 2.75 > t ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375
                            }), c("BounceIn", function (t) {
                                return (t = 1 - t) < 1 / 2.75 ? 1 - 7.5625 * t * t : 2 / 2.75 > t ? 1 - (7.5625 * (t -= 1.5 / 2.75) * t + .75) : 2.5 / 2.75 > t ? 1 - (7.5625 * (t -= 2.25 / 2.75) * t + .9375) : 1 - (7.5625 * (t -= 2.625 / 2.75) * t + .984375)
                            }), c("BounceInOut", function (t) {
                                var e = .5 > t;
                                return t = e ? 1 - 2 * t : 2 * t - 1,
                                    t = 1 / 2.75 > t ? 7.5625 * t * t : 2 / 2.75 > t ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : 2.5 / 2.75 > t ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375,
                                    e ? .5 * (1 - t) : .5 * t + .5
                            })),
                            d("Circ", c("CircOut", function (t) {
                                return Math.sqrt(1 - (t -= 1) * t)
                            }), c("CircIn", function (t) {
                                return -(Math.sqrt(1 - t * t) - 1)
                            }), c("CircInOut", function (t) {
                                return (t *= 2) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1)
                            })),
                            n = function (e, i, n) {
                                var r = l("easing." + e, function (t, e) {
                                    this._p1 = t >= 1 ? t : 1,
                                        this._p2 = (e || n) / (1 > t ? t : 1),
                                        this._p3 = this._p2 / a * (Math.asin(1 / this._p1) || 0),
                                        this._p2 = a / this._p2
                                }, !0)
                                    , o = r.prototype = new t;
                                return o.constructor = r,
                                    o.getRatio = i,
                                    o.config = function (t, e) {
                                        return new r(t, e)
                                    }
                                    ,
                                    r
                            }
                            ,
                            d("Elastic", n("ElasticOut", function (t) {
                                return this._p1 * Math.pow(2, -10 * t) * Math.sin((t - this._p3) * this._p2) + 1
                            }, .3), n("ElasticIn", function (t) {
                                return -this._p1 * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - this._p3) * this._p2)
                            }, .3), n("ElasticInOut", function (t) {
                                return (t *= 2) < 1 ? this._p1 * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - this._p3) * this._p2) * -.5 : this._p1 * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - this._p3) * this._p2) * .5 + 1
                            }, .45)),
                            d("Expo", c("ExpoOut", function (t) {
                                return 1 - Math.pow(2, -10 * t)
                            }), c("ExpoIn", function (t) {
                                return Math.pow(2, 10 * (t - 1)) - .001
                            }), c("ExpoInOut", function (t) {
                                return (t *= 2) < 1 ? .5 * Math.pow(2, 10 * (t - 1)) : .5 * (2 - Math.pow(2, -10 * (t - 1)))
                            })),
                            d("Sine", c("SineOut", function (t) {
                                return Math.sin(t * h)
                            }), c("SineIn", function (t) {
                                return 1 - Math.cos(t * h)
                            }), c("SineInOut", function (t) {
                                return -.5 * (Math.cos(Math.PI * t) - 1)
                            })),
                            l("easing.EaseLookup", {
                                find: function (e) {
                                    return t.map[e]
                                }
                            }, !0),
                            u(r.SlowMo, "SlowMo", "ease,"),
                            u(i, "RoughEase", "ease,"),
                            u(e, "SteppedEase", "ease,"),
                            m
                    }, !0)
            }),
                s._gsDefine && s._gsQueue.pop()(),
                function (n, s) {
                    var h = {}
                        , l = n.document
                        , c = n.GreenSockGlobals = n.GreenSockGlobals || n;
                    if (!c.TweenLite) {
                        var u, d, p, f, m, v = function (t) {
                            var e, i = t.split("."), n = c;
                            for (e = 0; e < i.length; e++)
                                n[i[e]] = n = n[i[e]] || {};
                            return n
                        }, g = v("com.greensock"), _ = 1e-10, y = function (t) {
                            var e, i = [], n = t.length;
                            for (e = 0; e !== n; i.push(t[e++]))
                                ;
                            return i
                        }, x = function () { }, b = function () {
                            var t = Object.prototype.toString
                                , e = t.call([]);
                            return function (i) {
                                return null != i && (i instanceof Array || "object" == (void 0 === i ? "undefined" : a(i)) && !!i.push && t.call(i) === e)
                            }
                        }(), w = {}, S = function n(a, l, u, d) {
                            this.sc = w[a] ? w[a].sc : [],
                                w[a] = this,
                                this.gsClass = null,
                                this.func = u;
                            var p = [];
                            this.check = function (f) {
                                for (var m, g, _, y, x, b = l.length, S = b; --b > -1;)
                                    (m = w[l[b]] || new n(l[b], [])).gsClass ? (p[b] = m.gsClass,
                                        S--) : f && m.sc.push(this);
                                if (0 === S && u) {
                                    if (g = ("com.greensock." + a).split("."),
                                        _ = g.pop(),
                                        y = v(g.join("."))[_] = this.gsClass = u.apply(u, p),
                                        d)
                                        if (c[_] = h[_] = y,
                                            (x = void 0 !== t && t.exports) || 0 || !i(394)) {
                                            if (x)
                                                if (a === s) {
                                                    t.exports = h[s] = y;
                                                    for (b in h)
                                                        y[b] = h[b]
                                                } else
                                                    h[s] && (h[s][_] = y)
                                        } else
                                            r = [],
                                                void 0 !== (o = function () {
                                                    return y
                                                }
                                                    .apply(e, r)) && (t.exports = o);
                                    for (b = 0; b < this.sc.length; b++)
                                        this.sc[b].check()
                                }
                            }
                                ,
                                this.check(!0)
                        }, E = n._gsDefine = function (t, e, i, n) {
                            return new S(t, e, i, n)
                        }
                            , T = g._class = function (t, e, i) {
                                return e = e || function () { }
                                    ,
                                    E(t, [], function () {
                                        return e
                                    }, i),
                                    e
                            }
                            ;
                        E.globals = c;
                        var M = [0, 0, 1, 1]
                            , A = T("easing.Ease", function (t, e, i, n) {
                                this._func = t,
                                    this._type = i || 0,
                                    this._power = n || 0,
                                    this._params = e ? M.concat(e) : M
                            }, !0)
                            , P = A.map = {}
                            , R = A.register = function (t, e, i, n) {
                                for (var r, o, a, s, h = e.split(","), l = h.length, c = (i || "easeIn,easeOut,easeInOut").split(","); --l > -1;)
                                    for (o = h[l],
                                        r = n ? T("easing." + o, null, !0) : g.easing[o] || {},
                                        a = c.length; --a > -1;)
                                        s = c[a],
                                            P[o + "." + s] = P[s + o] = r[s] = t.getRatio ? t : t[s] || new t
                            }
                            ;
                        for (p = A.prototype,
                            p._calcEnd = !1,
                            p.getRatio = function (t) {
                                if (this._func)
                                    return this._params[0] = t,
                                        this._func.apply(null, this._params);
                                var e = this._type
                                    , i = this._power
                                    , n = 1 === e ? 1 - t : 2 === e ? t : .5 > t ? 2 * t : 2 * (1 - t);
                                return 1 === i ? n *= n : 2 === i ? n *= n * n : 3 === i ? n *= n * n * n : 4 === i && (n *= n * n * n * n),
                                    1 === e ? 1 - n : 2 === e ? n : .5 > t ? n / 2 : 1 - n / 2
                            }
                            ,
                            u = ["Linear", "Quad", "Cubic", "Quart", "Quint,Strong"],
                            d = u.length; --d > -1;)
                            p = u[d] + ",Power" + d,
                                R(new A(null, null, 1, d), p, "easeOut", !0),
                                R(new A(null, null, 2, d), p, "easeIn" + (0 === d ? ",easeNone" : "")),
                                R(new A(null, null, 3, d), p, "easeInOut");
                        P.linear = g.easing.Linear.easeIn,
                            P.swing = g.easing.Quad.easeInOut;
                        var L = T("events.EventDispatcher", function (t) {
                            this._listeners = {},
                                this._eventTarget = t || this
                        });
                        p = L.prototype,
                            p.addEventListener = function (t, e, i, n, r) {
                                r = r || 0;
                                var o, a, s = this._listeners[t], h = 0;
                                for (this !== f || m || f.wake(),
                                    null == s && (this._listeners[t] = s = []),
                                    a = s.length; --a > -1;)
                                    o = s[a],
                                        o.c === e && o.s === i ? s.splice(a, 1) : 0 === h && o.pr < r && (h = a + 1);
                                s.splice(h, 0, {
                                    c: e,
                                    s: i,
                                    up: n,
                                    pr: r
                                })
                            }
                            ,
                            p.removeEventListener = function (t, e) {
                                var i, n = this._listeners[t];
                                if (n)
                                    for (i = n.length; --i > -1;)
                                        if (n[i].c === e)
                                            return void n.splice(i, 1)
                            }
                            ,
                            p.dispatchEvent = function (t) {
                                var e, i, n, r = this._listeners[t];
                                if (r)
                                    for (e = r.length,
                                        e > 1 && (r = r.slice(0)),
                                        i = this._eventTarget; --e > -1;)
                                        (n = r[e]) && (n.up ? n.c.call(n.s || i, {
                                            type: t,
                                            target: i
                                        }) : n.c.call(n.s || i))
                            }
                            ;
                        var O = n.requestAnimationFrame
                            , I = n.cancelAnimationFrame
                            , C = Date.now || function () {
                                return (new Date).getTime()
                            }
                            , D = C();
                        for (u = ["ms", "moz", "webkit", "o"],
                            d = u.length; --d > -1 && !O;)
                            O = n[u[d] + "RequestAnimationFrame"],
                                I = n[u[d] + "CancelAnimationFrame"] || n[u[d] + "CancelRequestAnimationFrame"];
                        T("Ticker", function (t, e) {
                            var i, n, r, o, a, s = this, h = C(), c = !(!1 === e || !O) && "auto", u = 500, d = 33, p = function t(e) {
                                var l, c, p = C() - D;
                                p > u && (h += p - d),
                                    D += p,
                                    s.time = (D - h) / 1e3,
                                    l = s.time - a,
                                    (!i || l > 0 || !0 === e) && (s.frame++,
                                        a += l + (l >= o ? .004 : o - l),
                                        c = !0),
                                    !0 !== e && (r = n(t)),
                                    c && s.dispatchEvent("tick")
                            };
                            L.call(s),
                                s.time = s.frame = 0,
                                s.tick = function () {
                                    p(!0)
                                }
                                ,
                                s.lagSmoothing = function (t, e) {
                                    u = t || 1 / _,
                                        d = Math.min(e, u, 0)
                                }
                                ,
                                s.sleep = function () {
                                    null != r && (c && I ? I(r) : clearTimeout(r),
                                        n = x,
                                        r = null,
                                        s === f && (m = !1))
                                }
                                ,
                                s.wake = function (t) {
                                    null !== r ? s.sleep() : t ? h += -D + (D = C()) : s.frame > 10 && (D = C() - u + 5),
                                        n = 0 === i ? x : c && O ? O : function (t) {
                                            return setTimeout(t, 1e3 * (a - s.time) + 1 | 0)
                                        }
                                        ,
                                        s === f && (m = !0),
                                        p(2)
                                }
                                ,
                                s.fps = function (t) {
                                    return arguments.length ? (i = t,
                                        o = 1 / (i || 60),
                                        a = this.time + o,
                                        void s.wake()) : i
                                }
                                ,
                                s.useRAF = function (t) {
                                    return arguments.length ? (s.sleep(),
                                        c = t,
                                        void s.fps(i)) : c
                                }
                                ,
                                s.fps(t),
                                setTimeout(function () {
                                    "auto" === c && s.frame < 5 && "hidden" !== l.visibilityState && s.useRAF(!1)
                                }, 1500)
                        }),
                            p = g.Ticker.prototype = new g.events.EventDispatcher,
                            p.constructor = g.Ticker;
                        var N = T("core.Animation", function (t, e) {
                            if (this.vars = e = e || {},
                                this._duration = this._totalDuration = t || 0,
                                this._delay = Number(e.delay) || 0,
                                this._timeScale = 1,
                                this._active = !0 === e.immediateRender,
                                this.data = e.data,
                                this._reversed = !0 === e.reversed,
                                $) {
                                m || f.wake();
                                var i = this.vars.useFrames ? Q : $;
                                i.add(this, i._time),
                                    this.vars.paused && this.paused(!0)
                            }
                        });
                        f = N.ticker = new g.Ticker,
                            p = N.prototype,
                            p._dirty = p._gc = p._initted = p._paused = !1,
                            p._totalTime = p._time = 0,
                            p._rawPrevTime = -1,
                            p._next = p._last = p._onUpdate = p._timeline = p.timeline = null,
                            p._paused = !1;
                        (function t() {
                            m && C() - D > 2e3 && f.wake(),
                                setTimeout(t, 2e3)
                        }
                        )(),
                            p.play = function (t, e) {
                                return null != t && this.seek(t, e),
                                    this.reversed(!1).paused(!1)
                            }
                            ,
                            p.pause = function (t, e) {
                                return null != t && this.seek(t, e),
                                    this.paused(!0)
                            }
                            ,
                            p.resume = function (t, e) {
                                return null != t && this.seek(t, e),
                                    this.paused(!1)
                            }
                            ,
                            p.seek = function (t, e) {
                                return this.totalTime(Number(t), !1 !== e)
                            }
                            ,
                            p.restart = function (t, e) {
                                return this.reversed(!1).paused(!1).totalTime(t ? -this._delay : 0, !1 !== e, !0)
                            }
                            ,
                            p.reverse = function (t, e) {
                                return null != t && this.seek(t || this.totalDuration(), e),
                                    this.reversed(!0).paused(!1)
                            }
                            ,
                            p.render = function (t, e, i) { }
                            ,
                            p.invalidate = function () {
                                return this._time = this._totalTime = 0,
                                    this._initted = this._gc = !1,
                                    this._rawPrevTime = -1,
                                    (this._gc || !this.timeline) && this._enabled(!0),
                                    this
                            }
                            ,
                            p.isActive = function () {
                                var t, e = this._timeline, i = this._startTime;
                                return !e || !this._gc && !this._paused && e.isActive() && (t = e.rawTime(!0)) >= i && t < i + this.totalDuration() / this._timeScale
                            }
                            ,
                            p._enabled = function (t, e) {
                                return m || f.wake(),
                                    this._gc = !t,
                                    this._active = this.isActive(),
                                    !0 !== e && (t && !this.timeline ? this._timeline.add(this, this._startTime - this._delay) : !t && this.timeline && this._timeline._remove(this, !0)),
                                    !1
                            }
                            ,
                            p._kill = function (t, e) {
                                return this._enabled(!1, !1)
                            }
                            ,
                            p.kill = function (t, e) {
                                return this._kill(t, e),
                                    this
                            }
                            ,
                            p._uncache = function (t) {
                                for (var e = t ? this : this.timeline; e;)
                                    e._dirty = !0,
                                        e = e.timeline;
                                return this
                            }
                            ,
                            p._swapSelfInParams = function (t) {
                                for (var e = t.length, i = t.concat(); --e > -1;)
                                    "{self}" === t[e] && (i[e] = this);
                                return i
                            }
                            ,
                            p._callback = function (t) {
                                var e = this.vars
                                    , i = e[t]
                                    , n = e[t + "Params"]
                                    , r = e[t + "Scope"] || e.callbackScope || this;
                                switch (n ? n.length : 0) {
                                    case 0:
                                        i.call(r);
                                        break;
                                    case 1:
                                        i.call(r, n[0]);
                                        break;
                                    case 2:
                                        i.call(r, n[0], n[1]);
                                        break;
                                    default:
                                        i.apply(r, n)
                                }
                            }
                            ,
                            p.eventCallback = function (t, e, i, n) {
                                if ("on" === (t || "").substr(0, 2)) {
                                    var r = this.vars;
                                    if (1 === arguments.length)
                                        return r[t];
                                    null == e ? delete r[t] : (r[t] = e,
                                        r[t + "Params"] = b(i) && -1 !== i.join("").indexOf("{self}") ? this._swapSelfInParams(i) : i,
                                        r[t + "Scope"] = n),
                                        "onUpdate" === t && (this._onUpdate = e)
                                }
                                return this
                            }
                            ,
                            p.delay = function (t) {
                                return arguments.length ? (this._timeline.smoothChildTiming && this.startTime(this._startTime + t - this._delay),
                                    this._delay = t,
                                    this) : this._delay
                            }
                            ,
                            p.duration = function (t) {
                                return arguments.length ? (this._duration = this._totalDuration = t,
                                    this._uncache(!0),
                                    this._timeline.smoothChildTiming && this._time > 0 && this._time < this._duration && 0 !== t && this.totalTime(this._totalTime * (t / this._duration), !0),
                                    this) : (this._dirty = !1,
                                        this._duration)
                            }
                            ,
                            p.totalDuration = function (t) {
                                return this._dirty = !1,
                                    arguments.length ? this.duration(t) : this._totalDuration
                            }
                            ,
                            p.time = function (t, e) {
                                return arguments.length ? (this._dirty && this.totalDuration(),
                                    this.totalTime(t > this._duration ? this._duration : t, e)) : this._time
                            }
                            ,
                            p.totalTime = function (t, e, i) {
                                if (m || f.wake(),
                                    !arguments.length)
                                    return this._totalTime;
                                if (this._timeline) {
                                    if (0 > t && !i && (t += this.totalDuration()),
                                        this._timeline.smoothChildTiming) {
                                        this._dirty && this.totalDuration();
                                        var n = this._totalDuration
                                            , r = this._timeline;
                                        if (t > n && !i && (t = n),
                                            this._startTime = (this._paused ? this._pauseTime : r._time) - (this._reversed ? n - t : t) / this._timeScale,
                                            r._dirty || this._uncache(!1),
                                            r._timeline)
                                            for (; r._timeline;)
                                                r._timeline._time !== (r._startTime + r._totalTime) / r._timeScale && r.totalTime(r._totalTime, !0),
                                                    r = r._timeline
                                    }
                                    this._gc && this._enabled(!0, !1),
                                        (this._totalTime !== t || 0 === this._duration) && (G.length && et(),
                                            this.render(t, e, !1),
                                            G.length && et())
                                }
                                return this
                            }
                            ,
                            p.progress = p.totalProgress = function (t, e) {
                                var i = this.duration();
                                return arguments.length ? this.totalTime(i * t, e) : i ? this._time / i : this.ratio
                            }
                            ,
                            p.startTime = function (t) {
                                return arguments.length ? (t !== this._startTime && (this._startTime = t,
                                    this.timeline && this.timeline._sortChildren && this.timeline.add(this, t - this._delay)),
                                    this) : this._startTime
                            }
                            ,
                            p.endTime = function (t) {
                                return this._startTime + (0 != t ? this.totalDuration() : this.duration()) / this._timeScale
                            }
                            ,
                            p.timeScale = function (t) {
                                if (!arguments.length)
                                    return this._timeScale;
                                if (t = t || _,
                                    this._timeline && this._timeline.smoothChildTiming) {
                                    var e = this._pauseTime
                                        , i = e || 0 === e ? e : this._timeline.totalTime();
                                    this._startTime = i - (i - this._startTime) * this._timeScale / t
                                }
                                return this._timeScale = t,
                                    this._uncache(!1)
                            }
                            ,
                            p.reversed = function (t) {
                                return arguments.length ? (t != this._reversed && (this._reversed = t,
                                    this.totalTime(this._timeline && !this._timeline.smoothChildTiming ? this.totalDuration() - this._totalTime : this._totalTime, !0)),
                                    this) : this._reversed
                            }
                            ,
                            p.paused = function (t) {
                                if (!arguments.length)
                                    return this._paused;
                                var e, i, n = this._timeline;
                                return t != this._paused && n && (m || t || f.wake(),
                                    e = n.rawTime(),
                                    i = e - this._pauseTime,
                                    !t && n.smoothChildTiming && (this._startTime += i,
                                        this._uncache(!1)),
                                    this._pauseTime = t ? e : null,
                                    this._paused = t,
                                    this._active = this.isActive(),
                                    !t && 0 !== i && this._initted && this.duration() && (e = n.smoothChildTiming ? this._totalTime : (e - this._startTime) / this._timeScale,
                                        this.render(e, e === this._totalTime, !0))),
                                    this._gc && !t && this._enabled(!0, !1),
                                    this
                            }
                            ;
                        var U = T("core.SimpleTimeline", function (t) {
                            N.call(this, 0, t),
                                this.autoRemoveChildren = this.smoothChildTiming = !0
                        });
                        p = U.prototype = new N,
                            p.constructor = U,
                            p.kill()._gc = !1,
                            p._first = p._last = p._recent = null,
                            p._sortChildren = !1,
                            p.add = p.insert = function (t, e, i, n) {
                                var r, o;
                                if (t._startTime = Number(e || 0) + t._delay,
                                    t._paused && this !== t._timeline && (t._pauseTime = t._startTime + (this.rawTime() - t._startTime) / t._timeScale),
                                    t.timeline && t.timeline._remove(t, !0),
                                    t.timeline = t._timeline = this,
                                    t._gc && t._enabled(!0, !0),
                                    r = this._last,
                                    this._sortChildren)
                                    for (o = t._startTime; r && r._startTime > o;)
                                        r = r._prev;
                                return r ? (t._next = r._next,
                                    r._next = t) : (t._next = this._first,
                                        this._first = t),
                                    t._next ? t._next._prev = t : this._last = t,
                                    t._prev = r,
                                    this._recent = t,
                                    this._timeline && this._uncache(!0),
                                    this
                            }
                            ,
                            p._remove = function (t, e) {
                                return t.timeline === this && (e || t._enabled(!1, !0),
                                    t._prev ? t._prev._next = t._next : this._first === t && (this._first = t._next),
                                    t._next ? t._next._prev = t._prev : this._last === t && (this._last = t._prev),
                                    t._next = t._prev = t.timeline = null,
                                    t === this._recent && (this._recent = this._last),
                                    this._timeline && this._uncache(!0)),
                                    this
                            }
                            ,
                            p.render = function (t, e, i) {
                                var n, r = this._first;
                                for (this._totalTime = this._time = this._rawPrevTime = t; r;)
                                    n = r._next,
                                        (r._active || t >= r._startTime && !r._paused) && (r._reversed ? r.render((r._dirty ? r.totalDuration() : r._totalDuration) - (t - r._startTime) * r._timeScale, e, i) : r.render((t - r._startTime) * r._timeScale, e, i)),
                                        r = n
                            }
                            ,
                            p.rawTime = function () {
                                return m || f.wake(),
                                    this._totalTime
                            }
                            ;
                        var B = T("TweenLite", function (t, e, i) {
                            if (N.call(this, e, i),
                                this.render = B.prototype.render,
                                null == t)
                                throw "Cannot tween a null target.";
                            this.target = t = "string" != typeof t ? t : B.selector(t) || t;
                            var r, o, a, s = t.jquery || t.length && t !== n && t[0] && (t[0] === n || t[0].nodeType && t[0].style && !t.nodeType), h = this.vars.overwrite;
                            if (this._overwrite = h = null == h ? K[B.defaultOverwrite] : "number" == typeof h ? h >> 0 : K[h],
                                (s || t instanceof Array || t.push && b(t)) && "number" != typeof t[0])
                                for (this._targets = a = y(t),
                                    this._propLookup = [],
                                    this._siblings = [],
                                    r = 0; r < a.length; r++)
                                    o = a[r],
                                        o ? "string" != typeof o ? o.length && o !== n && o[0] && (o[0] === n || o[0].nodeType && o[0].style && !o.nodeType) ? (a.splice(r--, 1),
                                            this._targets = a = a.concat(y(o))) : (this._siblings[r] = it(o, this, !1),
                                                1 === h && this._siblings[r].length > 1 && rt(o, this, null, 1, this._siblings[r])) : "string" == typeof (o = a[r--] = B.selector(o)) && a.splice(r + 1, 1) : a.splice(r--, 1);
                            else
                                this._propLookup = {},
                                    this._siblings = it(t, this, !1),
                                    1 === h && this._siblings.length > 1 && rt(t, this, null, 1, this._siblings);
                            (this.vars.immediateRender || 0 === e && 0 === this._delay && !1 !== this.vars.immediateRender) && (this._time = -_,
                                this.render(Math.min(0, -this._delay)))
                        }, !0)
                            , F = function (t) {
                                return t && t.length && t !== n && t[0] && (t[0] === n || t[0].nodeType && t[0].style && !t.nodeType)
                            }
                            , z = function (t, e) {
                                var i, n = {};
                                for (i in t)
                                    J[i] || i in e && "transform" !== i && "x" !== i && "y" !== i && "width" !== i && "height" !== i && "className" !== i && "border" !== i || !(!Y[i] || Y[i] && Y[i]._autoCSS) || (n[i] = t[i],
                                        delete t[i]);
                                t.css = n
                            };
                        p = B.prototype = new N,
                            p.constructor = B,
                            p.kill()._gc = !1,
                            p.ratio = 0,
                            p._firstPT = p._targets = p._overwrittenProps = p._startAt = null,
                            p._notifyPluginsOfEnabled = p._lazy = !1,
                            B.version = "1.19.1",
                            B.defaultEase = p._ease = new A(null, null, 1, 1),
                            B.defaultOverwrite = "auto",
                            B.ticker = f,
                            B.autoSleep = 120,
                            B.lagSmoothing = function (t, e) {
                                f.lagSmoothing(t, e)
                            }
                            ,
                            B.selector = n.$ || n.jQuery || function (t) {
                                var e = n.$ || n.jQuery;
                                return e ? (B.selector = e,
                                    e(t)) : void 0 === l ? t : l.querySelectorAll ? l.querySelectorAll(t) : l.getElementById("#" === t.charAt(0) ? t.substr(1) : t)
                            }
                            ;
                        var G = []
                            , j = {}
                            , k = /(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi
                            , H = function (t) {
                                for (var e, i = this._firstPT; i;)
                                    e = i.blob ? 1 === t ? this.end : t ? this.join("") : this.start : i.c * t + i.s,
                                        i.m ? e = i.m(e, this._target || i.t) : 1e-6 > e && e > -1e-6 && !i.blob && (e = 0),
                                        i.f ? i.fp ? i.t[i.p](i.fp, e) : i.t[i.p](e) : i.t[i.p] = e,
                                        i = i._next
                            }
                            , V = function (t, e, i, n) {
                                var r, o, a, s, h, l, c, u = [], d = 0, p = "", f = 0;
                                for (u.start = t,
                                    u.end = e,
                                    t = u[0] = t + "",
                                    e = u[1] = e + "",
                                    i && (i(u),
                                        t = u[0],
                                        e = u[1]),
                                    u.length = 0,
                                    r = t.match(k) || [],
                                    o = e.match(k) || [],
                                    n && (n._next = null,
                                        n.blob = 1,
                                        u._firstPT = u._applyPT = n),
                                    h = o.length,
                                    s = 0; h > s; s++)
                                    c = o[s],
                                        l = e.substr(d, e.indexOf(c, d) - d),
                                        p += l || !s ? l : ",",
                                        d += l.length,
                                        f ? f = (f + 1) % 5 : "rgba(" === l.substr(-5) && (f = 1),
                                        c === r[s] || r.length <= s ? p += c : (p && (u.push(p),
                                            p = ""),
                                            a = parseFloat(r[s]),
                                            u.push(a),
                                            u._firstPT = {
                                                _next: u._firstPT,
                                                t: u,
                                                p: u.length - 1,
                                                s: a,
                                                c: ("=" === c.charAt(1) ? parseInt(c.charAt(0) + "1", 10) * parseFloat(c.substr(2)) : parseFloat(c) - a) || 0,
                                                f: 0,
                                                m: f && 4 > f ? Math.round : 0
                                            }),
                                        d += c.length;
                                return p += e.substr(d),
                                    p && u.push(p),
                                    u.setRatio = H,
                                    u
                            }
                            , W = function (t, e, i, n, r, o, s, h, l) {
                                "function" == typeof n && (n = n(l || 0, t));
                                var c, u = a(t[e]), d = "function" !== u ? "" : e.indexOf("set") || "function" != typeof t["get" + e.substr(3)] ? e : "get" + e.substr(3), p = "get" !== i ? i : d ? s ? t[d](s) : t[d]() : t[e], f = "string" == typeof n && "=" === n.charAt(1), m = {
                                    t: t,
                                    p: e,
                                    s: p,
                                    f: "function" === u,
                                    pg: 0,
                                    n: r || e,
                                    m: o ? "function" == typeof o ? o : Math.round : 0,
                                    pr: 0,
                                    c: f ? parseInt(n.charAt(0) + "1", 10) * parseFloat(n.substr(2)) : parseFloat(n) - p || 0
                                };
                                return ("number" != typeof p || "number" != typeof n && !f) && (s || isNaN(p) || !f && isNaN(n) || "boolean" == typeof p || "boolean" == typeof n ? (m.fp = s,
                                    c = V(p, f ? m.s + m.c : n, h || B.defaultStringFilter, m),
                                    m = {
                                        t: c,
                                        p: "setRatio",
                                        s: 0,
                                        c: 1,
                                        f: 2,
                                        pg: 0,
                                        n: r || e,
                                        pr: 0,
                                        m: 0
                                    }) : (m.s = parseFloat(p),
                                        f || (m.c = parseFloat(n) - m.s || 0))),
                                    m.c ? ((m._next = this._firstPT) && (m._next._prev = m),
                                        this._firstPT = m,
                                        m) : void 0
                            }
                            , X = B._internals = {
                                isArray: b,
                                isSelector: F,
                                lazyTweens: G,
                                blobDif: V
                            }
                            , Y = B._plugins = {}
                            , q = X.tweenLookup = {}
                            , Z = 0
                            , J = X.reservedProps = {
                                ease: 1,
                                delay: 1,
                                overwrite: 1,
                                onComplete: 1,
                                onCompleteParams: 1,
                                onCompleteScope: 1,
                                useFrames: 1,
                                runBackwards: 1,
                                startAt: 1,
                                onUpdate: 1,
                                onUpdateParams: 1,
                                onUpdateScope: 1,
                                onStart: 1,
                                onStartParams: 1,
                                onStartScope: 1,
                                onReverseComplete: 1,
                                onReverseCompleteParams: 1,
                                onReverseCompleteScope: 1,
                                onRepeat: 1,
                                onRepeatParams: 1,
                                onRepeatScope: 1,
                                easeParams: 1,
                                yoyo: 1,
                                immediateRender: 1,
                                repeat: 1,
                                repeatDelay: 1,
                                data: 1,
                                paused: 1,
                                reversed: 1,
                                autoCSS: 1,
                                lazy: 1,
                                onOverwrite: 1,
                                callbackScope: 1,
                                stringFilter: 1,
                                id: 1
                            }
                            , K = {
                                none: 0,
                                all: 1,
                                auto: 2,
                                concurrent: 3,
                                allOnStart: 4,
                                preexisting: 5,
                                true: 1,
                                false: 0
                            }
                            , Q = N._rootFramesTimeline = new U
                            , $ = N._rootTimeline = new U
                            , tt = 30
                            , et = X.lazyRender = function () {
                                var t, e = G.length;
                                for (j = {}; --e > -1;)
                                    (t = G[e]) && !1 !== t._lazy && (t.render(t._lazy[0], t._lazy[1], !0),
                                        t._lazy = !1);
                                G.length = 0
                            }
                            ;
                        $._startTime = f.time,
                            Q._startTime = f.frame,
                            $._active = Q._active = !0,
                            setTimeout(et, 1),
                            N._updateRoot = B.render = function () {
                                var t, e, i;
                                if (G.length && et(),
                                    $.render((f.time - $._startTime) * $._timeScale, !1, !1),
                                    Q.render((f.frame - Q._startTime) * Q._timeScale, !1, !1),
                                    G.length && et(),
                                    f.frame >= tt) {
                                    tt = f.frame + (parseInt(B.autoSleep, 10) || 120);
                                    for (i in q) {
                                        for (e = q[i].tweens,
                                            t = e.length; --t > -1;)
                                            e[t]._gc && e.splice(t, 1);
                                        0 === e.length && delete q[i]
                                    }
                                    if ((!(i = $._first) || i._paused) && B.autoSleep && !Q._first && 1 === f._listeners.tick.length) {
                                        for (; i && i._paused;)
                                            i = i._next;
                                        i || f.sleep()
                                    }
                                }
                            }
                            ,
                            f.addEventListener("tick", N._updateRoot);
                        var it = function (t, e, i) {
                            var n, r, o = t._gsTweenID;
                            if (q[o || (t._gsTweenID = o = "t" + Z++)] || (q[o] = {
                                target: t,
                                tweens: []
                            }),
                                e && (n = q[o].tweens,
                                    n[r = n.length] = e,
                                    i))
                                for (; --r > -1;)
                                    n[r] === e && n.splice(r, 1);
                            return q[o].tweens
                        }
                            , nt = function (t, e, i, n) {
                                var r, o, a = t.vars.onOverwrite;
                                return a && (r = a(t, e, i, n)),
                                    a = B.onOverwrite,
                                    a && (o = a(t, e, i, n)),
                                    !1 !== r && !1 !== o
                            }
                            , rt = function (t, e, i, n, r) {
                                var o, a, s, h;
                                if (1 === n || n >= 4) {
                                    for (h = r.length,
                                        o = 0; h > o; o++)
                                        if ((s = r[o]) !== e)
                                            s._gc || s._kill(null, t, e) && (a = !0);
                                        else if (5 === n)
                                            break;
                                    return a
                                }
                                var l, c = e._startTime + _, u = [], d = 0, p = 0 === e._duration;
                                for (o = r.length; --o > -1;)
                                    (s = r[o]) === e || s._gc || s._paused || (s._timeline !== e._timeline ? (l = l || ot(e, 0, p),
                                        0 === ot(s, l, p) && (u[d++] = s)) : s._startTime <= c && s._startTime + s.totalDuration() / s._timeScale > c && ((p || !s._initted) && c - s._startTime <= 2e-10 || (u[d++] = s)));
                                for (o = d; --o > -1;)
                                    if (s = u[o],
                                        2 === n && s._kill(i, t, e) && (a = !0),
                                        2 !== n || !s._firstPT && s._initted) {
                                        if (2 !== n && !nt(s, e))
                                            continue;
                                        s._enabled(!1, !1) && (a = !0)
                                    }
                                return a
                            }
                            , ot = function (t, e, i) {
                                for (var n = t._timeline, r = n._timeScale, o = t._startTime; n._timeline;) {
                                    if (o += n._startTime,
                                        r *= n._timeScale,
                                        n._paused)
                                        return -100;
                                    n = n._timeline
                                }
                                return o /= r,
                                    o > e ? o - e : i && o === e || !t._initted && 2 * _ > o - e ? _ : (o += t.totalDuration() / t._timeScale / r) > e + _ ? 0 : o - e - _
                            };
                        p._init = function () {
                            var t, e, i, n, r, o, a = this.vars, s = this._overwrittenProps, h = this._duration, l = !!a.immediateRender, c = a.ease;
                            if (a.startAt) {
                                this._startAt && (this._startAt.render(-1, !0),
                                    this._startAt.kill()),
                                    r = {};
                                for (n in a.startAt)
                                    r[n] = a.startAt[n];
                                if (r.overwrite = !1,
                                    r.immediateRender = !0,
                                    r.lazy = l && !1 !== a.lazy,
                                    r.startAt = r.delay = null,
                                    this._startAt = B.to(this.target, 0, r),
                                    l)
                                    if (this._time > 0)
                                        this._startAt = null;
                                    else if (0 !== h)
                                        return
                            } else if (a.runBackwards && 0 !== h)
                                if (this._startAt)
                                    this._startAt.render(-1, !0),
                                        this._startAt.kill(),
                                        this._startAt = null;
                                else {
                                    0 !== this._time && (l = !1),
                                        i = {};
                                    for (n in a)
                                        J[n] && "autoCSS" !== n || (i[n] = a[n]);
                                    if (i.overwrite = 0,
                                        i.data = "isFromStart",
                                        i.lazy = l && !1 !== a.lazy,
                                        i.immediateRender = l,
                                        this._startAt = B.to(this.target, 0, i),
                                        l) {
                                        if (0 === this._time)
                                            return
                                    } else
                                        this._startAt._init(),
                                            this._startAt._enabled(!1),
                                            this.vars.immediateRender && (this._startAt = null)
                                }
                            if (this._ease = c = c ? c instanceof A ? c : "function" == typeof c ? new A(c, a.easeParams) : P[c] || B.defaultEase : B.defaultEase,
                                a.easeParams instanceof Array && c.config && (this._ease = c.config.apply(c, a.easeParams)),
                                this._easeType = this._ease._type,
                                this._easePower = this._ease._power,
                                this._firstPT = null,
                                this._targets)
                                for (o = this._targets.length,
                                    t = 0; o > t; t++)
                                    this._initProps(this._targets[t], this._propLookup[t] = {}, this._siblings[t], s ? s[t] : null, t) && (e = !0);
                            else
                                e = this._initProps(this.target, this._propLookup, this._siblings, s, 0);
                            if (e && B._onPluginEvent("_onInitAllProps", this),
                                s && (this._firstPT || "function" != typeof this.target && this._enabled(!1, !1)),
                                a.runBackwards)
                                for (i = this._firstPT; i;)
                                    i.s += i.c,
                                        i.c = -i.c,
                                        i = i._next;
                            this._onUpdate = a.onUpdate,
                                this._initted = !0
                        }
                            ,
                            p._initProps = function (t, e, i, r, o) {
                                var a, s, h, l, c, u;
                                if (null == t)
                                    return !1;
                                j[t._gsTweenID] && et(),
                                    this.vars.css || t.style && t !== n && t.nodeType && Y.css && !1 !== this.vars.autoCSS && z(this.vars, t);
                                for (a in this.vars)
                                    if (u = this.vars[a],
                                        J[a])
                                        u && (u instanceof Array || u.push && b(u)) && -1 !== u.join("").indexOf("{self}") && (this.vars[a] = u = this._swapSelfInParams(u, this));
                                    else if (Y[a] && (l = new Y[a])._onInitTween(t, this.vars[a], this, o)) {
                                        for (this._firstPT = c = {
                                            _next: this._firstPT,
                                            t: l,
                                            p: "setRatio",
                                            s: 0,
                                            c: 1,
                                            f: 1,
                                            n: a,
                                            pg: 1,
                                            pr: l._priority,
                                            m: 0
                                        },
                                            s = l._overwriteProps.length; --s > -1;)
                                            e[l._overwriteProps[s]] = this._firstPT;
                                        (l._priority || l._onInitAllProps) && (h = !0),
                                            (l._onDisable || l._onEnable) && (this._notifyPluginsOfEnabled = !0),
                                            c._next && (c._next._prev = c)
                                    } else
                                        e[a] = W.call(this, t, a, "get", u, a, 0, null, this.vars.stringFilter, o);
                                return r && this._kill(r, t) ? this._initProps(t, e, i, r, o) : this._overwrite > 1 && this._firstPT && i.length > 1 && rt(t, this, e, this._overwrite, i) ? (this._kill(e, t),
                                    this._initProps(t, e, i, r, o)) : (this._firstPT && (!1 !== this.vars.lazy && this._duration || this.vars.lazy && !this._duration) && (j[t._gsTweenID] = !0),
                                        h)
                            }
                            ,
                            p.render = function (t, e, i) {
                                var n, r, o, a, s = this._time, h = this._duration, l = this._rawPrevTime;
                                if (t >= h - 1e-7 && t >= 0)
                                    this._totalTime = this._time = h,
                                        this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1,
                                        this._reversed || (n = !0,
                                            r = "onComplete",
                                            i = i || this._timeline.autoRemoveChildren),
                                        0 === h && (this._initted || !this.vars.lazy || i) && (this._startTime === this._timeline._duration && (t = 0),
                                            (0 > l || 0 >= t && t >= -1e-7 || l === _ && "isPause" !== this.data) && l !== t && (i = !0,
                                                l > _ && (r = "onReverseComplete")),
                                            this._rawPrevTime = a = !e || t || l === t ? t : _);
                                else if (1e-7 > t)
                                    this._totalTime = this._time = 0,
                                        this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0,
                                        (0 !== s || 0 === h && l > 0) && (r = "onReverseComplete",
                                            n = this._reversed),
                                        0 > t && (this._active = !1,
                                            0 === h && (this._initted || !this.vars.lazy || i) && (l >= 0 && (l !== _ || "isPause" !== this.data) && (i = !0),
                                                this._rawPrevTime = a = !e || t || l === t ? t : _)),
                                        this._initted || (i = !0);
                                else if (this._totalTime = this._time = t,
                                    this._easeType) {
                                    var c = t / h
                                        , u = this._easeType
                                        , d = this._easePower;
                                    (1 === u || 3 === u && c >= .5) && (c = 1 - c),
                                        3 === u && (c *= 2),
                                        1 === d ? c *= c : 2 === d ? c *= c * c : 3 === d ? c *= c * c * c : 4 === d && (c *= c * c * c * c),
                                        this.ratio = 1 === u ? 1 - c : 2 === u ? c : .5 > t / h ? c / 2 : 1 - c / 2
                                } else
                                    this.ratio = this._ease.getRatio(t / h);
                                if (this._time !== s || i) {
                                    if (!this._initted) {
                                        if (this._init(),
                                            !this._initted || this._gc)
                                            return;
                                        if (!i && this._firstPT && (!1 !== this.vars.lazy && this._duration || this.vars.lazy && !this._duration))
                                            return this._time = this._totalTime = s,
                                                this._rawPrevTime = l,
                                                G.push(this),
                                                void (this._lazy = [t, e]);
                                        this._time && !n ? this.ratio = this._ease.getRatio(this._time / h) : n && this._ease._calcEnd && (this.ratio = this._ease.getRatio(0 === this._time ? 0 : 1))
                                    }
                                    for (!1 !== this._lazy && (this._lazy = !1),
                                        this._active || !this._paused && this._time !== s && t >= 0 && (this._active = !0),
                                        0 === s && (this._startAt && (t >= 0 ? this._startAt.render(t, e, i) : r || (r = "_dummyGS")),
                                            this.vars.onStart && (0 !== this._time || 0 === h) && (e || this._callback("onStart"))),
                                        o = this._firstPT; o;)
                                        o.f ? o.t[o.p](o.c * this.ratio + o.s) : o.t[o.p] = o.c * this.ratio + o.s,
                                            o = o._next;
                                    this._onUpdate && (0 > t && this._startAt && -1e-4 !== t && this._startAt.render(t, e, i),
                                        e || (this._time !== s || n || i) && this._callback("onUpdate")),
                                        r && (!this._gc || i) && (0 > t && this._startAt && !this._onUpdate && -1e-4 !== t && this._startAt.render(t, e, i),
                                            n && (this._timeline.autoRemoveChildren && this._enabled(!1, !1),
                                                this._active = !1),
                                            !e && this.vars[r] && this._callback(r),
                                            0 === h && this._rawPrevTime === _ && a !== _ && (this._rawPrevTime = 0))
                                }
                            }
                            ,
                            p._kill = function (t, e, i) {
                                if ("all" === t && (t = null),
                                    null == t && (null == e || e === this.target))
                                    return this._lazy = !1,
                                        this._enabled(!1, !1);
                                e = "string" != typeof e ? e || this._targets || this.target : B.selector(e) || e;
                                var n, r, o, s, h, l, c, u, d, p = i && this._time && i._startTime === this._startTime && this._timeline === i._timeline;
                                if ((b(e) || F(e)) && "number" != typeof e[0])
                                    for (n = e.length; --n > -1;)
                                        this._kill(t, e[n], i) && (l = !0);
                                else {
                                    if (this._targets) {
                                        for (n = this._targets.length; --n > -1;)
                                            if (e === this._targets[n]) {
                                                h = this._propLookup[n] || {},
                                                    this._overwrittenProps = this._overwrittenProps || [],
                                                    r = this._overwrittenProps[n] = t ? this._overwrittenProps[n] || {} : "all";
                                                break
                                            }
                                    } else {
                                        if (e !== this.target)
                                            return !1;
                                        h = this._propLookup,
                                            r = this._overwrittenProps = t ? this._overwrittenProps || {} : "all"
                                    }
                                    if (h) {
                                        if (c = t || h,
                                            u = t !== r && "all" !== r && t !== h && ("object" != (void 0 === t ? "undefined" : a(t)) || !t._tempKill),
                                            i && (B.onOverwrite || this.vars.onOverwrite)) {
                                            for (o in c)
                                                h[o] && (d || (d = []),
                                                    d.push(o));
                                            if ((d || !t) && !nt(this, i, e, d))
                                                return !1
                                        }
                                        for (o in c)
                                            (s = h[o]) && (p && (s.f ? s.t[s.p](s.s) : s.t[s.p] = s.s,
                                                l = !0),
                                                s.pg && s.t._kill(c) && (l = !0),
                                                s.pg && 0 !== s.t._overwriteProps.length || (s._prev ? s._prev._next = s._next : s === this._firstPT && (this._firstPT = s._next),
                                                    s._next && (s._next._prev = s._prev),
                                                    s._next = s._prev = null),
                                                delete h[o]),
                                                u && (r[o] = 1);
                                        !this._firstPT && this._initted && this._enabled(!1, !1)
                                    }
                                }
                                return l
                            }
                            ,
                            p.invalidate = function () {
                                return this._notifyPluginsOfEnabled && B._onPluginEvent("_onDisable", this),
                                    this._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null,
                                    this._notifyPluginsOfEnabled = this._active = this._lazy = !1,
                                    this._propLookup = this._targets ? {} : [],
                                    N.prototype.invalidate.call(this),
                                    this.vars.immediateRender && (this._time = -_,
                                        this.render(Math.min(0, -this._delay))),
                                    this
                            }
                            ,
                            p._enabled = function (t, e) {
                                if (m || f.wake(),
                                    t && this._gc) {
                                    var i, n = this._targets;
                                    if (n)
                                        for (i = n.length; --i > -1;)
                                            this._siblings[i] = it(n[i], this, !0);
                                    else
                                        this._siblings = it(this.target, this, !0)
                                }
                                return N.prototype._enabled.call(this, t, e),
                                    !(!this._notifyPluginsOfEnabled || !this._firstPT) && B._onPluginEvent(t ? "_onEnable" : "_onDisable", this)
                            }
                            ,
                            B.to = function (t, e, i) {
                                return new B(t, e, i)
                            }
                            ,
                            B.from = function (t, e, i) {
                                return i.runBackwards = !0,
                                    i.immediateRender = 0 != i.immediateRender,
                                    new B(t, e, i)
                            }
                            ,
                            B.fromTo = function (t, e, i, n) {
                                return n.startAt = i,
                                    n.immediateRender = 0 != n.immediateRender && 0 != i.immediateRender,
                                    new B(t, e, n)
                            }
                            ,
                            B.delayedCall = function (t, e, i, n, r) {
                                return new B(e, 0, {
                                    delay: t,
                                    onComplete: e,
                                    onCompleteParams: i,
                                    callbackScope: n,
                                    onReverseComplete: e,
                                    onReverseCompleteParams: i,
                                    immediateRender: !1,
                                    lazy: !1,
                                    useFrames: r,
                                    overwrite: 0
                                })
                            }
                            ,
                            B.set = function (t, e) {
                                return new B(t, 0, e)
                            }
                            ,
                            B.getTweensOf = function (t, e) {
                                if (null == t)
                                    return [];
                                t = "string" != typeof t ? t : B.selector(t) || t;
                                var i, n, r, o;
                                if ((b(t) || F(t)) && "number" != typeof t[0]) {
                                    for (i = t.length,
                                        n = []; --i > -1;)
                                        n = n.concat(B.getTweensOf(t[i], e));
                                    for (i = n.length; --i > -1;)
                                        for (o = n[i],
                                            r = i; --r > -1;)
                                            o === n[r] && n.splice(i, 1)
                                } else
                                    for (n = it(t).concat(),
                                        i = n.length; --i > -1;)
                                        (n[i]._gc || e && !n[i].isActive()) && n.splice(i, 1);
                                return n
                            }
                            ,
                            B.killTweensOf = B.killDelayedCallsTo = function (t, e, i) {
                                "object" == (void 0 === e ? "undefined" : a(e)) && (i = e,
                                    e = !1);
                                for (var n = B.getTweensOf(t, e), r = n.length; --r > -1;)
                                    n[r]._kill(i, t)
                            }
                            ;
                        var at = T("plugins.TweenPlugin", function (t, e) {
                            this._overwriteProps = (t || "").split(","),
                                this._propName = this._overwriteProps[0],
                                this._priority = e || 0,
                                this._super = at.prototype
                        }, !0);
                        if (p = at.prototype,
                            at.version = "1.19.0",
                            at.API = 2,
                            p._firstPT = null,
                            p._addTween = W,
                            p.setRatio = H,
                            p._kill = function (t) {
                                var e, i = this._overwriteProps, n = this._firstPT;
                                if (null != t[this._propName])
                                    this._overwriteProps = [];
                                else
                                    for (e = i.length; --e > -1;)
                                        null != t[i[e]] && i.splice(e, 1);
                                for (; n;)
                                    null != t[n.n] && (n._next && (n._next._prev = n._prev),
                                        n._prev ? (n._prev._next = n._next,
                                            n._prev = null) : this._firstPT === n && (this._firstPT = n._next)),
                                        n = n._next;
                                return !1
                            }
                            ,
                            p._mod = p._roundProps = function (t) {
                                for (var e, i = this._firstPT; i;)
                                    e = t[this._propName] || null != i.n && t[i.n.split(this._propName + "_").join("")],
                                        e && "function" == typeof e && (2 === i.f ? i.t._applyPT.m = e : i.m = e),
                                        i = i._next
                            }
                            ,
                            B._onPluginEvent = function (t, e) {
                                var i, n, r, o, a, s = e._firstPT;
                                if ("_onInitAllProps" === t) {
                                    for (; s;) {
                                        for (a = s._next,
                                            n = r; n && n.pr > s.pr;)
                                            n = n._next;
                                        (s._prev = n ? n._prev : o) ? s._prev._next = s : r = s,
                                            (s._next = n) ? n._prev = s : o = s,
                                            s = a
                                    }
                                    s = e._firstPT = r
                                }
                                for (; s;)
                                    s.pg && "function" == typeof s.t[t] && s.t[t]() && (i = !0),
                                        s = s._next;
                                return i
                            }
                            ,
                            at.activate = function (t) {
                                for (var e = t.length; --e > -1;)
                                    t[e].API === at.API && (Y[(new t[e])._propName] = t[e]);
                                return !0
                            }
                            ,
                            E.plugin = function (t) {
                                if (!(t && t.propName && t.init && t.API))
                                    throw "illegal plugin definition.";
                                var e, i = t.propName, n = t.priority || 0, r = t.overwriteProps, o = {
                                    init: "_onInitTween",
                                    set: "setRatio",
                                    kill: "_kill",
                                    round: "_mod",
                                    mod: "_mod",
                                    initAll: "_onInitAllProps"
                                }, a = T("plugins." + i.charAt(0).toUpperCase() + i.substr(1) + "Plugin", function () {
                                    at.call(this, i, n),
                                        this._overwriteProps = r || []
                                }, !0 === t.global), s = a.prototype = new at(i);
                                s.constructor = a,
                                    a.API = t.API;
                                for (e in o)
                                    "function" == typeof t[e] && (s[o[e]] = t[e]);
                                return a.version = t.version,
                                    at.activate([a]),
                                    a
                            }
                            ,
                            u = n._gsQueue) {
                            for (d = 0; d < u.length; d++)
                                u[d]();
                            for (p in w)
                                w[p].func || n.console.log("GSAP encountered missing dependency: " + p)
                        }
                        m = !1
                    }
                }(void 0 !== t && t.exports && void 0 !== n ? n : window, "TweenMax")
        }
        ).call(e, i(49))
    }
    , function (t, e) {
        (function (e) {
            t.exports = e
        }
        ).call(e, {})
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/asteroid-pieces.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/yellow-planet-mobile.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/group-1.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/group-2.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/group-3.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/group-5.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/clouds.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/glows.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/glows-mercury.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/paper-plane.jpg"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/earth.jpg"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/jupiter.jpg"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/white.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/mars.jpg"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/end.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/mars.jpg"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/mars.jpg"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/purple.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/sand.jpg"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/mercury.jpg"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/spaceship-flame.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/stars.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/sun.jpg"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/1.png" //nx.png
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/2.png" //px.png
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/3.png" //ny.png
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/4.png" //py.png
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/5.png" //nz.png
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/6.png" //pz.png
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/home-1.png"
    }
    // , function (t, e, i) {
    //     t.exports = i.p + "assets/files/frames.png"
    // }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/blank.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/home-5.png"
    }
    // , function (t, e, i) {
    //     t.exports = i.p + "assets/files/blue-lights-frames-1.png"
    // }
    // , function (t, e, i) {
    //     t.exports = i.p + "assets/files/blue-lights-frames-2.png"
    // }
    // , function (t, e, i) {
    //     t.exports = i.p + "assets/files/blue-lights-frames-3.png"
    // }
    // , function (t, e, i) {
    //     t.exports = i.p + "assets/files/red-lights-frames.png"
    // }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/blank.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/blank.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/blank.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/blank.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/home-10.png"
    }
    // , function (t, e, i) {
    //     t.exports = i.p + "assets/files/blue-lights-frames-1.png"
    // }
    // , function (t, e, i) {
    //     t.exports = i.p + "assets/files/blue-lights-frames-2.png"
    // }
    // , function (t, e, i) {
    //     t.exports = i.p + "assets/files/blue-lights-frames-3.png"
    // }
    // , function (t, e, i) {
    //     t.exports = i.p + "assets/files/frames.png"
    // }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/blank.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/blank.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/blank.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/blank.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/starclouds.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/missiles.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/sparkles.png"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/background.mp3"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/astronauts.mp3"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/planet-ice.mp3"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/planet-mercury.mp3"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/link-hover.mp3"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/link-show.mp3"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/link-click.mp3"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/black-hole.mp3"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/spaceship-2.mp3"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/spaceship-3.mp3"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/asteroid-explosion.mp3"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/laser-red.mp3"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/laser-blue.mp3"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/border-1.obj"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/border-2.obj"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/HN_t42_Envorian_Battlecruiser.obj"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/HN_t42_Envorian_Battlecruiser.mtl"
    }
    //  ----------- ve tinh
    , function (t, e, i) {
        t.exports = i.p + "assets/files/sputnik.obj"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/missile-blue.obj"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/missile-red.obj"
    }
    , function (t, e, i) {
        t.exports = i.p + "assets/files/gradient-background.png"
    }
    , function (t, e, i) {
        "use strict";
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var n = {
            canvas: !!window.CanvasRenderingContext2D,
            webgl: function () {
                try {
                    var t = document.createElement("canvas");
                    return !(!window.WebGLRenderingContext || !t.getContext("webgl") && !t.getContext("experimental-webgl"))
                } catch (t) {
                    return !1
                }
            }(),
            workers: !!window.Worker,
            fileapi: window.File && window.FileReader && window.FileList && window.Blob,
            getWebGLErrorMessage: function () {
                var t = document.createElement("div");
                return t.id = "webgl-error-message",
                    t.style.fontFamily = "monospace",
                    t.style.fontSize = "13px",
                    t.style.fontWeight = "normal",
                    t.style.textAlign = "center",
                    t.style.background = "#fff",
                    t.style.color = "#000",
                    t.style.padding = "1.5em",
                    t.style.width = "400px",
                    t.style.margin = "5em auto 0",
                    this.webgl || (t.innerHTML = window.WebGLRenderingContext ? ['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br />', 'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'].join("\n") : ['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br/>', 'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'].join("\n")),
                    t
            },
            addGetWebGLMessage: function (t) {
                var e, i, r;
                t = t || {},
                    e = void 0 !== t.parent ? t.parent : document.body,
                    i = void 0 !== t.id ? t.id : "oldie",
                    r = n.getWebGLErrorMessage(),
                    r.id = i,
                    e.appendChild(r)
            }
        };
        e.default = n
    }
], [350]);